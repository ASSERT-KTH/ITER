bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  allFunctionScopes.add(n,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(n,  scope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(n,  scope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	60	None	replace
2	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope,  parentScope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	60	None	replace
3	[BUG]  [BUGGY]  allFunctionScopes.add(scope,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(scope,  fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(scope,  fnScope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	60	None	replace
4	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
9	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
10	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
11	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
12	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
13	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
14	[BUG]  [BUGGY]  AllFunctionScopes.add(n,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.add(n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(n,  parentScope);	  allFunctionScopes.add(n,    fnScope);    	non-compiled	[CE]  	31	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  allFunctionScopes.size());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  allFunctionScopes.size());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  allFunctionScopes.size());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
21	[BUG]  [BUGGY]  AllFunctionScopes.remove(n,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.remove(n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.remove(n,  parentScope);	  AllFunctionScopes.remove(n);    	non-compiled	[CE]  	15	None	replace
22	[BUG]  [BUGGY]  allFunctionScopes.add(n,  traverseNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(n,  traverseNode);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(n,  traverseNode);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	59	None	replace
23	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode,  n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope,  traverseNode,  n);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	59	None	replace
24	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope,  n);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	59	None	replace
25	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope,  traverseNode,  parentScope);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	59	None	replace
26	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
27	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
28	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
29	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
30	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
31	[BUG]  [BUGGY]  allFunctionScopes.removeAll(n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.removeAll(n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.removeAll(n);	  allFunctionScopes.addAll(parentScope);    	non-compiled	[CE]  	32	None	replace
32	[BUG]  [BUGGY]  For(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  For(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	For(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
33	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
34	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  allFunctionScopes.size());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  allFunctionScopes.size());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION,  allFunctionScopes.size());	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()!=  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  allFunctionScopes.add(fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  allFunctionScopes.add(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  allFunctionScopes.add(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	63	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.remove(fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.remove(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.remove(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	63	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  allFunctionScopes.contains(fnScope));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  allFunctionScopes.contains(fnScope));  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  allFunctionScopes.contains(fnScope));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	63	None	replace
41	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	14	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	14	None	replace
43	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	14	None	replace
44	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parent  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parent  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parent	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	27	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  allFunctionScopes.add(fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  allFunctionScopes.add(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  allFunctionScopes.add(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	62	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.remove(fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.remove(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.remove(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	62	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  allFunctionScopes.contains(fnScope));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  allFunctionScopes.contains(fnScope));  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  allFunctionScopes.contains(fnScope));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	62	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  allFunctionScopes.contains(fnScope));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  allFunctionScopes.contains(fnScope));  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  allFunctionScopes.contains(fnScope));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	62	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	41	None	replace
61	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	41	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	21	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  0);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  0);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  0);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.isEmpty());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.isEmpty());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.isEmpty());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  +  1);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  +  1);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
69	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	4	None	replace
70	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	4	None	replace
71	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	4	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
73	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiveNode(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiveNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiveNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
76	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiceNode(c,  n,  parentScope);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiceNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiceNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
78	[BUG]  [BUGGY]  AllFunctionScopes.addAll(fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.addAll(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.addAll(fnScope);	  allFunctionScopes.addAll(n);    	non-compiled	[CE]  	68	None	replace
79	[BUG]  [BUGGY]  allFunctionScopes.addAll(n,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(n,  parentScope);	  allFunctionScopes.addAll(n);    	non-compiled	[CE]  	68	None	replace
80	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	11	None	replace
81	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	11	None	replace
82	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.check  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.check  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.check	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
90	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	5	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	5	None	replace
92	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
94	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parentScope.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	25	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(!isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parentScope.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	25	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	40	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	40	None	replace
100	[BUG]  [BUGGY]  allFunctionScopes.add(referenced);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(referenced);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(referenced);	  allFunctionScopes.addAll(referenced);    	non-compiled	[CE]  	34	None	replace
101	[BUG]  [BUGGY]  allFunctionScopes.addAll(referenced,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(referenced,  fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(referenced,  fnScope);	  allFunctionScopes.addAll(referenced);    	non-compiled	[CE]  	34	None	replace
102	[BUG]  [BUGGY]  AllFunctionScopes.addAll(fnScopes.values());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.addAll(fnScopes.values());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.addAll(fnScopes.values());	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
103	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope.values());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(fnScope.values());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope.values());	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
104	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.get(0));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScopes.get(0));  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.get(0));	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
105	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.values(),  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScopes.values(),  scope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.values(),  scope);	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
106	[BUG]  [BUGGY]  allFunctionScopes.removeAll(fnScopes.values());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.removeAll(fnScopes.values());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.removeAll(fnScopes.values());	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
109	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
111	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	8	None	replace
113	[BUG]  [BUGGY]  final  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  final  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	final  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	36	None	replace
114	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	36	None	replace
115	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	36	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
119	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
120	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  traverseNode(c,  n,  parentScope);	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
123	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	53	None	replace
124	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	53	None	replace
125	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	53	None	replace
126	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	53	None	replace
127	[BUG]  [BUGGY]  allFunctionScopes.remove(c);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.remove(c);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(c);	  allFunctionScopes.add(c);    	non-compiled	[CE]  	71	None	replace
128	[BUG]  [BUGGY]  AllFunctionScopes.remove(parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.remove(parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.remove(parentScope);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  	20	None	replace
129	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScope,  traverseNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScope,  traverseNode);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScope,  traverseNode);	  allFunctionScopes.addAll(fnScope);    	non-compiled	[CE]  	66	None	replace
130	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScope.cloneTree());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScope.cloneTree());	  allFunctionScopes.addAll(fnScope);    	non-compiled	[CE]  	66	None	replace
131	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	47	None	replace
132	[BUG]  [BUGGY]  AllFunctionScopes.addAll(fnScopes);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.addAll(fnScopes);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.addAll(fnScopes);	  allFunctionScopes.addAll(parentScopes);    	non-compiled	[CE]  	56	None	replace
133	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	9	None	replace
134	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  traverseNode(c,  n,  parentScope);	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	2	None	replace
136	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	42	None	replace
137	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentS  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentS	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	42	None	replace
138	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AssertionFailedError.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
139	[BUG]  [BUGGY]  allFunctionScopes.remove(n,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.remove(n,  scope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(n,  scope);	  allFunctionScopes.remove(n,    parentScope);    	non-compiled	[CE]  	16	None	replace
140	[BUG]  [BUGGY]  allFunctionScopes.remove(n,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.remove(n,  fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(n,  fnScope);	  allFunctionScopes.remove(n,    parentScope);    	non-compiled	[CE]  	16	None	replace
141	[BUG]  [BUGGY]  AllFunctionScopes.remove(n,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.remove(n,  scope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.remove(n,  scope);	  allFunctionScopes.remove(n,    parentScope);    	non-compiled	[CE]  	16	None	replace
142	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(fnScope.cloneTree());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope.cloneTree());	  allFunctionScopes.addAll(fnScopes.cloneTree());    	non-compiled	[CE]  	57	None	replace
143	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.clone());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScopes.clone());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.clone());	  allFunctionScopes.addAll(fnScopes.cloneTree());    	non-compiled	[CE]  	57	None	replace
144	[BUG]  [BUGGY]  allFunctionScopes.addAll(scope.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(scope.cloneTree());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(scope.cloneTree());	  allFunctionScopes.addAll(fnScopes.cloneTree());    	non-compiled	[CE]  	57	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.VAR);  allFunctionScopes.add(fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.VAR);  allFunctionScopes.add(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.VAR);  allFunctionScopes.add(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	64	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  allFunctionScopes.remove(fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  allFunctionScopes.remove(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  allFunctionScopes.remove(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	64	None	replace
147	[BUG]  [BUGGY]  allFunctionScopes.removeAll(fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.removeAll(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.removeAll(fnScope);	  allFunctionScopes.addAll(scope);    	non-compiled	[CE]  	35	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
150	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNC  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNC  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNC	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
153	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    	non-compiled	[CE]  	74	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(c);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(c);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(c);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionS  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionS	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allF  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allF  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allF	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    allFunctionScopes.add(c);    }    	non-compiled	[CE]  	72	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	46	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	46	None	replace
163	[BUG]  [BUGGY]  allFunctionScopes.removeAll(fnScopes.size());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.removeAll(fnScopes.size());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.removeAll(fnScopes.size());	  allFunctionScopes.removeAll(fnScopes);    	non-compiled	[CE]  	33	None	replace
164	[BUG]  [BUGGY]  allFunctionScopes.removeAll(parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.removeAll(parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.removeAll(parentScope);	  allFunctionScopes.removeAll(fnScopes);    	non-compiled	[CE]  	33	None	replace
165	[BUG]  [BUGGY]  AllFunctionScopes.removeAll(fnScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.removeAll(fnScopes);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.removeAll(fnScopes);	  allFunctionScopes.removeAll(fnScopes);    	non-compiled	[CE]  	33	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  traverseNode(c,  n,  parentScope);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	1	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	37	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	37	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	52	None	replace
172	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    scope);    }    	non-compiled	[CE]  	48	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    scope);    }    	non-compiled	[CE]  	48	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    scope);    }    	non-compiled	[CE]  	48	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
176	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
177	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
178	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
180	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
181	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	67	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnusedVars)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnusedVars)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  ||  isUnusedVars)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
187	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
188	[BUG]  [BUGGY]  final  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  final  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	final  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
189	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
190	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
192	[BUG]  [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AssertionFailedError.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AssertionFailedError.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
195	[BUG]  [BUGGY]  AllFunctionScopes.add(n,  traverseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.add(n,  traverseNode);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(n,  traverseNode);	  AllFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	19	None	replace
196	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  traverseNode,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.add(fnScope,  traverseNode,  n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(fnScope,  traverseNode,  n);	  AllFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	19	None	replace
197	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.add(fnScope,  n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(fnScope,  n);	  AllFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	19	None	replace
198	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	44	None	replace
199	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	44	None	replace
200	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	44	None	replace
201	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	44	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(isAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	46	None	replace
203	[BUG]  [BUGGY]  allFunctionScopes.remove(body,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.remove(body,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(body,  parentScope);	  allFunctionScopes.remove(n,    parentScope);    	non-compiled	[CE]  	16	None	replace
204	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	36	None	replace
205	[BUG]  [BUGGY]  final  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  final  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	final  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	36	None	replace
206	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	36	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	37	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	4	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnS  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	40	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	40	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	40	None	replace
212	[BUG]  [BUGGY]  allFunctionScopes.add(body);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(body);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(body);	  allFunctionScopes.remove(body);    	non-compiled	[CE]  	55	None	replace
213	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
214	[BUG]  [BUGGY]  AllFunctionScopes.remove(body);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.remove(body);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.remove(body);	  AllFunctionScopes.remove(n);    	non-compiled	[CE]  	15	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  nameNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  nameNode);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  nameNode);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
222	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
223	[BUG]  [BUGGY]  allFunctionScopes.add(parentScope,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.add(parentScope,  fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(parentScope,  fnScope);	  allFunctionScopes.add(n,    fnScope);    	non-compiled	[CE]  	31	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.addAll(fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.addAll(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.addAll(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	63	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchieNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
229	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	9	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentS  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentS	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	52	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	52	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    	non-compiled	[CE]  	74	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    	non-compiled	[CE]  	74	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	5	None	replace
237	[BUG]  [BUGGY]  allFunctionScopes.addAll(n.values());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(n.values());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(n.values());	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  1)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  1)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  1)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
240	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
241	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parentScope.getFirstChild();  n!=  null;  c  =  n.getNext())  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parentScope.getFirstChild();  n!=  null;  c  =  n.getNext())  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parentScope.getFirstChild();  n!=  null;  c  =  n.getNext())  {  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parentScope.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	25	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	14	None	replace
244	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
245	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
246	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
251	[BUG]  [BUGGY]  Assignment.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assignment.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assignment.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	2	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(isAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    scope);    }    	non-compiled	[CE]  	48	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	8	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
255	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
256	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	53	None	replace
257	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	47	None	replace
258	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	47	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
260	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNC  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNC  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNC	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
263	[BUG]  [BUGGY]  allFunctionScopes.addAll(removed);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(removed);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(removed);	  allFunctionScopes.addAll(referenced);    	non-compiled	[CE]  	34	None	replace
264	[BUG]  [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isFunctionAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	42	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isFunctionAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
270	[BUG]  [BUGGY]  allFunctionScopes.addAll(n.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(n.cloneTree());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(n.cloneTree());	  allFunctionScopes.addAll(fnScopes.cloneTree());    	non-compiled	[CE]  	57	None	replace
271	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.add(fnScope,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(fnScope,  parentScope);	  AllFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	19	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
276	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	11	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.addAll(fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.addAll(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.addAll(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	62	None	replace
278	[BUG]  [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	&&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FU  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FU  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FU  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FU    	non-compiled	[CE]  	23	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	7	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parent  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parent  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign  &&  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parent	  Preconditions.checkState(isPropertyAssign   ")    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	3	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    scope);    }    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  franchieNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    franchiseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	6	None	replace
293	[BUG]  [BUGGY]  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION    	non-compiled	[CE]  	24	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	43	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
300	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign);  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign);    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	61	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkS	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.check  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.check  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.check	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  Preconditions.checkS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  n  =  n.getFirstChild();  n!=  null;  c  =  c.getNext())  {  Preconditions.checkS	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	69	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	39	None	replace
307	[BUG]  [BUGGY]  allFunctionScopes.addAll(next);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(next);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(next);	  allFunctionScopes.addAll(n);    	non-compiled	[CE]  	68	None	replace
308	[BUG]  [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Assign.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Assign.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	67	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	67	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	21	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	50	None	replace
315	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign ")  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    parent.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	73	None	replace
320	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	2	None	replace
321	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	2	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	40	None	replace
323	[BUG]  [BUGGY]  AllFunctionScopes.add(n,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  AllFunctionScopes.add(n,  fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(n,  fnScope);	  AllFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	19	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	46	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	46	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    scope);    }    	non-compiled	[CE]  	48	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    scope);    }    	non-compiled	[CE]  	48	None	replace
328	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	42	None	replace
329	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	42	None	replace
330	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	53	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	37	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	65	None	replace
335	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.removeAll(n.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScopes.removeAll(n.getFirstChild()));  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.removeAll(n.getFirstChild()));	  allFunctionScopes.addAll(fnScopes.cloneTree());    	non-compiled	[CE]  	57	None	replace
336	[BUG]  [BUGGY]  allFunctionScopes.addAll(c);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(c);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(c);	  allFunctionScopes.addAll(scope);    	non-compiled	[CE]  	35	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkArgument(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	8	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	8	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	8	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  parent.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    n    =    c.getFirstChild();    n!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	70	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign   ")    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	10	None	replace
342	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.newArrayList());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScopes.newArrayList());  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.newArrayList());	  allFunctionScopes.addAll(fnScopes.values());    	non-compiled	[CE]  	58	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	52	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    parentScope);    }    	non-compiled	[CE]  	52	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  allFunctionScopes.add(fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  allFunctionScopes.add(fnScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  allFunctionScopes.add(fnScope);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	64	None	replace
346	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	49	None	replace
347	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Context.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	11	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  Preconditions.checkState(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n    	non-compiled	[CE]  	38	None	replace
349	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Node  c  =  n.getFirstChild();	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
350	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null  &&  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null  &&  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	For(Node  c  =  n.getFirstChild();  c!=  null  &&  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	22	None	replace
351	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	44	None	replace
352	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Context.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  Context.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n    	non-compiled	[CE]  	44	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	26	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  ==  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentS    	non-compiled	[CE]  	54	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    	non-compiled	[CE]  	74	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [BUGGY]        [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  c.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);	  Preconditions.checkState(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    	non-compiled	[CE]  	74	None	replace
