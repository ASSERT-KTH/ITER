bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  franchiseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  AllFunctionScopes.remove(n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  AllFunctionScopes.remove(n);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.remove(n);	  allFunctionScopes.remove(n);    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  allFunctionScopes.remove(n,  parentScope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.remove(n,  parentScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(n,  parentScope);	  allFunctionScopes.remove(n);    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  allFunctionScopes.remove(scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.remove(scope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(scope);	  allFunctionScopes.remove(parentScope);    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  AllFunctionScopes.add(n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  AllFunctionScopes.add(n);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(n);	  AllFunctionScopes.add(fnScope);    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  traverseNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  AllFunctionScopes.add(fnScope,  traverseNode);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.add(fnScope,  traverseNode);	  AllFunctionScopes.add(fnScope);    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  AllFunctionScopes.remove(fnScope);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  AllFunctionScopes.remove(fnScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.remove(fnScope);	  AllFunctionScopes.add(fnScope);    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
22	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FU	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parentScope.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
28	[BUG]  [BUGGY]  AllFunctionScopes.clear();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  AllFunctionScopes.clear();  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	AllFunctionScopes.clear();	  allFunctionScopes.clear();    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  allFunctionScopes.add(parentScope);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.add(parentScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(parentScope);	  allFunctionScopes.add(scope);    	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  allFunctionScopes.add(n,  parentScope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.add(n,  parentScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(n,  parentScope);	  allFunctionScopes.add(n);    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  allFunctionScopes.add(n,  fnScope);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.add(n,  fnScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(n,  fnScope);	  allFunctionScopes.add(n);    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  allFunctionScopes.addAll(parentScope);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(parentScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(parentScope);	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  allFunctionScopes.removeAll(fnScopes);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.removeAll(fnScopes);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.removeAll(fnScopes);	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  allFunctionScopes.addAll(referenced);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(referenced);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(referenced);	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  allFunctionScopes.addAll(scope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(scope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(scope);	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	14	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	14	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
41	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
42	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
44	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  scope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  scope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	11	None	replace
49	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
52	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	if(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseFunction(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseFunction(c,    n,    fnScope);    }    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Context.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentS	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  allFunctionScopes.remove(body);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.remove(body);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.remove(body);	  allFunctionScopes.remove(n);    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  allFunctionScopes.addAll(parentScopes);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(parentScopes);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(parentScopes);	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.cloneTree());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(fnScopes.cloneTree());  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.cloneTree());	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes.values());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(fnScopes.values());  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScopes.values());	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope,  traverseNode);	  allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.add(fnScope,  scope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(fnScope,  scope);	  allFunctionScopes.add(fnScope);    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign);  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.add(fnScope);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.add(fnScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  allFunctionScopes.add(fnScope);	      	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.add(fnScope);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.add(fnScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  allFunctionScopes.add(fnScope);	      	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  allFunctionScopes.add(fnScope);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  allFunctionScopes.add(fnScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  allFunctionScopes.add(fnScope);	      	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(fnScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(fnScope);	  allFunctionScopes.add(n);    	non-compiled	[CE]  	2	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign ")  {  for(final  Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  fnScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    fnScope);    }    	non-compiled	[CE]  	14	None	replace
68	[BUG]  [BUGGY]  allFunctionScopes.addAll(n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.addAll(n);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.addAll(n);	  allFunctionScopes.addAll(fnScopes);    	non-compiled	[CE]  	9	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	15	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(final  Node  n  =  c.getFirstChild();  n!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(final    Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	13	None	replace
71	[BUG]  [BUGGY]  allFunctionScopes.add(c);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  allFunctionScopes.add(c);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	allFunctionScopes.add(c);	  allFunctionScopes.add(scope);    	non-compiled	[CE]  	7	None	replace
72	[BUG]  [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(c);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  if(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(c);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	if(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  allFunctionScopes.add(c);  }	      	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  parent.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  }	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);    [BUGGY]  Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);  [BUGGY]      [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	Preconditions.checkState(isPropertyAssign)  {  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  traverseNode(c,  n,  parentScope);	  if(isPropertyAssign)    {    for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    traverseNode(c,    n,    parentScope);    }    	non-compiled	[CE]  	12	None	replace
