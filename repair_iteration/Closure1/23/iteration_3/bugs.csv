bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope));	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  body);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getFirstChild()  ==  body);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getFirstChild()!=  n);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getLastChild()  ==  n);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  body);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getFirstChild()  ==  body);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
9	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	17	None	replace
10	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	17	None	replace
11	[BUG]  [BUGGY]  Node  fnScope  =  compiler.createScope(body,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.createScope(body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.createScope(body,  parentScope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	17	None	replace
12	[BUG]  [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	17	None	replace
14	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
15	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
16	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
17	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
18	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	42	None	replace
19	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	42	None	replace
20	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	42	None	replace
21	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  isPropertyAssign);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
22	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign,  mayHaveSecondarySideEffects);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign,  mayHaveSecondarySideEffects);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign,  mayHaveSecondarySideEffects);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
23	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  mayHaveSecondarySideEffects);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  mayHaveSecondarySideEffects);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  mayHaveSecondarySideEffects);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
24	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  isPropertyAssign);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
25	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign,  scope);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.NAME);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()!=  Token.NAME);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  fnScope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME,  fnScope);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    nameNode);    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    nameNode);    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    nameNode);    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    nameNode);    	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  final  Scope  fnScope  =  compiler.createScope(n,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  compiler.createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  compiler.createScope(n,  scope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
37	[BUG]  [BUGGY]  final  Scope  fnScope  =  compiler.createScope(n,  parentScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  compiler.createScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  compiler.createScope(n,  parentScope,  scope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
38	[BUG]  [BUGGY]  final  Scope  fnScope  =  compiler.createScope(body,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  compiler.createScope(body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  compiler.createScope(body,  parentScope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  final  Scope  fnScope  =  compiler.createScope(n,  body);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  compiler.createScope(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  compiler.createScope(n,  body);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  Scope  fnScope  =  compiler.createScope(n,  parentScope,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  compiler.createScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  compiler.createScope(n,  parentScope,  scope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  Node  fnScope  =  compiler.createScope(n,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.createScope(n,  scope);	  Node    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	24	None	replace
42	[BUG]  [BUGGY]  Node  fnScope  =  compiler.createScope(n,  parentScope,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.createScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.createScope(n,  parentScope,  scope);	  Node    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	24	None	replace
43	[BUG]  [BUGGY]  Node  fnScope  =  compiler.createScope(n,  body);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.createScope(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.createScope(n,  body);	  Node    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	24	None	replace
44	[BUG]  [BUGGY]  Node  fnScope  =  compiler.getFunctionScope(n,  parentScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.getFunctionScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.getFunctionScope(n,  parentScope);	  Node    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	24	None	replace
45	[BUG]  [BUGGY]  Node  fnScope  =  compiler.getFunctionScope(n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.getFunctionScope(n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.getFunctionScope(n);	  Node    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	24	None	replace
46	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body,    scope);    	non-compiled	[CE]  	5	None	replace
47	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
48	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree(),  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree(),  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree(),  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
49	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
50	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
51	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.getParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.getParent());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.getParent());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
52	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
53	[BUG]  [BUGGY]  parentScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  parentScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	parentScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);	  if(compiler!=    null)    {    final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    }    	non-compiled	[CE]  	45	None	replace
54	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  node);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    node);    	non-compiled	[CE]  	29	None	replace
55	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    node);    	non-compiled	[CE]  	29	None	replace
56	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope,  parentScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope,  parentScope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    scope);    	non-compiled	[CE]  	26	None	replace
58	[BUG]  [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);	  final    Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	25	None	replace
59	[BUG]  [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);	  final    Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	25	None	replace
60	[BUG]  [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body);	  final    Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	25	None	replace
61	[BUG]  [BUGGY]  final  Node  fnScope  =  compiler.createScope(n,  parentScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Node  fnScope  =  compiler.createScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Node  fnScope  =  compiler.createScope(n,  parentScope);	  final    Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	25	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()!=  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()!=  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()!=  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()!=  n);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  3);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  3);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  3);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.VAR);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()!=  Token.VAR);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.GETPROP);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.GETPROP);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.NAME);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.NAME);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
71	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
72	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
73	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  nameNode);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
74	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  node);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
75	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    body);    	non-compiled	[CE]  	31	None	replace
76	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	2	None	replace
77	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	2	None	replace
78	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope,  parentScope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    scope);    	non-compiled	[CE]  	1	None	replace
79	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
80	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope));	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
81	[BUG]  [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
82	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	16	None	replace
83	[BUG]  [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope);	  nScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	28	None	replace
84	[BUG]  [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	nScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);	  nScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	28	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
89	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    scope);    	non-compiled	[CE]  	22	None	replace
90	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).setScope(n,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).setScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).setScope(n,  parentScope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    scope);    	non-compiled	[CE]  	22	None	replace
91	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  body);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  body);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    body);    	non-compiled	[CE]  	34	None	replace
92	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(body,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(body,  parentScope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).buildScope(n,    parentScope);    	non-compiled	[CE]  	36	None	replace
93	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).buildScope(n,    parentScope);    	non-compiled	[CE]  	36	None	replace
94	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).buildScope(n,    parentScope);    	non-compiled	[CE]  	36	None	replace
95	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  body);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  body);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).buildScope(n,    parentScope);    	non-compiled	[CE]  	36	None	replace
96	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope));	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    scope);    	non-compiled	[CE]  	6	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(body.getNext()!=  null  &&  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getNext()!=  null  &&  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getNext()!=  null  &&  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getNext()    ==    null    &&    body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	40	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  &&  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  &&  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null  &&  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getNext()    ==    null    &&    body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	40	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  &&  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  &&  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getParent()  ==  null  &&  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getNext()    ==    null    &&    body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	40	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getNext()  ==  null  &&  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getNext()  ==  null  &&  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getNext()  ==  null  &&  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getNext()    ==    null    &&    body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	40	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(body.getNext()  ==  null  ||  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getNext()  ==  null  ||  body.getType()  ==  Token.FUNCTION);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getNext()  ==  null  ||  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getNext()    ==    null    &&    body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	40	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  this,  scope);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  this,  n);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  this,  parentScope);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  this);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  parentScope,  this);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  null);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
109	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler),  compiler.createScope(n,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler),  compiler.createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler),  compiler.createScope(n,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(parent,    scope);    	non-compiled	[CE]  	43	None	replace
110	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(entry,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(entry,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(entry,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(parent,    scope);    	non-compiled	[CE]  	43	None	replace
111	[BUG]  [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	nScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(parent,    scope);    	non-compiled	[CE]  	43	None	replace
112	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(body,  parentScope);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
113	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(n,  scope);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
114	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(n,  fnScope);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
115	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  scope);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
116	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  fnScope);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
117	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).setScope(n,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).setScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).setScope(n,  parentScope);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
118	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body);    	non-compiled	[CE]  	23	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  parentScope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  scope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  scope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  body);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  body);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  this);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  this);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(n);	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
126	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  body);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(n,  body);	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
127	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  fnScope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  fnScope);	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
128	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  body);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(parent,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(parent,  body);	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
129	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  c);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  c);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  c);	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
130	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  parentScope);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  parentScope);	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.GETPROP);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.GETPROP);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()!=  Token.GETPROP);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  isPropertyAssign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  ||  body.getType()  ==  Token.GETPROP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  ||  body.getType()  ==  Token.GETPROP);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP  ||  body.getType()  ==  Token.GETPROP);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP,  n);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP,  n);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP,  isPropertyAssign);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP,  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope,  body);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope,  body);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    scope,    parentScope);    	non-compiled	[CE]  	44	None	replace
138	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  scope,  parentScope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    scope,    parentScope);    	non-compiled	[CE]  	44	None	replace
139	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(parent,  n);	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
140	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  n,  parentScope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  n,  parentScope);	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
141	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  n,  fnScope);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  n,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  n,  fnScope);	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
142	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    child);    	non-compiled	[CE]  	32	None	replace
143	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  child);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  child);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    child);    	non-compiled	[CE]  	32	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  n);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  scope);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  parentScope);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  body);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  node,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  node,  body);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
149	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    scope);    	non-compiled	[CE]  	7	None	replace
150	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    scope);    	non-compiled	[CE]  	7	None	replace
151	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  node);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  node);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    node);    	non-compiled	[CE]  	18	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  codingConvention);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  codingConvention);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  this,  codingConvention);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  this,  null);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
154	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	35	None	replace
155	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	35	None	replace
156	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	35	None	replace
157	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  parentScope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	21	None	replace
158	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	21	None	replace
159	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	16	None	replace
160	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree());	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	16	None	replace
161	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  scope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	42	None	replace
162	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  scope);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(parent,    scope);    	non-compiled	[CE]  	43	None	replace
163	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  n.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  n.getFirstChild());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  n.getFirstChild());	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
164	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  n.getLastChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  n.getLastChild());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  n.getLastChild());	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
165	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  n.cloneTree());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.removeChild(body,  n.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.removeChild(body,  n.cloneTree());	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
166	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  null);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    scope);    	non-compiled	[CE]  	26	None	replace
167	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body);    	non-compiled	[CE]  	23	None	replace
168	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  nameNode);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body);    	non-compiled	[CE]  	23	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
170	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	2	None	replace
171	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
172	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
173	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
174	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  body);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(n,  body);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
175	[BUG]  [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  body);	  new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    	non-compiled	[CE]  	30	None	replace
176	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).buildScope(n,  parentScope);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    scope);    	non-compiled	[CE]  	19	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETELEM);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETELEM);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETELEM);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP,  fnScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP,  fnScope);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(body));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(body));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(body));	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
180	[BUG]  [BUGGY]  Node  fnScope  =  compiler.getNodeFactory().createScope(n,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  compiler.getNodeFactory().createScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  compiler.getNodeFactory().createScope(n,  parentScope);	  Node    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	24	None	replace
181	[BUG]  [BUGGY]  final  Scope  fnScope  =  compiler.getFunctionScope(n,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  compiler.getFunctionScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  compiler.getFunctionScope(n,  parentScope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
182	[BUG]  [BUGGY]  final  Scope  fnScope  =  compiler.getScope(n,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  compiler.getScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  compiler.getScope(n,  parentScope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
183	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  nameNode);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    nameNode);    	non-compiled	[CE]  	8	None	replace
184	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  codingConvention);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  codingConvention);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  codingConvention);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    nameNode);    	non-compiled	[CE]  	8	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR,  n);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.hasChildren());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.hasChildren());	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  &&  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  &&  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  &&  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
188	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  n);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
189	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  nameNode);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
190	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
191	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  child);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.hasChildren());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.hasChildren());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  1);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  1);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
194	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body);    	non-compiled	[CE]  	3	None	replace
195	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  mappingConvention);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  mappingConvention);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  mappingConvention);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
196	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  null);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
197	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  true);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  true);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  this);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  this);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  fnScope);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  codingConvention);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  codingConvention);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  codingConvention);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
201	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  scope.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
202	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree(),  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree(),  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope.cloneTree(),  n);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
203	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  mappingConvention);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  mappingConvention);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  mappingConvention);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	4	None	replace
204	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  true);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  true);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	4	None	replace
205	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  null);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    scope);    	non-compiled	[CE]  	1	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  callSiteOptimizer);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  callSiteOptimizer);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  callSiteOptimizer);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	12	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
209	[BUG]  [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  fnScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  fnScope);	  nScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	28	None	replace
210	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body,    scope);    	non-compiled	[CE]  	5	None	replace
211	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  node,  scope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body,    scope);    	non-compiled	[CE]  	5	None	replace
212	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    body);    	non-compiled	[CE]  	34	None	replace
213	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope,  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  body,  parentScope,  isPropertyAssign);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
214	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope,  isPropertyAssign);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    isPropertyAssign);    	non-compiled	[CE]  	38	None	replace
215	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    scope);    	non-compiled	[CE]  	22	None	replace
216	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  allFunctionScopes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  allFunctionScopes);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  allFunctionScopes);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	4	None	replace
217	[BUG]  [BUGGY]  if(body!=  null)  {  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  if(body!=  null)  {  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  }  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	if(body!=  null)  {  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  }	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body);    	non-compiled	[CE]  	3	None	replace
218	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  parentScope,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  parentScope,  scope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(nameNode,  parentScope,  scope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    scope);    	non-compiled	[CE]  	7	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getFirstChild()  ==  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  2);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  2);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getString().equals( "function "));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getString().equals( "function "));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getString().equals( "function "));	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionObjectCall(n));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionObjectCall(n));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionObjectCall(n));	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	11	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getFirstChild()  ==  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.BLOCK);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getType()  ==  Token.BLOCK);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getChildCount()  ==  2);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getChildCount()  ==  2);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR  ||  body.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  ||  body.getFirstChild()  ==  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  body.getFirstChild()  ==  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  body.getFirstChild()  ==  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP  &&  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  allFunctionScopes);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  body,  isPropertyAssign);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  n,  body,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    n,    body);    	non-compiled	[CE]  	46	None	replace
231	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  body);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.redeclareVarsInsideBranch(n,  body);	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
232	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.redeclareVarsInsideBranch(n);	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
233	[BUG]  [BUGGY]  NodeUtil.redeclareVars(n,  body);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.redeclareVars(n,  body);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.redeclareVars(n,  body);	  NodeUtil.removeChild(body,    n);    	non-compiled	[CE]  	15	None	replace
234	[BUG]  [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	nScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n);	  nScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope);    	non-compiled	[CE]  	28	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getNext()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getNext()  ==  null);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getNext()  ==  null);	  Preconditions.checkState(body.getNext()    ==    null    &&    body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	40	None	replace
236	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	35	None	replace
237	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  allFunctionScopes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  allFunctionScopes);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  allFunctionScopes);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
238	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  traverseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  traverseNode);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  traverseNode);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope,    scope);    	non-compiled	[CE]  	27	None	replace
239	[BUG]  [BUGGY]  NodeUtil.clearChildren();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeUtil.clearChildren();  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeUtil.clearChildren();	  NodeUtil.removeChild(body);    	non-compiled	[CE]  	14	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  parent);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getFirstChild()  ==  parent);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	41	None	replace
241	[BUG]  [BUGGY]  fnScope  =  compiler.createScope(n,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  compiler.createScope(n,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  compiler.createScope(n,  parentScope);	  final    Scope    fnScope    =    compiler.createScope(n,    parentScope);    	non-compiled	[CE]  	20	None	replace
242	[BUG]  [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope));  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  scope));	  Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    scope);    	non-compiled	[CE]  	1	None	replace
243	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  child);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    body);    	non-compiled	[CE]  	23	None	replace
244	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  parentScope);	  if(compiler!=    null)    {    final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope);    }    	non-compiled	[CE]  	45	None	replace
245	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(parent,  n);	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    n);    	non-compiled	[CE]  	42	None	replace
246	[BUG]  [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Node  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);	  Node    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	48	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this,  allFunctionScopes);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  this,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  allFunctionScopes);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  NodeTraversal.traverse(compiler,  body,  allFunctionScopes);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	NodeTraversal.traverse(compiler,  body,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    body,    this);    	non-compiled	[CE]  	39	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	9	None	replace
250	[BUG]  [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	final  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  parentScope,  parentScope);	  final    Scope    fnScope    =    new    SyntacticScopeCreator(compiler).createScope(n,    parentScope,    body);    	non-compiled	[CE]  	37	None	replace
251	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  n,  parentScope.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
252	[BUG]  [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body,  parentScope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());      [BUGGY]  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body,  parentScope.cloneTree());  [BUGGY]      new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	fnScope  =  new  SyntacticScopeCreator(compiler).createScope(body,  body,  parentScope.cloneTree());	  fnScope    =    new    SyntacticScopeCreator(compiler).createScope(body,    parentScope.cloneTree());    	non-compiled	[CE]  	33	None	replace
