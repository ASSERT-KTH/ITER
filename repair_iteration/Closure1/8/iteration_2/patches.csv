bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  assignmentToUnknownValue  -=  true;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  -=  true;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  -=  true;	  assignedToUnknownValue    -=    false;    	non-compiled	[CE]  	38	None	replace
2	[BUG]  [BUGGY]  assignToUnknownValue  -=  true;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  true;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  true;	  assignedToUnknownValue    -=    false;    	non-compiled	[CE]  	38	None	replace
3	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getType()  ==  Token.EXPR_RESULT;	  assignedToUnknownValue    -=    false;    	non-compiled	[CE]  	38	None	replace
4	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getType()  ==  Token.VAR;	  assignedToUnknownValue    -=    false;    	non-compiled	[CE]  	38	None	replace
5	[BUG]  [BUGGY]  assignsByVar.put(var.getNameNode(),  assignedToUnknownValue);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getNameNode(),  assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getNameNode(),  assignedToUnknownValue);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
6	[BUG]  [BUGGY]  assignsByVar.put(var.getInitialValue(),  value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getInitialValue(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getInitialValue(),  value);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
7	[BUG]  [BUGGY]  assignsByVar.put(var.getNameNode(),  assignmentdToUnknownValue);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getNameNode(),  assignmentdToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getNameNode(),  assignmentdToUnknownValue);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
8	[BUG]  [BUGGY]  assignsByVar.put(var.getFirstChild(),  value);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getFirstChild(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getFirstChild(),  value);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
9	[BUG]  [BUGGY]  assignsByVar.put(var.getLocalName(),  value);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getLocalName(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getLocalName(),  value);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
10	[BUG]  [BUGGY]  assignsByVar.put(var.getParentNode(),  value);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getParentNode(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getParentNode(),  value);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  true));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  true));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  true));	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
12	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  assignedToUnknownValue));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  assignedToUnknownValue));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  assignedToUnknownValue));	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
13	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  nameNode));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  nameNode));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  nameNode));	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
14	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN),  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN),  true);	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
15	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  value));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  value));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  value));	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
16	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN),  assignedToUnknownValue);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN),  assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN),  assignedToUnknownValue);	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
17	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(value,    false);    	non-compiled	[CE]  	85	None	replace
18	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(value,    false);    	non-compiled	[CE]  	85	None	replace
19	[BUG]  [BUGGY]  assignedToUnknownValue  -=  5;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  5;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  5;	  assignedToUnknownValue    -=    4;    	non-compiled	[CE]  	77	None	replace
20	[BUG]  [BUGGY]  assignToUnknownValue  -=  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  1;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  1;	  assignedToUnknownValue    -=    4;    	non-compiled	[CE]  	77	None	replace
21	[BUG]  [BUGGY]  assignmentToUnknownValue  -=  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  -=  1;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  -=  1;	  assignedToUnknownValue    -=    4;    	non-compiled	[CE]  	77	None	replace
22	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	31	None	replace
23	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  true);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	31	None	replace
24	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isVarValue(value,    true);    	non-compiled	[CE]  	72	None	replace
25	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    false);    	non-compiled	[CE]  	53	None	replace
26	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    false);    	non-compiled	[CE]  	53	None	replace
27	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    false);    	non-compiled	[CE]  	53	None	replace
28	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    false);    	non-compiled	[CE]  	53	None	replace
29	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
30	[BUG]  [BUGGY]  assignToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
31	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isImmutableValue(value,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isImmutableValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isImmutableValue(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
32	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isForIn(value,  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isForIn(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isForIn(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
33	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isAssignmentOp(value,  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isAssignmentOp(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isAssignmentOp(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
34	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunctionAssign(value,  true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunctionAssign(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isFunctionAssign(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
35	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
36	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  value);  assignmentToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  value);  assignmentToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  value);  assignmentToUnknownValue  =  var.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
37	[BUG]  [BUGGY]  assignsByNode.put(value.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(value.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(value.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
38	[BUG]  [BUGGY]  assignsByNode.put(var.getLocalName(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getLocalName(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getLocalName(),  var);  assignedToUnknownValue  =  var.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
39	[BUG]  [BUGGY]  assignsByNode.put(var.getFirstChild(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getFirstChild(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getFirstChild(),  var);  assignedToUnknownValue  =  var.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
40	[BUG]  [BUGGY]  n.put(var.getNameNode(),  value);  assignedToUnknownValue  =  n.getInitialValue();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  n.put(var.getNameNode(),  value);  assignedToUnknownValue  =  n.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	n.put(var.getNameNode(),  value);  assignedToUnknownValue  =  n.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
41	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isForIn(value,    true);    	non-compiled	[CE]  	48	None	replace
42	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isForIn(value,    true);    	non-compiled	[CE]  	48	None	replace
43	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	65	None	replace
44	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	65	None	replace
45	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	65	None	replace
46	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	65	None	replace
47	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value.getInitialValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
48	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
49	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
50	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
51	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	30	None	replace
52	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	63	None	replace
53	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	63	None	replace
54	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	63	None	replace
55	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	51	None	replace
56	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	51	None	replace
57	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	51	None	replace
58	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	51	None	replace
59	[BUG]  [BUGGY]  assignedToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	51	None	replace
60	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	51	None	replace
61	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isVarValue(value);    	non-compiled	[CE]  	90	None	replace
62	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    true);    	non-compiled	[CE]  	54	None	replace
63	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    true);    	non-compiled	[CE]  	54	None	replace
64	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    true);    	non-compiled	[CE]  	54	None	replace
65	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    true);    	non-compiled	[CE]  	54	None	replace
66	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
67	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  assignmentToUnknownValue  -=  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  -=  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  -=  null;	  assignmentToUnknownValue    -=    false;    	non-compiled	[CE]  	42	None	replace
70	[BUG]  [BUGGY]  AssignmentToUnknownValue  -=  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  -=  true;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  -=  true;	  assignmentToUnknownValue    -=    false;    	non-compiled	[CE]  	42	None	replace
71	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  null  :  value.toString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  null  :  value.toString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null?  null  :  value.toString();	  assignmentToUnknownValue    =   "   ";    	non-compiled	[CE]  	45	None	replace
72	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  null  :  value.getType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  null  :  value.getType();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null?  null  :  value.getType();	  assignmentToUnknownValue    =   "   ";    	non-compiled	[CE]  	45	None	replace
73	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getNameNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getNameNode();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getNameNode();	  assignmentToUnknownValue    =   "   ";    	non-compiled	[CE]  	45	None	replace
74	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	50	None	replace
75	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  false;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  false;	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
76	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  null;	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
77	[BUG]  [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value,  true);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
78	[BUG]  [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value,  false);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
79	[BUG]  [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty()  ||!NodeUtil.isLiteralValue(value);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
80	[BUG]  [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =!assignedToUnknownValue.isEmpty();	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
81	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  fnScope.isAssignmentOp(assignedToUnknownValue);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  fnScope.isAssignmentOp(assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  fnScope.isAssignmentOp(assignedToUnknownValue);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
82	[BUG]  [BUGGY]  assignsByNode.put(value.getNameNode(),  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(value.getNameNode(),  var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(value.getNameNode(),  var);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
83	[BUG]  [BUGGY]  assignsByNode.put(var.getFirstChild(),  var);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getFirstChild(),  var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getFirstChild(),  var);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
84	[BUG]  [BUGGY]  assignsByNode.put(var.getInitialValue(),  var);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getInitialValue(),  var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getInitialValue(),  var);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
85	[BUG]  [BUGGY]  assignsByNode.put(var.getLocalName(),  var);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getLocalName(),  var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getLocalName(),  var);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
86	[BUG]  [BUGGY]  assignsByNode.put(var.getParentNode(),  var);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getParentNode(),  var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getParentNode(),  var);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
87	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  true);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
88	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
89	[BUG]  [BUGGY]  assignmentToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
90	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
91	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
92	[BUG]  [BUGGY]  assignmentToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
93	[BUG]  [BUGGY]  NodeUtil.removeChild(value,  var.getParentNode());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(value,  var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(value,  var.getParentNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
94	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(parent,  var.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(parent,  var.getFirstChild());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
95	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  var.getParentNode());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(assign,  var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(assign,  var.getParentNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
96	[BUG]  [BUGGY]  NodeUtil.removeChild(assignNode,  var.getParentNode());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(assignNode,  var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(assignNode,  var.getParentNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
97	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  var.getParentNode());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(nameNode,  var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(nameNode,  var.getParentNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
98	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  var.getParentNode());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(n,  var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(n,  var.getParentNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
99	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isForIn(value,    false);    	non-compiled	[CE]  	52	None	replace
100	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isForIn(value,    false);    	non-compiled	[CE]  	52	None	replace
101	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isForIn(value,    false);    	non-compiled	[CE]  	52	None	replace
102	[BUG]  [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
103	[BUG]  [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
104	[BUG]  [BUGGY]  assignToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  var.getInitialValue();	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
105	[BUG]  [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
106	[BUG]  [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
107	[BUG]  [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
108	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isForIn(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isForIn(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
109	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isAssignmentOp(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isAssignmentOp(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isAssignmentOp(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
110	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isImmutableValue(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isImmutableValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isImmutableValue(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
111	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunctionAssign(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunctionAssign(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isFunctionAssign(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
112	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunctionDeclaration(value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunctionDeclaration(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isFunctionDeclaration(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
113	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isVar(value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isVar(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isVar(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
114	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	21	None	replace
115	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  ||!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  ||!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	21	None	replace
116	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isForIn(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	21	None	replace
117	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isVarValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isVarValue(value,    false);    	non-compiled	[CE]  	87	None	replace
118	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isVarValue(value,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isVarValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isVarValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isVarValue(value,    false);    	non-compiled	[CE]  	87	None	replace
119	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isExpressionNode(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isExpressionNode(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isExpressionNode(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isExpressionNode(value);    	non-compiled	[CE]  	89	None	replace
120	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVar(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVar(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVar(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isExpressionNode(value);    	non-compiled	[CE]  	89	None	replace
121	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    value;    	non-compiled	[CE]  	92	None	replace
122	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    var.getInitialValue());    	non-compiled	[CE]  	28	None	replace
123	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    var.getInitialValue());    	non-compiled	[CE]  	28	None	replace
124	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    var.getInitialValue());    	non-compiled	[CE]  	28	None	replace
125	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =!hasFollowing    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	2	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  this);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  this);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignment);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignment);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignment);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assign);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assign);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  true);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignedToUnknownValue,  this);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assignedToUnknownValue,  this);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assignedToUnknownValue,  this);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  this);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByVar,  this);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  new  CallSiteOptimizer());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignedToUnknownValue,  new  CallSiteOptimizer());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assignedToUnknownValue,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assignedToUnknownValue,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  new  CallSiteOptimizer());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByVar,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignNode,  new  CallSiteOptimizer());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assignNode,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assignNode,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignsByVar,  new  CallSiteOptimizer());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assignsByVar,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assignsByVar,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
140	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(var.getInitialValue());    	non-compiled	[CE]  	27	None	replace
141	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVar(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVar(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVar(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(var.getInitialValue());    	non-compiled	[CE]  	27	None	replace
142	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.length;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.length;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.length;	  assignedToUnknownValue    -=    1;    	non-compiled	[CE]  	39	None	replace
143	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getImmediateParentNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getImmediateParentNode();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getImmediateParentNode();	  assignmentToUnknownValue    =    assign;    	non-compiled	[CE]  	29	None	replace
144	[BUG]  [BUGGY]  assignmentToUnknownValue  =  assign.cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  assign.cloneTree();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  assign.cloneTree();	  assignmentToUnknownValue    =    assign;    	non-compiled	[CE]  	29	None	replace
145	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var;	  assignmentToUnknownValue    =    assign;    	non-compiled	[CE]  	29	None	replace
146	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getFirstChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getFirstChild());	  assignsByVar    =    assignsByVar.get(var.getParentNode());    	non-compiled	[CE]  	19	None	replace
147	[BUG]  [BUGGY]  assignsByVar  =  assignedToUnknownValue.get(var.getParentNode());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignedToUnknownValue.get(var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignedToUnknownValue.get(var.getParentNode());	  assignsByVar    =    assignsByVar.get(var.getParentNode());    	non-compiled	[CE]  	19	None	replace
148	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getLastChild());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getLastChild());	  assignsByVar    =    assignsByVar.get(var.getParentNode());    	non-compiled	[CE]  	19	None	replace
149	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getInitialValue());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getInitialValue());	  assignsByVar    =    assignsByVar.get(var.getParentNode());    	non-compiled	[CE]  	19	None	replace
150	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode(),  true);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode(),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode(),  true);	  assignsByVar    =    assignsByVar.get(var.getParentNode());    	non-compiled	[CE]  	19	None	replace
151	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	4	None	replace
152	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
153	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(var.getInitialValue());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
154	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(var.getInitialValue());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
155	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	70	None	replace
156	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    value    >=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	11	None	replace
157	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
158	[BUG]  [BUGGY]  assignedToUnknownValue  =  hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
159	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
160	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
161	[BUG]  [BUGGY]  assignToUnknownValue  -=  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  null;	  assignToUnknownValue    -=    false;    	non-compiled	[CE]  	41	None	replace
162	[BUG]  [BUGGY]  assignToUnknownValue  -=  value.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  value.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  value.getType()  ==  Token.EXPR_RESULT;	  assignToUnknownValue    -=    false;    	non-compiled	[CE]  	41	None	replace
163	[BUG]  [BUGGY]  assignToUnknownValue  -=  value.getType()  ==  Token.VAR;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  value.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  value.getType()  ==  Token.VAR;	  assignToUnknownValue    -=    false;    	non-compiled	[CE]  	41	None	replace
164	[BUG]  [BUGGY]  assignToUnknownValue  -=  value.getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  value.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  value.getType()  ==  Token.FUNCTION;	  assignToUnknownValue    -=    false;    	non-compiled	[CE]  	41	None	replace
165	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isForIn(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isForIn(value);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isForIn(value);    	non-compiled	[CE]  	64	None	replace
166	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getInitialValue());    	non-compiled	[CE]  	26	None	replace
167	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getInitialValue());    	non-compiled	[CE]  	26	None	replace
168	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	47	None	replace
169	[BUG]  [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignToUnknownValue    =    null;    	non-compiled	[CE]  	36	None	replace
170	[BUG]  [BUGGY]  assignToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  true);	  assignToUnknownValue    =    null;    	non-compiled	[CE]  	36	None	replace
171	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	7	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByVar,  false);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByVar,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentsByVar,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByVar,  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByVar,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  node,  assignsByVar,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  a,  assignsByVar,  true);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  a,  assignsByVar,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  a,  assignsByVar,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentToUnknownValue,  true);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentToUnknownValue,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentToUnknownValue,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue,  true);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
177	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isForIn(var.getInitialValue());    	non-compiled	[CE]  	67	None	replace
178	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||  NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||  NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||  NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isForIn(var.getInitialValue());    	non-compiled	[CE]  	67	None	replace
179	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isForIn(var.getInitialValue());    	non-compiled	[CE]  	67	None	replace
180	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode().getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getNameNode().getString());	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
181	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getFirstChild().getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getFirstChild().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getFirstChild().getString());	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
182	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  true);	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
183	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  assignedToUnknownValue);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  assignedToUnknownValue);	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
184	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getLastChild().getString());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getLastChild().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getLastChild().getString());	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
185	[BUG]  [BUGGY]  assignsByVar  =  assignedToUnknownValue.get(var.getParentNode().getString());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignedToUnknownValue.get(var.getParentNode().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignedToUnknownValue.get(var.getParentNode().getString());	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
186	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    true);    	non-compiled	[CE]  	1	None	replace
187	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    true);    	non-compiled	[CE]  	1	None	replace
188	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    true);    	non-compiled	[CE]  	1	None	replace
189	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(value);    	non-compiled	[CE]  	22	None	replace
190	[BUG]  [BUGGY]  assignedToUnknownValue  -=  0,  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  0,  false;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  0,  false;	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
191	[BUG]  [BUGGY]  assignedToUnknownValue  -=  1,  true;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  1,  true;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  1,  true;	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
192	[BUG]  [BUGGY]  assignedToUnknownValue  -=  0,  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  0,  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  0,  null;	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
193	[BUG]  [BUGGY]  assignedToUnknownValue  -=  0,  true,  value.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  0,  true,  value.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  0,  true,  value.getType()  ==  Token.NAME);	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
194	[BUG]  [BUGGY]  assignedToUnknownValue  -=  0,  true,  value.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  0,  true,  value.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  0,  true,  value.getType()  ==  Token.VAR);	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
195	[BUG]  [BUGGY]  assignedToUnknownValue  -=  0,  true,  value.getType()!=  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  0,  true,  value.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  0,  true,  value.getType()!=  Token.NAME);	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
196	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isForIn(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isForIn(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
197	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
198	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isAssignmentOp(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isAssignmentOp(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isAssignmentOp(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
199	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isImmutableValue(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isImmutableValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isImmutableValue(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
200	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
201	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isFunctionDeclaration(value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isFunctionDeclaration(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isFunctionDeclaration(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
202	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isFunctionAssign(value);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isFunctionAssign(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isFunctionAssign(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
203	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value.getName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value.getName();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value.getName();	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
204	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null?  var.getName()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null?  var.getName()  :  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null?  var.getName()  :  null;	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
205	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  var.getName()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  var.getName()  :  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null?  var.getName()  :  null;	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
206	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getAssignedValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getAssignedValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getAssignedValue();	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
207	[BUG]  [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
208	[BUG]  [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
209	[BUG]  [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext());	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
210	[BUG]  [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext()  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext()	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
211	[BUG]  [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  fnScope.getParentNode().getFirstChild().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext());	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
212	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.toString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.toString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.toString());    	non-compiled	[CE]  	75	None	replace
213	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value.toString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value.toString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value.toString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.toString());    	non-compiled	[CE]  	75	None	replace
214	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value.toString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value.toString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value.toString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.toString());    	non-compiled	[CE]  	75	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByVar,  true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByVar,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentsByVar,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar);    	non-compiled	[CE]  	17	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByVar);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByVar);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  node,  assignsByVar);	  NodeTraversal.traverse(compiler,    var,    assignsByVar);    	non-compiled	[CE]  	17	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue);	  NodeTraversal.traverse(compiler,    var,    assignsByVar);    	non-compiled	[CE]  	17	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByVar,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByVar,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  node,  assignsByVar,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentToUnknownValue,  false);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentToUnknownValue,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentToUnknownValue,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignsByVar,  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  assignsByVar,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  assignsByVar,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
222	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value;	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
223	[BUG]  [BUGGY]  assignToUnknownValue  -=  value;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  value;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  value;	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
224	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getLastChild();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getLastChild();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
225	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getInitialValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getInitialValue();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
226	[BUG]  [BUGGY]  assignmentToUnknownValue  -=  value;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  -=  value;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  -=  value;	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
227	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getFirstChild();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getFirstChild();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
228	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getType();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getType();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getType();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
229	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	35	None	replace
230	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	35	None	replace
231	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	12	None	replace
232	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value.getString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.getString());    	non-compiled	[CE]  	74	None	replace
233	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value.getString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.getString());    	non-compiled	[CE]  	74	None	replace
234	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value.getString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.getString());    	non-compiled	[CE]  	74	None	replace
235	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  assignedToUnknownValue);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  assignedToUnknownValue);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
236	[BUG]  [BUGGY]  assignsByNode.put(var.getInitialValue(),  value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getInitialValue(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getInitialValue(),  value);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
237	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  assignmentdToUnknownValue);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  assignmentdToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  assignmentdToUnknownValue);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
238	[BUG]  [BUGGY]  assignsByNode.put(var.getFirstChild(),  value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getFirstChild(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getFirstChild(),  value);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
239	[BUG]  [BUGGY]  assignsByNode.put(value.getNameNode(),  value);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(value.getNameNode(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(value.getNameNode(),  value);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
240	[BUG]  [BUGGY]  assignsByNode.put(var.getLocalName(),  value);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getLocalName(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getLocalName(),  value);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
241	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value.getInitialValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isImmutableValue(var.getInitialValue());    	non-compiled	[CE]  	76	None	replace
242	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	33	None	replace
243	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  ||!NodeUtil.isLiteralValue(value);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	33	None	replace
244	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	33	None	replace
245	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  true  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  ||!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	49	None	replace
246	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isAssignmentOp(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isAssignmentOp(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isAssignmentOp(value);	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	32	None	replace
247	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value.getInitialValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value.getInitialValue();	  assignmentToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	60	None	replace
248	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignmentToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	60	None	replace
249	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null?  var.getInitialValue()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null?  var.getInitialValue()  :  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null?  var.getInitialValue()  :  null;	  assignmentToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	60	None	replace
250	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value.getValue()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value.getValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(value.getValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
251	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(0));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(0));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(0));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
252	[BUG]  [BUGGY]  assignsByNode.put(var.getInitialValue(),  new  Integer(var.getValue()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getInitialValue(),  new  Integer(var.getValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getInitialValue(),  new  Integer(var.getValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
253	[BUG]  [BUGGY]  assignsByNode.put(value.getNameNode(),  new  Integer(var.getValue()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(value.getNameNode(),  new  Integer(var.getValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(value.getNameNode(),  new  Integer(var.getValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
254	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(assignedToUnknownValue));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(assignedToUnknownValue));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(assignedToUnknownValue));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
255	[BUG]  [BUGGY]  assignsByNode.put(var.getLocalName(),  new  Integer(var.getValue()));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getLocalName(),  new  Integer(var.getValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getLocalName(),  new  Integer(var.getValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
256	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(assignedToUnknownValue.getValue()));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(assignedToUnknownValue.getValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(assignedToUnknownValue.getValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
257	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	3	None	replace
258	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	3	None	replace
259	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  ||!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	10	None	replace
260	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isImmutableValue(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isImmutableValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isImmutableValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isImmutableValue(value);    	non-compiled	[CE]  	88	None	replace
261	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isImmutableValue(value);    	non-compiled	[CE]  	88	None	replace
262	[BUG]  [BUGGY]  assignmentToUnknownValue  =  0;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  0;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  0;	  assignmentToUnknownValue    =    true;    	non-compiled	[CE]  	23	None	replace
263	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null?   "null "  :  value.toString();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null?   "null "  :  value.toString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null?   "null "  :  value.toString();	  assignedToUnknownValue    =    value    ==    null?       "null   "    :    value.toString();    	non-compiled	[CE]  	91	None	replace
264	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    false);    	non-compiled	[CE]  	86	None	replace
265	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    false);    	non-compiled	[CE]  	86	None	replace
266	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    false);    	non-compiled	[CE]  	86	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByNode,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByNode,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByNode,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentsByNode,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  a,  assignsByNode,  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  a,  assignsByNode,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  a,  assignsByNode,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByNode,  true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  node,  assignsByNode,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  node,  assignsByNode,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
271	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());    	non-compiled	[CE]  	68	None	replace
272	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());    	non-compiled	[CE]  	68	None	replace
273	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());    	non-compiled	[CE]  	68	None	replace
274	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getLocalValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getLocalValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getLocalValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());    	non-compiled	[CE]  	68	None	replace
275	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isFunction(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(value,    true);    	non-compiled	[CE]  	71	None	replace
276	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(value,    true);    	non-compiled	[CE]  	71	None	replace
277	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	69	None	replace
278	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	69	None	replace
279	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	69	None	replace
280	[BUG]  [BUGGY]  assignedToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	69	None	replace
281	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode(),  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode(),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getNameNode(),  true);	  assignsByVar    =    assignsByVar.get(var.getNameNode());    	non-compiled	[CE]  	15	None	replace
282	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getImmediateParentNode());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getImmediateParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getImmediateParentNode());	  assignsByVar    =    assignsByVar.get(var.getNameNode());    	non-compiled	[CE]  	15	None	replace
283	[BUG]  [BUGGY]  assignsByVar  =  assignedToUnknownValue.get(var.getNameNode());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignedToUnknownValue.get(var.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignedToUnknownValue.get(var.getNameNode());	  assignsByVar    =    assignsByVar.get(var.getNameNode());    	non-compiled	[CE]  	15	None	replace
284	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(value));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
285	[BUG]  [BUGGY]  assignsByNode.put(var.getType(),  new  Integer(var.getValue()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getType(),  new  Integer(var.getValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getType(),  new  Integer(var.getValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
286	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value,  true);	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	30	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue);	  NodeTraversal.traverse(compiler,    var,    assignsByVar);    	non-compiled	[CE]  	17	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentAssign,  new  CallSiteOptimizer());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentAssign,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentAssign,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  new  CallSiteOptimizer());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByNode,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue,  new  CallSiteOptimizer());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue,  new  CallSiteOptimizer());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
291	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	70	None	replace
292	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(nameNode);	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	70	None	replace
293	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getInitialValue());    	non-compiled	[CE]  	26	None	replace
294	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    true);    	non-compiled	[CE]  	54	None	replace
295	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(var,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(var,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(var,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isForIn(value,    false);    	non-compiled	[CE]  	52	None	replace
296	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isImmutableValue(value.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isImmutableValue(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isImmutableValue(value.getString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.getString());    	non-compiled	[CE]  	74	None	replace
297	[BUG]  [BUGGY]  assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
298	[BUG]  [BUGGY]  assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
299	[BUG]  [BUGGY]  assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value);	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
300	[BUG]  [BUGGY]  assignToUnknownValue  =  fnScope.getVar(var.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  fnScope.getVar(var.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  fnScope.getVar(var.getNameNode());	  assignToUnknownValue    =    true;    	non-compiled	[CE]  	24	None	replace
301	[BUG]  [BUGGY]  assignedToUnknownValue  -=  Boolean.TRUE;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  Boolean.TRUE;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  Boolean.TRUE;	  assignedToUnknownValue    -=    false;    	non-compiled	[CE]  	38	None	replace
302	[BUG]  [BUGGY]  assignedToUnknownValue  -=  BooleanUtil.isLiteralValue(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  BooleanUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  BooleanUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    -=    false;    	non-compiled	[CE]  	38	None	replace
303	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  &&!NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =    true    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	69	None	replace
304	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.remove(var.getParentNode());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.remove(var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.remove(var.getParentNode());	  assignsByVar    =    assignsByVar.get(var.getParentNode());    	non-compiled	[CE]  	19	None	replace
305	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getLocalValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getLocalValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getLocalValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
306	[BUG]  [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignmentToUnknownValue    =    true;    	non-compiled	[CE]  	23	None	replace
307	[BUG]  [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    true;    	non-compiled	[CE]  	23	None	replace
308	[BUG]  [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignmentToUnknownValue    =    true;    	non-compiled	[CE]  	23	None	replace
309	[BUG]  [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(value);	  assignmentToUnknownValue    =    true;    	non-compiled	[CE]  	23	None	replace
310	[BUG]  [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getFirstChild().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  null  &&!NodeUtil.isLiteralValue(var.getFirstChild().getString());	  assignmentToUnknownValue    =    true;    	non-compiled	[CE]  	23	None	replace
311	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  false);	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
312	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getName()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getName()  +  1;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getName()  +  1;	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
313	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getFirstChild();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getFirstChild();	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
314	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getReferenced();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getReferenced();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getReferenced();	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
315	[BUG]  [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  hasPropertyAssign);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  hasPropertyAssign);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  false  ||!NodeUtil.isLiteralValue(value,  hasPropertyAssign);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	49	None	replace
316	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	63	None	replace
317	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(nameNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(nameNode);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value);    	non-compiled	[CE]  	63	None	replace
318	[BUG]  [BUGGY]  assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    true);    	non-compiled	[CE]  	1	None	replace
319	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	65	None	replace
320	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  nameNode);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
321	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  assignment);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  assignment);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  assignment);	  assignsByNode.put(var.getNameNode(),    value);    	non-compiled	[CE]  	13	None	replace
322	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	33	None	replace
323	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(value);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	33	None	replace
324	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isFunction(value);    	non-compiled	[CE]  	22	None	replace
325	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    var.getInitialValue());    	non-compiled	[CE]  	28	None	replace
326	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    false);    	non-compiled	[CE]  	53	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsToUnknownValue,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  assignsByVar,  false);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  arg,  assignsByVar,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  arg,  assignsByVar,  false);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    false);    	non-compiled	[CE]  	59	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  assignsByNode,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  root,  assignsByNode,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  root,  assignsByNode,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  assignsByNode,  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  arg,  assignsByNode,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  arg,  assignsByNode,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue,  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByUnknownValue,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
333	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isVarValue(value,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isVarValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isVarValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isVarValue(value,    true);    	non-compiled	[CE]  	72	None	replace
334	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(value);	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	10	None	replace
335	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
336	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isFunction(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isFunction(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isFunction(value);	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
337	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	73	None	replace
338	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var.getNameNode());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(parent,  var.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(parent,  var.getNameNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
339	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(parent,  var.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(parent,  var.getLastChild());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
340	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var.getStringNode());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(parent,  var.getStringNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(parent,  var.getStringNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
341	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.remove(var.getNameNode());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.remove(var.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.remove(var.getNameNode());	  assignsByVar    =    assignsByVar.get(var.getNameNode());    	non-compiled	[CE]  	15	None	replace
342	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  fnScope.getVar(var.getNameNode());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  fnScope.getVar(var.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  fnScope.getVar(var.getNameNode());	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
343	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
344	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  false);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
345	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
346	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  fnScope.getVar(a.getNameNode());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  fnScope.getVar(a.getNameNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  fnScope.getVar(a.getNameNode());	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
347	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isForIn(value,  true);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	6	None	replace
348	[BUG]  [BUGGY]  assignedToUnknownValue  =  var.getInitialValue()!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  var.getInitialValue()!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  var.getInitialValue()!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	55	None	replace
349	[BUG]  [BUGGY]  assignedToUnknownValue  =  node.hasPropertyAssign()  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  node.hasPropertyAssign()  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  node.hasPropertyAssign()  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	4	None	replace
350	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
351	[BUG]  [BUGGY]  assignmentToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
352	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(nameNode);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
353	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  null);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  null);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
354	[BUG]  [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignToUnknownValue    =    null;    	non-compiled	[CE]  	36	None	replace
355	[BUG]  [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignToUnknownValue    =    null;    	non-compiled	[CE]  	36	None	replace
356	[BUG]  [BUGGY]  assignedToUnknownValue  =  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
357	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
358	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isForIn(var.getInitialValue());	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
359	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunction(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunction(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isFunction(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
360	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	8	None	replace
361	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunction(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isFunction(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isFunction(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
362	[BUG]  [BUGGY]  assignedToUnknownValue  -=  var.getInitialValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  var.getInitialValue();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
363	[BUG]  [BUGGY]  assignedToUnknownValue  -=  var.getNameNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  var.getNameNode();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  var.getNameNode();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
364	[BUG]  [BUGGY]  assignedToUnknownValue  -=  var.getType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  var.getType();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  var.getType();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
365	[BUG]  [BUGGY]  assignedToUnknownValue  -=  var.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  var.getFirstChild();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  var.getFirstChild();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
366	[BUG]  [BUGGY]  assignedToUnknownValue  -=  var.getName();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  var.getName();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  var.getName();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
367	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  true  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  ||!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	46	None	replace
368	[BUG]  [BUGGY]  assignedToUnknownValue  -=  7;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  7;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  7;	  assignedToUnknownValue    -=    4;    	non-compiled	[CE]  	77	None	replace
369	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value.toString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value.toString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.toString());    	non-compiled	[CE]  	75	None	replace
370	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	21	None	replace
371	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getInitialValue()!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getInitialValue()!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getInitialValue()!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
372	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isForIn(var.getInitialValue());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
373	[BUG]  [BUGGY]  assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    false);    	non-compiled	[CE]  	86	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByNode);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentAssign);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentAssign);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  assignsByVar,  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  arg,  assignsByVar,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  arg,  assignsByVar,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  assignsByVar,  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  root,  assignsByVar,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  root,  assignsByVar,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
378	[BUG]  [BUGGY]  assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!canModifyAllSites  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasFollowing    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	2	None	replace
379	[BUG]  [BUGGY]  if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  }	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
380	[BUG]  [BUGGY]  assignsByUnknownValue.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByUnknownValue.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByUnknownValue.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
381	[BUG]  [BUGGY]  if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  }  else  {  Preconditions.checkNotNull(value);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  }  else  {  Preconditions.checkNotNull(value);  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  }  else  {  Preconditions.checkNotNull(value);  }	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
382	[BUG]  [BUGGY]  assignedToUnknownValue  -=  1L;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  1L;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  1L;	  assignedToUnknownValue    -=    1;    	non-compiled	[CE]  	39	None	replace
383	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getAssignmentToUnknownValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getAssignmentToUnknownValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getAssignmentToUnknownValue();	  assignmentToUnknownValue    =    assign;    	non-compiled	[CE]  	29	None	replace
384	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getAssignedToUnknownValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getAssignedToUnknownValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getAssignedToUnknownValue();	  assignmentToUnknownValue    =    assign;    	non-compiled	[CE]  	29	None	replace
385	[BUG]  [BUGGY]  assignmentToUnknownValue  =  nameNode.getFirstChild().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  nameNode.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  nameNode.getFirstChild().getNext();	  assignmentToUnknownValue    =    assignedToUnknownValue;    	non-compiled	[CE]  	83	None	replace
386	[BUG]  [BUGGY]  assignmentToUnknownValue  =  nameNode.getFirstChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  nameNode.getFirstChild().getString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  nameNode.getFirstChild().getString();	  assignmentToUnknownValue    =    assignedToUnknownValue;    	non-compiled	[CE]  	83	None	replace
387	[BUG]  [BUGGY]  assignsByVar.put(var.getNameNode(),  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getNameNode(),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getNameNode(),  true);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
388	[BUG]  [BUGGY]  assignsByVar.put(var.getNameNode(),  nameNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getNameNode(),  nameNode);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getNameNode(),  nameNode);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
389	[BUG]  [BUGGY]  assignsByVar.put(var.getNameNode(),  assignment);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getNameNode(),  assignment);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getNameNode(),  assignment);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
390	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.length,  true;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.length,  true;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.length,  true;	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
391	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.length();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.length();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.length();	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
392	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    var.getInitialValue());    	non-compiled	[CE]  	28	None	replace
393	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  var.getInitialValue());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    var.getInitialValue());    	non-compiled	[CE]  	28	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue,  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue,  true);	  NodeTraversal.traverse(compiler,    var,    assignsByVar,    true);    	non-compiled	[CE]  	18	None	replace
395	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode(),  value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getNameNode(),  value);	  assignsByVar    =    assignsByVar.get(var.getNameNode());    	non-compiled	[CE]  	15	None	replace
396	[BUG]  [BUGGY]  assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    false);    	non-compiled	[CE]  	53	None	replace
397	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  assignment));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  assignment));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN,  assignment));	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
398	[BUG]  [BUGGY]  assignsByNode.put(value.getNameNode(),  new  Node(Token.ASSIGN));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(value.getNameNode(),  new  Node(Token.ASSIGN));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(value.getNameNode(),  new  Node(Token.ASSIGN));	  assignsByNode.put(var.getNameNode(),    new    Node(Token.ASSIGN));    	non-compiled	[CE]  	96	None	replace
399	[BUG]  [BUGGY]  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  var.getInitialValue();	  assignedToUnknownValue    =    value;    	non-compiled	[CE]  	92	None	replace
400	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  >>  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  >>  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  >>  null  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =    value;    	non-compiled	[CE]  	92	None	replace
401	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	21	None	replace
402	[BUG]  [BUGGY]  assignedToUnknownValue  =  node.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  node.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  node.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    ||!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	21	None	replace
403	[BUG]  [BUGGY]  NodeUtil.removeChild(a,  var.getParentNode());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeUtil.removeChild(a,  var.getParentNode());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(a,  var.getParentNode());	  NodeUtil.removeChild(parent,    var.getParentNode());    	non-compiled	[CE]  	58	None	replace
404	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Assign(value));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Assign(value));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Assign(value));	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
405	[BUG]  [BUGGY]  assignsByNode.put(var.getString(),  value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getString(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getString(),  value);	  assignsByNode.put(var.getNameNode(),    var);    	non-compiled	[CE]  	94	None	replace
406	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  value.getLastChild().getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  value.getLastChild().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  value.getLastChild().getString());	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
407	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  var.getLastChild().getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  var.getLastChild().getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  var.getLastChild().getString());	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
408	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  value.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  value.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  value.getLastChild());	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
409	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(fnScope.getVar(var.getNameNode()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(fnScope.getVar(var.getNameNode()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(fnScope.getVar(var.getNameNode()));	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
410	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  var.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  var.getLastChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  new  AssignmentToUnknownValue(value.getFirstChild().getString(),  var.getLastChild());	  AssignmentToUnknownValue    =    true;    	non-compiled	[CE]  	44	None	replace
411	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null?   "null "  :  value.toString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null?   "null "  :  value.toString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null?   "null "  :  value.toString();	  assignmentToUnknownValue    =   "   ";    	non-compiled	[CE]  	45	None	replace
412	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  var.getInitialValue()  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value  ==  null?  var.getInitialValue()  :  null;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null?  var.getInitialValue()  :  null;	  assignmentToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	60	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentsByUnknownValue);	  NodeTraversal.traverse(compiler,    var,    assignsByVar);    	non-compiled	[CE]  	17	None	replace
414	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getFirstChild());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	55	None	replace
415	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value,  true);	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	30	None	replace
416	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value,  true);	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	30	None	replace
417	[BUG]  [BUGGY]  assignedToUnknownValue  -=  10;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  10;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  10;	  assignedToUnknownValue    -=    4;    	non-compiled	[CE]  	77	None	replace
418	[BUG]  [BUGGY]  if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  }  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	if(value!=  null)  {  assignsByNode.put(var.getNameNode(),  value);  assignedToUnknownValue  =  var.getInitialValue();  }	  assignsByNode.put(var.getNameNode(),    var);    assignedToUnknownValue    =    var.getInitialValue();    	non-compiled	[CE]  	95	None	replace
419	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getFirstChild());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
420	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue(),  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue(),  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue(),  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());    	non-compiled	[CE]  	66	None	replace
421	[BUG]  [BUGGY]  assignsByVar.put(var.getString(),  value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar.put(var.getString(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getString(),  value);	  assignsByVar.put(var.getNameNode(),    value);    	non-compiled	[CE]  	14	None	replace
422	[BUG]  [BUGGY]  assignmentToUnknownValue  -=  Boolean.TRUE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  -=  Boolean.TRUE;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  -=  Boolean.TRUE;	  assignmentToUnknownValue    -=    false;    	non-compiled	[CE]  	42	None	replace
423	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isImmutableValue(value.toString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isImmutableValue(value.toString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isImmutableValue(value.toString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.toString());    	non-compiled	[CE]  	75	None	replace
424	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunctionDeclaration(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunctionDeclaration(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunctionDeclaration(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isExpressionNode(value);    	non-compiled	[CE]  	89	None	replace
425	[BUG]  [BUGGY]  assignedToUnknownValue  -=  ValueUtils.safeNegate(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  ValueUtils.safeNegate(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  ValueUtils.safeNegate(value);	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
426	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.toString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.toString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.toString();	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
427	[BUG]  [BUGGY]  assignedToUnknownValue  -=  ValueUtils.safeAdd(var,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  ValueUtils.safeAdd(var,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  ValueUtils.safeAdd(var,  true);	  assignedToUnknownValue    -=    null;    	non-compiled	[CE]  	40	None	replace
428	[BUG]  [BUGGY]  assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value,    true);    	non-compiled	[CE]  	1	None	replace
429	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value.getString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.getString());    	non-compiled	[CE]  	74	None	replace
430	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value.getString());	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value.getString());    	non-compiled	[CE]  	74	None	replace
431	[BUG]  [BUGGY]  assignToUnknownValue  -=  Boolean.TRUE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  Boolean.TRUE;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  Boolean.TRUE;	  assignToUnknownValue    -=    false;    	non-compiled	[CE]  	41	None	replace
432	[BUG]  [BUGGY]  assignToUnknownValue  -=  BooleanUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  -=  BooleanUtil.isLiteralValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  BooleanUtil.isLiteralValue(value,  true);	  assignToUnknownValue    -=    false;    	non-compiled	[CE]  	41	None	replace
433	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value);	  assignmentToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	33	None	replace
434	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getFirstChild().getNext().getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getFirstChild().getNext().getString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getFirstChild().getNext().getString();	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
435	[BUG]  [BUGGY]  assignedToUnknownValue  -=  value.getFirstChild().getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  -=  value.getFirstChild().getString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  value.getFirstChild().getString();	  assignedToUnknownValue    -=    0,    true;    	non-compiled	[CE]  	79	None	replace
436	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isVarValue(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isVarValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isVarValue(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
437	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isInitialValue(value,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isInitialValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isInitialValue(value,  true);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	82	None	replace
438	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(value,  true);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	6	None	replace
439	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value,  true);	  assignedToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	6	None	replace
440	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getType()  ==  Token.EXPR_RESULT;	  assignmentToUnknownValue    =    var.getName();    	non-compiled	[CE]  	80	None	replace
441	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getAssignedTo();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getAssignedTo();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getAssignedTo();	  assignmentToUnknownValue    =    assign;    	non-compiled	[CE]  	29	None	replace
442	[BUG]  [BUGGY]  assignToUnknownValue  =  value;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value;	  assignToUnknownValue    =    null;    	non-compiled	[CE]  	36	None	replace
443	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getFirstChild());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());    	non-compiled	[CE]  	68	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(),  assignsByVar);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(),  assignsByVar);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(),  assignsByVar);	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer());    	non-compiled	[CE]  	56	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  null);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByNode,  null);	  NodeTraversal.traverse(compiler,    var,    assignsByNode,    true);    	non-compiled	[CE]  	57	None	replace
446	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(var.getInitialValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isFunction(var.getInitialValue());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
447	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getFirstChild());	  assignmentToUnknownValue    =    value!=    null    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	61	None	replace
448	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value.toString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value.toString()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(value.toString()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
449	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value.intValue()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(value.intValue()));  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(value.intValue()));	  assignsByNode.put(var.getNameNode(),    new    Integer(var.getValue()));    	non-compiled	[CE]  	97	None	replace
450	[BUG]  [BUGGY]  assignToUnknownValue  =  var.getName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  var.getName();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  var.getName();	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
451	[BUG]  [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getString());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getString());	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
452	[BUG]  [BUGGY]  assignToUnknownValue  =  value  ==  null?   "null "  :  value.toString();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =  value  ==  null?   "null "  :  value.toString();  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  value  ==  null?   "null "  :  value.toString();	  assignToUnknownValue    =   "   ";    	non-compiled	[CE]  	37	None	replace
453	[BUG]  [BUGGY]  assignToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignmentToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	84	None	replace
454	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(var.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isFunction(var.getInitialValue());	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isForIn(var.getInitialValue());    	non-compiled	[CE]  	67	None	replace
455	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignedToUnknownValue    =!isPropertyAssign    &&!NodeUtil.isForIn(var.getInitialValue());    	non-compiled	[CE]  	67	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assign);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  this,  assign);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentdToUnknownValue);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignmentdToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignmentdToUnknownValue);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assignedToUnknownValue);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assignedToUnknownValue);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  this,  assignedToUnknownValue);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	93	None	replace
459	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getType()  ==  Token.VAR;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  var.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getType()  ==  Token.VAR;	  assignmentToUnknownValue    =    assignedToUnknownValue;    	non-compiled	[CE]  	83	None	replace
460	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isExprAssign(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isExprAssign(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isExprAssign(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
461	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isExpressionNode(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isExpressionNode(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isExpressionNode(value);	  assignmentToUnknownValue    =    NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	81	None	replace
462	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode().getString(),  value);	  assignsByVar    =    assignsByVar.get(var.getParentNode().getString());    	non-compiled	[CE]  	16	None	replace
463	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isVarValue(value);	  assignedToUnknownValue    =    value    ==    null    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	10	None	replace
464	[BUG]  [BUGGY]  assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(value,    true);    	non-compiled	[CE]  	54	None	replace
465	[BUG]  [BUGGY]  assignedToUnknownValue  =  hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
466	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  >>  null  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  >>  null  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  >>  null  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
467	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  >=  null  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {        [BUGGY]  assignedToUnknownValue  =  value  >=  null  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]      }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  >=  null  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =    isPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	5	None	replace
