bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasFollowing  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
3	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
4	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  isPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  >=  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value  >=  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  >=  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  value);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByNode.put(var.getNameNode(),  value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  value);	      	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  assignsByVar.put(var.getNameNode(),  value);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByVar.put(var.getNameNode(),  value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar.put(var.getNameNode(),  value);	      	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByVar  =  assignsByVar.get(var.getNameNode());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getNameNode());	      	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode().getString());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode().getString());	      	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByVar);	      	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  true);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByVar,  true);	      	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode());  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByVar  =  assignsByVar.get(var.getParentNode());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByVar  =  assignsByVar.get(var.getParentNode());	      	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
22	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  assignmentToUnknownValue  =  true;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  true;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  true;	  assignedToUnknownValue    =    false;    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  assignToUnknownValue  =  true;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignToUnknownValue  =  true;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  true;	  assignedToUnknownValue    =    false;    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
26	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(var.getInitialValue());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  assignmentToUnknownValue  =  assign;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  assign;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  assign;	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  true);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(value,  false);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  assignToUnknownValue  =  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignToUnknownValue  =  null;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  =  null;	  assignToUnknownValue    =    false;    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  assignToUnknownValue  = " ";  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignToUnknownValue  = " ";  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  = " ";	  assignToUnknownValue    =    false;    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  assignedToUnknownValue  -=  false;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  false;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  false;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  assignedToUnknownValue  -=  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  1;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  1;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
40	[BUG]  [BUGGY]  assignedToUnknownValue  -=  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  null;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  null;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
41	[BUG]  [BUGGY]  assignToUnknownValue  -=  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignToUnknownValue  -=  false;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignToUnknownValue  -=  false;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
42	[BUG]  [BUGGY]  assignmentToUnknownValue  -=  false;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  -=  false;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  -=  false;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
43	[BUG]  [BUGGY]  assignedToUnknownValue  -=  2;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  2;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  2;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
44	[BUG]  [BUGGY]  AssignmentToUnknownValue  =  true;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  AssignmentToUnknownValue  =  true;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	AssignmentToUnknownValue  =  true;	  assignmentToUnknownValue    =    false;    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  assignmentToUnknownValue  = " ";  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  = " ";  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  = " ";	  assignmentToUnknownValue    =    false;    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  true);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  false);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  false);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isForIn(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =   "   ";    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer());	      	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  true);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByNode,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByNode,  true);	      	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  var.getParentNode());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  var.getParentNode());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeUtil.removeChild(parent,  var.getParentNode());	      	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  false);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignsByVar,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  assignsByVar,  false);	      	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  var.getInitialValue();  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getInitialValue();	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
62	[BUG]  [BUGGY]  assignmentToUnknownValue  =  value;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  value;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  value;	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
63	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
64	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
65	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
66	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
67	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(var.getInitialValue());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.isForIn(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
68	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
69	[BUG]  [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  true  &&!NodeUtil.isLiteralValue(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
71	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  true);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value,  true);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value,  true);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true);    	non-compiled	[CE]  	10	None	replace
73	[BUG]  [BUGGY]  assignedToUnknownValue  =  NodeUtil.isLiteralValue(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  NodeUtil.isLiteralValue(value);	  assignedToUnknownValue    =    0;    	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getString());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.getString());	  assignedToUnknownValue    =    0;    	non-compiled	[CE]  	6	None	replace
75	[BUG]  [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.toString());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.toString());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value!=  null  &&!NodeUtil.isLiteralValue(value.toString());	  assignedToUnknownValue    =    0;    	non-compiled	[CE]  	6	None	replace
76	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(var.getInitialValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(var.getInitialValue());  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(var.getInitialValue());	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(var.getInitialValue());    	non-compiled	[CE]  	11	None	replace
77	[BUG]  [BUGGY]  assignedToUnknownValue  -=  4;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  4;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  4;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
78	[BUG]  [BUGGY]  assignedToUnknownValue  -=  3;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  3;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  3;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
79	[BUG]  [BUGGY]  assignedToUnknownValue  -=  0,  true;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  -=  0,  true;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  -=  0,  true;	  assignedToUnknownValue    -=    true;    	non-compiled	[CE]  	14	None	replace
80	[BUG]  [BUGGY]  assignmentToUnknownValue  =  var.getName();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  var.getName();  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  var.getName();	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
82	[BUG]  [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  NodeUtil.isLiteralValue(value,  true);	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
83	[BUG]  [BUGGY]  assignmentToUnknownValue  =  assignedToUnknownValue;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =  assignedToUnknownValue;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =  assignedToUnknownValue;	  assignmentToUnknownValue    =    null;    	non-compiled	[CE]  	5	None	replace
84	[BUG]  [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignmentToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.mayHaveSideEffects(value);    	non-compiled	[CE]  	13	None	replace
85	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  false);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isFunction(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
86	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
87	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value,  false);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value,  false);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value,  false);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    false);    	non-compiled	[CE]  	9	None	replace
88	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isImmutableValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
89	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isExpressionNode(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isExpressionNode(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isExpressionNode(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
90	[BUG]  [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =!hasPropertyAssign  &&!NodeUtil.isVarValue(value);	  assignedToUnknownValue    =!hasPropertyAssign    &&!NodeUtil.isLiteralValue(value);    	non-compiled	[CE]  	12	None	replace
91	[BUG]  [BUGGY]  assignedToUnknownValue  =  value  ==  null?   "null "  :  value.toString();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value  ==  null?   "null "  :  value.toString();  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value  ==  null?   "null "  :  value.toString();	  assignedToUnknownValue    =   "   ";    	non-compiled	[CE]  	7	None	replace
92	[BUG]  [BUGGY]  assignedToUnknownValue  =  value;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignedToUnknownValue  =  value;  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignedToUnknownValue  =  value;	  assignedToUnknownValue    =    null;    	non-compiled	[CE]  	2	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	NodeTraversal.traverse(compiler,  var,  this);	      	non-compiled	[CE]  	8	None	replace
94	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  var);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByNode.put(var.getNameNode(),  var);  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  var);	      	non-compiled	[CE]  	8	None	replace
95	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  var);  assignedToUnknownValue  =  var.getInitialValue();	      	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN));  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Node(Token.ASSIGN));	      	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(var.getValue()));  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    if  (var.getParentNode().isVar()  &&  !NodeUtil.isForIn(var.getParentNode().getParent()))  {  Node  value  =  var.getInitialValue();  assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {      [BUGGY]  assignsByNode.put(var.getNameNode(),  new  Integer(var.getValue()));  [BUGGY]    }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  maybeEscaped  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	assignsByNode.put(var.getNameNode(),  new  Integer(var.getValue()));	      	non-compiled	[CE]  	8	None	replace
