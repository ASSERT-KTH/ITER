bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignment()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignment()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignment()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAssignment()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	47	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignment()  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isAssignment()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	47	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignment()  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAssignment()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	47	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isConstructor());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isConstructor());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isConstructor());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isConstructor());    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssignment());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssignment());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssignment());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isConstructor());    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionDeclaration());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionDeclaration());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isConstructor());    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().equals( "function "));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().equals( "function "));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().equals( "function "));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getNext());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getNext());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getNext());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isAssignmentOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isAssignmentOp());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignmentOp());    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssignmentOp());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssignmentOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssignmentOp());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignmentOp());    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionOp());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignmentOp());    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	35	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	35	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	35	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	35	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.CALL);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.CALL);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.CALL);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	35	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  ==  1);	  Preconditions.checkState(n.isChildCount()    ==    3);    	non-compiled	[CE]  	28	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  0);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  ==  0);	  Preconditions.checkState(n.isChildCount()    ==    3);    	non-compiled	[CE]  	28	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  >  3);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()  >  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  >  3);	  Preconditions.checkState(n.isChildCount()    ==    3);    	non-compiled	[CE]  	28	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  4);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  ==  4);	  Preconditions.checkState(n.isChildCount()    ==    3);    	non-compiled	[CE]  	28	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	19	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	19	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	19	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getChildCount()  ==  3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	19	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isProperty());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isProperty());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isProperty());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isProperty());    	non-compiled	[CE]  	41	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isReferenced());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isReferenced());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isReferenced());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isProperty());    	non-compiled	[CE]  	41	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	25	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	25	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.isType()  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isType()  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isType()  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isType()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.isType()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isType()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isType()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isType()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isType()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  parentScope.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  parentScope.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  parentScope.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getNext());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getNext());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getNext());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	27	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	27	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	27	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFirstChild());    	non-compiled	[CE]  	62	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isLastChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isLastChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFirstChild());    	non-compiled	[CE]  	62	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFirstChild());    	non-compiled	[CE]  	62	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isChildCount());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isChildCount());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isChildCount());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFirstChild());    	non-compiled	[CE]  	62	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()!=  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  4);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  4);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  4);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	26	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefined());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefined());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefined());	  Preconditions.checkState(n.isDeclaration());    	non-compiled	[CE]  	61	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  n.isDefine());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  n.isDefine());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  ||  n.isDefine());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isConstructor());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isConstructor());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isConstructor());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  &&  n.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  &&  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  &&  n.isFunction());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isExpression());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isExpression());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isExpression());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isAssignmentOp());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isAssignmentOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isAssignmentOp());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  &&  NodeUtil.isFunctionObjectCall(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  &&  NodeUtil.isFunctionObjectCall(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  &&  NodeUtil.isFunctionObjectCall(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isAssignmentOp(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isAssignmentOp(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.mayHaveSecondarySideEffects(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.mayHaveSecondarySideEffects(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.mayHaveSecondarySideEffects(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.mayHaveSideEffects(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.mayHaveSideEffects(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.mayHaveSideEffects(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isExpressionNode(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isExpressionNode(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isExpressionNode(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectCall(parentScope));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectCall(parentScope));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectCall(parentScope));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  >=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
70	[BUG]  [BUGGY]  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAll()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAll()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAll()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll()  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAll()  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAll()  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isAll()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAll());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAll());	  Preconditions.checkState(n.isAll()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.isEmpty()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isEmpty()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isEmpty()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAll()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isLocal());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isLocal());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isLocal());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isLocal());    	non-compiled	[CE]  	63	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isVarArgs());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isVarArgs());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isVarArgs());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isLocal());    	non-compiled	[CE]  	63	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  >=  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  	18	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  	18	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.RETURN);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  	18	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  parentScope.getChildCount());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  parentScope.getChildCount());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  parentScope.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  2);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  4);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	45	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	45	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	45	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getLastChild());    	non-compiled	[CE]  	58	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getLastChild());    	non-compiled	[CE]  	58	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  &&  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  &&  isPropertyAssign);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  &&  isPropertyAssign);	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign,  mayHaveSecondarySideEffects);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign,  mayHaveSecondarySideEffects);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign,  mayHaveSecondarySideEffects);	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign,  parentScope);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign,  parentScope);	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign;  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign;	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign)  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign)  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign)	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isFunctionExpression);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isFunctionExpression);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isFunctionExpression);	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isUnknown());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isUnknown());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isUnknown());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isUnknown());    	non-compiled	[CE]  	11	None	replace
95	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getLastChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
96	[BUG]  [BUGGY]  Node  c  =  parentScope.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  parentScope.getFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  parentScope.getFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
97	[BUG]  [BUGGY]  Node  c  =  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.getNext();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getNext();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
98	[BUG]  [BUGGY]  Node  c  =  n.getCurrentNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.getCurrentNode();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getCurrentNode();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
99	[BUG]  [BUGGY]  Node  c  =  n.getCurrentScope();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.getCurrentScope();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getCurrentScope();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	32	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	32	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  3);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	32	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(scope.isAssignment());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(scope.isAssignment());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(scope.isAssignment());	  Preconditions.checkState(parentScope.isAssignment());    	non-compiled	[CE]  	2	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.isFunction());	  Preconditions.checkState(parentScope.isAssignment());    	non-compiled	[CE]  	2	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getChildCount()!=  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()!=  1);	  Preconditions.checkState(n.getChildCount()!=    3);    	non-compiled	[CE]  	15	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isExpression());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isExpression());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isExpression());    	non-compiled	[CE]  	10	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  parentScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  parentScope.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  parentScope.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  &&  n.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  &&  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  &&  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FOR  &&  n.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FOR  &&  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FOR  &&  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope.getChildCount());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope.getChildCount());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  >=  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getChildCount()  >=  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()  >=  2);	  Preconditions.checkState(n.getChildCount()!=    2);    	non-compiled	[CE]  	14	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  >  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()  >  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  >  2);	  Preconditions.checkState(n.isChildCount()    ==    2);    	non-compiled	[CE]  	30	None	replace
120	[BUG]  [BUGGY]  Node  node  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  n.getLastChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  n.getLastChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
121	[BUG]  [BUGGY]  Node  node  =  parentScope.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  parentScope.getFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  parentScope.getFirstChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
122	[BUG]  [BUGGY]  Node  node  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  n.getNext();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  n.getNext();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
123	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  parent.getFirstChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
124	[BUG]  [BUGGY]  final  Node  node  =  n.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  final  Node  node  =  n.getFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	final  Node  node  =  n.getFirstChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
127	[BUG]  [BUGGY]  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isDefine());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isDefine());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isDefine());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isDefine());    	non-compiled	[CE]  	3	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDeclaration());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDeclaration());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isDefine());    	non-compiled	[CE]  	3	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isAssignment());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isAssignment());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isAssignment());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignment());    	non-compiled	[CE]  	1	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignmentToken());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignmentToken());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignmentToken());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignment());    	non-compiled	[CE]  	1	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(n.isNode()  ||  n.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isNode()  ||  n.isDefine());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isNode()  ||  n.isDefine());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isVarArgs());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isVarArgs());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isVarArgs());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  &&  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  parentScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  parentScope.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  ||  parentScope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunction()  }  );  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunction()  }  );  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunction()  }  );	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.isExtern()  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isExtern()  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isExtern()  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.ASSIGN);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.ASSIGN);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.ASSIGN);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  	60	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.STRING);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.STRING);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.STRING);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  	60	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  	60	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  4);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	57	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  4);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	57	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()!=  4);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()!=  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()!=  4);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	57	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isExtern());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isExtern());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isExtern());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isExtern());    	non-compiled	[CE]  	9	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  scope);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  scope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  this);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  this);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  this);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  null);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  null);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  scope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  assign);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  assign);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFunctionExpression());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFunctionExpression());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFunctionExpression());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunctionExpression());    	non-compiled	[CE]  	42	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunctionExpression());    	non-compiled	[CE]  	42	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	38	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	38	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	38	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	34	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	34	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	49	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	49	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeChildCount());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeChildCount());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeChildCount());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	43	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isVarDeclaration(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isVarDeclaration(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isVarDeclaration(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	43	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  >  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()  >  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  >  1);	  Preconditions.checkState(n.isChildCount()    {    1);    	non-compiled	[CE]  	51	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  &&  isPropertyAssign());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  &&  isPropertyAssign());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  &&  isPropertyAssign());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionAssign());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionAssign());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isFunctionAssign());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isConstructor());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isConstructor());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isConstructor());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isPropertyAssign(),  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isPropertyAssign(),  parentScope);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isPropertyAssign(),  parentScope);	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpression());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isFunctionExpression());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionAssign());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionAssign());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionAssign());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  3);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	23	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  3);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	23	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  3);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	23	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP,  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP,  n);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  &&  parentScope.hasChildren());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  &&  parentScope.hasChildren());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  &&  parentScope.hasChildren());	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.hasChildren());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.hasChildren());	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isName());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isName());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isName());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isDefine());    	non-compiled	[CE]  	3	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.isType()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
192	[BUG]  [BUGGY]  Node  c  =  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.getParent();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getParent();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
193	[BUG]  [BUGGY]  Node  c  =  n.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.getPreviousChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getPreviousChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyOp());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignmentOp());    	non-compiled	[CE]  	8	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FOR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FOR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FOR);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  	60	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    	non-compiled	[CE]  	60	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isAll());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isAll());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isUnknown());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isUnknown());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isUnknown());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isFunctionExpression());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isFunctionExpression());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isFunctionExpression());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION));	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getJSType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getJSType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getJSType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getLastChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getLastChild());    	non-compiled	[CE]  	58	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild()!=  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild()!=  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getLastChild());    	non-compiled	[CE]  	58	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getLastChild());    	non-compiled	[CE]  	58	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isNext());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isNext());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isNext());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFirstChild());    	non-compiled	[CE]  	62	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  4);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
213	[BUG]  [BUGGY]  Node  node  =  n.getPreviousChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  n.getPreviousChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  n.getPreviousChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionPrototype());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionPrototype());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionPrototype());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isConstructor());    	non-compiled	[CE]  	7	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getChildCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getChildCount());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  >  1)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  >  1)  {  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getChildCount()  >  1)  {	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionDeclaration());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isFunctionDeclaration());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isVarDeclaration());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isVarDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isVarDeclaration());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionNames());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionNames());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionNames());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isGetProp(n));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isGetProp(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isGetProp(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	43	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isNode());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isNode());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isNode());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isUnknown());    	non-compiled	[CE]  	11	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isForIn(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isForIn(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isForIn(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  5);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  5);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()  ==  5);	  Preconditions.checkState(n.getChildCount()    ==    4);    	non-compiled	[CE]  	12	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign()  ||  n.isAssignmentOp());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(isPropertyAssign()  ||  n.isAssignmentOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(isPropertyAssign()  ||  n.isAssignmentOp());	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssignmentOp()  ||  n.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(isPropertyAssignmentOp()  ||  n.isAssignmentOp());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(isPropertyAssignmentOp()  ||  n.isAssignmentOp());	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.GETPROP);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parent.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  	18	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  3);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isTransient());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isTransient());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isTransient());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isLocal());    	non-compiled	[CE]  	63	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssign());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssign());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssign());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isLocal());    	non-compiled	[CE]  	63	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NEW);	  Preconditions.checkState(n.isType());    	non-compiled	[CE]  	50	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  0);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  0);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  0);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	64	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  &&  n.isNode());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  &&  n.isNode());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  &&  n.isNode());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isType());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isType());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isType());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isVarDeclaration());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isVarDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isVarDeclaration());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isObject());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isObject());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isObject());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isProperty());    	non-compiled	[CE]  	41	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionProperty());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionProperty());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionProperty());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isProperty());    	non-compiled	[CE]  	41	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(n.isName()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isName()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isName()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	36	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isAssignment());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isAssignment());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isAssignment());	  Preconditions.checkState(parentScope.isAssignment());    	non-compiled	[CE]  	2	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  parentScope.isAssignment());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  parentScope.isAssignment());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  parentScope.isAssignment());	  Preconditions.checkState(parentScope.isAssignment());    	non-compiled	[CE]  	2	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  false);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  false);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	24	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.BLOCK);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP  ||  parentScope.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parentScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	20	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectApply(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectApply(n));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectApply(n));	  Preconditions.checkState(n.isDefine()    ||    NodeUtil.isFunctionObjectCall(n));    	non-compiled	[CE]  	55	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  6);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  6);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  6);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	26	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  isPropertyAssign);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  ||  isPropertyAssign);	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isVarArgs);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isVarArgs);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isVarArgs);	  Preconditions.checkState(n.isAssignmentOp()    ||    isPropertyAssign);    	non-compiled	[CE]  	22	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(n.isBlock());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isBlock());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isBlock());	  Preconditions.checkState(n.isExtern());    	non-compiled	[CE]  	65	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getChildCount()  ==  3);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getChildCount()  ==  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	31	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isInitializingFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isInitializingFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isInitializingFunction());	  Preconditions.checkState(n.isDefine()    ||    n.isFunction());    	non-compiled	[CE]  	54	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.isFunction()    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	37	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpectedFunctionExpression());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpectedFunctionExpression());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpectedFunctionExpression());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunctionExpression());    	non-compiled	[CE]  	42	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()!=  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isChildCount()!=  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()!=  2);	  Preconditions.checkState(n.isChildCount()    ==    2);    	non-compiled	[CE]  	30	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  4);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getChildCount()!=  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()!=  4);	  Preconditions.checkState(n.getChildCount()    ==    4);    	non-compiled	[CE]  	12	None	replace
267	[BUG]  [BUGGY]  Node  node  =  n.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  n.removeFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  n.removeFirstChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
268	[BUG]  [BUGGY]  Node  node  =  n.getAncestor(2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  node  =  n.getAncestor(2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  n.getAncestor(2);	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  	53	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	59	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()!=  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()!=  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()!=  3);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    3);    	non-compiled	[CE]  	19	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(n.isType()  ||  n.isFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isType()  ||  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isType()  ||  n.isFunction());	  Preconditions.checkState(n.isType());    	non-compiled	[CE]  	50	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(n.isType()  ||  n.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isType()  ||  n.isAll());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isType()  ||  n.isAll());	  Preconditions.checkState(n.isType());    	non-compiled	[CE]  	50	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isAssignmentToken());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isAssignmentToken());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isAssignmentToken());	  Preconditions.checkState(parentScope.isAssignment());    	non-compiled	[CE]  	2	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionName());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionName());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isFunctionExpressionName());	  Preconditions.checkState(n.isDefine()    ||    isPropertyAssign());    	non-compiled	[CE]  	4	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(n.isInitializingDeclaration());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isInitializingDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isInitializingDeclaration());	  Preconditions.checkState(n.isDeclaration());    	non-compiled	[CE]  	61	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().getString().equals( "prototype "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().getString().equals( "prototype "));  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().getString().equals( "prototype "));	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  	21	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	33	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  *  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  *  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  *  2);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  	48	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  callSiteOptimizer);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  callSiteOptimizer);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  callSiteOptimizer);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	16	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  3);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  	44	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getChildCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getChildCount());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getChildCount());	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  	18	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    &&    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	36	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInterface());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInterface());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInterface());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isConstructor());    	non-compiled	[CE]  	7	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  6);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  6);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  6);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	45	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  4);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isType()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.isType()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.isType()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isType()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(n.isNode()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isNode()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isNode()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isType()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isAll()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.isAll()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.isAll()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAll()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.isAll()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	66	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FOR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FOR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FOR);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.VAR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.isDefine()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	5	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.isFunction());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    &&    n.isFunction());    	non-compiled	[CE]  	6	None	replace
301	[BUG]  [BUGGY]  Node  c  =  n.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  n.removeFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.removeFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
302	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  node.getFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  	17	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(n.isBlock()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isBlock()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isBlock()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isAssignment()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	47	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  n.getType()  ==  Token.FOR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  n.getType()  ==  Token.FOR);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignment()  ||  n.getType()  ==  Token.FOR);	  Preconditions.checkState(n.isAssignment()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	47	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingDeclaration());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingDeclaration());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isInitializingDeclaration());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isAssignmentOp());    	non-compiled	[CE]  	8	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkArgument(n.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkArgument(n.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getLastChild()  ==  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getLastChild()  ==  n);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getLastChild());    	non-compiled	[CE]  	58	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isExtern());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isExtern());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isCall());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isCall());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isCall());	  Preconditions.checkState(n.isDefine()    ||    n.isNode());    	non-compiled	[CE]  	56	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()!=  4);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()!=  4);  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()!=  4);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getChildCount()    ==    4);    	non-compiled	[CE]  	57	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasOneChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasOneChild());  [BUGGY]        final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	52	None	replace
