bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignment());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignment());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignment());	  Preconditions.checkState(n.isAssignment());    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isAssignment());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(parentScope.isAssignment());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.isAssignment());	  Preconditions.checkState(n.isAssignment());    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDefine());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDefine());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isDefine());	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isPropertyAssign());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDefine()  ||  isPropertyAssign());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  isPropertyAssign());	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFunction());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFunction());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isConstructor());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isConstructor());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isConstructor());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignmentOp());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignmentOp());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isAssignmentOp());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpression());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpression());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpression());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isUnknown());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isUnknown());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isUnknown());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  4);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  4);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()  ==  4);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  1);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()  ==  1);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  2);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getChildCount()!=  2);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()!=  2);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  3);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getChildCount()!=  3);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()!=  3);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope);	      	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  c  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  3);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  3);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignmentOp()  ||  isPropertyAssign);	  Preconditions.checkState(n.isAssignmentOp());    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  3);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  3);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  ==  3);	  Preconditions.checkState(n.isChildCount());    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  {  3);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isChildCount()  {  3);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  {  3);	  Preconditions.checkState(n.isChildCount());    	non-compiled	[CE]  	11	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  2);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isChildCount()  ==  2);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  ==  2);	  Preconditions.checkState(n.isChildCount());    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isFunction()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isFunction()  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isFunction()  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  0);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getChildCount()  ==  0);	  Preconditions.checkState(n.getChildCount()    ==    3);    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isProperty());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isProperty());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isProperty());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionExpression());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionExpression());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionExpression());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.isType()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isType()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isType()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isAssignment()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAssignment()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  2);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  2);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.isType());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isType());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isType());	  Preconditions.checkState(n.isAssignment());    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(n.isChildCount()  {  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isChildCount()  {  1);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isChildCount()  {  1);	  Preconditions.checkState(n.isChildCount());    	non-compiled	[CE]  	11	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Node  node  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isFunction());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isFunction());	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectCall(n));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectCall(n));  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  NodeUtil.isFunctionObjectCall(n));	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isNode());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDefine()  ||  n.isNode());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDefine()  ||  n.isNode());	  Preconditions.checkState(n.isDefine());    	non-compiled	[CE]  	12	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  4);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  4);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLastChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLastChild());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	10	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.isAssignmentOp());    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.ASSIGN);	  Preconditions.checkState(n.isAssignmentOp());    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.isDeclaration());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isDeclaration());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isDeclaration());	  Preconditions.checkState(n.isAssignmentOp());    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFirstChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFirstChild());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isLocal());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isLocal());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isLocal());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.isFunction());    	non-compiled	[CE]  	3	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.isExtern());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isExtern());  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isExtern());	  Preconditions.checkState(n.isAssignment());    	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);    [BUGGY]  Preconditions.checkState(n.isAll()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	Preconditions.checkState(n.isAll()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.isFunction()    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
