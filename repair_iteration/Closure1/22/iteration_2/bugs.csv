bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  ||  body.isBlock());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  ||  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()!=  null  ||  body.isBlock());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isBlock());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isBlock());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  null  &&  body.isBlock());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  null  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getLastChild()  ==  null  &&  body.isBlock());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isFunction());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isFunction());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isFunction());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()!=  null  &&  body.isBlock());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getParent()!=  null  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getParent()!=  null  &&  body.isBlock());	  Preconditions.checkState(body.getParent()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()!=  null  ||  body.isBlock());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getParent()!=  null  ||  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getParent()!=  null  ||  body.isBlock());	  Preconditions.checkState(body.getParent()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isFunction());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isFunction());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getParent()  ==  null  ||  body.isFunction());	  Preconditions.checkState(body.getParent()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  &&  body.isBlock());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  &&  body.isBlock());	  Preconditions.checkState(body.getNext()!=    null    &&    body.isBlock());    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Node  body  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Node  c  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  NodeUtil.removeChild(body);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  NodeUtil.removeChild(body);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	NodeUtil.removeChild(body);	      	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  Node  parentScope  =  n.getParent();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Node  parentScope  =  n.getParent();  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Node  parentScope  =  n.getParent();	      	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  NodeUtil.removeChild(body,  parentScope);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  NodeUtil.removeChild(body,  parentScope);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	NodeUtil.removeChild(body,  parentScope);	      	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Node  node  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isFunction());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isFunction());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isFunction());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isAssignmentOp());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isAssignmentOp());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isCall());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isCall());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isCall());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isExpression());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isExpression());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isExpression());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isExtern());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isExtern());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isExtern());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  null  ||  body.isBlock());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  null  ||  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getLastChild()  ==  null  ||  body.isBlock());	  Preconditions.checkState(body.getFirstChild()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isFunction());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isFunction());	  Preconditions.checkState(body.getFirstChild()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isAssignmentOp());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isAssignmentOp());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isAssignmentOp());	  Preconditions.checkState(body.getFirstChild()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body!=  null  &&  body.isBlock());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body!=  null  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body!=  null  &&  body.isBlock());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isEmpty());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isEmpty());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.isEmpty());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION    ||    body.isBlock());    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isNode());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isNode());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()!=  null  &&  body.isNode());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  NodeTraversal.traverse(compiler,  body,  this);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	NodeTraversal.traverse(compiler,  body,  this);	      	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  body);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  body);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	NodeTraversal.traverse(compiler,  n,  body);	      	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  NodeTraversal.traverse(compiler,  body,  allFunctionScopes);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	NodeTraversal.traverse(compiler,  body,  allFunctionScopes);	      	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body!=  null);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body!=  null);	      	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isConstructor());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isConstructor());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getParent()  ==  null  ||  body.isConstructor());	  Preconditions.checkState(body.getParent()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isType());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isType());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isType());	  Preconditions.checkState(body.getFirstChild()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isAssignmentOp());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isAssignmentOp());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getParent()  ==  null  ||  body.isAssignmentOp());	  Preconditions.checkState(body.getParent()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isExtern());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getParent()  ==  null  ||  body.isExtern());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getParent()  ==  null  ||  body.isExtern());	  Preconditions.checkState(body.getParent()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(body.getNext()  ==  null  ||  body.isLocal());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getNext()  ==  null  ||  body.isLocal());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getNext()  ==  null  ||  body.isLocal());	  Preconditions.checkState(body.getNext()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.BLOCK);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.VAR);  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.VAR);	      	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.BLOCK  &&  body.isBlock());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.BLOCK  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.BLOCK  &&  body.isBlock());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  body.isBlock());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  body.isBlock());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  body.isBlock());	  Preconditions.checkState(body.getFirstChild()    ==    null    &&    body.isBlock());    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isLocal());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isLocal());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isLocal());	  Preconditions.checkState(body.getFirstChild()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isCall());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();    [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isCall());  [BUGGY]    body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null  ||  body.isCall());	  Preconditions.checkState(body.getFirstChild()    ==    null    ||    body.isBlock());    	non-compiled	[CE]  	8	None	replace
