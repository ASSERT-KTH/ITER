bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(scope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(scope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(scope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(fnScope.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	38	None	replace
2	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {	  while(fnScope.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	38	None	replace
3	[BUG]  [BUGGY]  while(parentScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(parentScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(parentScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(fnScope.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	38	None	replace
4	[BUG]  [BUGGY]  while(fnScope.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(fnScope.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	38	None	replace
5	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(!isPropertyAssign);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(!isPropertyAssign);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(isPropertyAssign  ||  isFunctionExpressionNames);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnreferenced);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnreferenced);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(isPropertyAssign  ||  isUnreferenced);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnreferencedFunctionExpressionNames);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  isUnreferencedFunctionExpressionNames);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(isPropertyAssign  ||  isUnreferencedFunctionExpressionNames);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(isPropertyAssign  &&  isFunctionExpressionNames);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
14	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
15	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
16	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  lastArg.getLastChild())!=  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
17	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.get(0))!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.get(0))!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  argList.get(0))!=  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
18	[BUG]  [BUGGY]  while(argList.hasChildren()  ||(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  ||(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  ||(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
19	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())  ==  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
20	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getString())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
21	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg.getLastChild())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
22	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  lastArg.getString())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  lastArg.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  lastArg.getString())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg.getString()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg.getString()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg.getString()  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
24	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  lastArg.getString())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  lastArg.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  lastArg.getString())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
25	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg.getNext())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg.getNext())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg.getNext())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
26	[BUG]  [BUGGY]  while  ((  lastArg  =  fnScope.getFirstChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while  ((  lastArg  =  fnScope.getFirstChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while  ((  lastArg  =  fnScope.getFirstChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null    &&    parentScope.getVar(lastArg.getString())!=    null)    {    	non-compiled	[CE]  	27	None	replace
27	[BUG]  [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())  ==  null)  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null    &&    parentScope.getVar(lastArg.getString())!=    null)    {    	non-compiled	[CE]  	27	None	replace
28	[BUG]  [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  scope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  scope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  scope.getVar(lastArg.getString())!=  null)  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null    &&    parentScope.getVar(lastArg.getString())!=    null)    {    	non-compiled	[CE]  	27	None	replace
29	[BUG]  [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())  ==  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())  ==  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while  ((  lastArg  =  fnScope.getLastChild())  ==  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null    &&    parentScope.getVar(lastArg.getString())!=    null)    {    	non-compiled	[CE]  	27	None	replace
30	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "* "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
31	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
32	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "/ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "/ "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
33	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "  <  unknown> "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "  <  unknown> "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "  <  unknown> "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
34	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
35	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "[] "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "[] "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "[] "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
36	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())  ==  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())  ==  null)  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
37	[BUG]  [BUGGY]  while((  lastArg  =  argList.getString())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getString())!=  null)  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
38	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&!referenced.contains(lastArg))  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
39	[BUG]  [BUGGY]  while((  argList  =  lastArg.getNext())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getNext())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getNext())!=  null)  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
40	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.getLastChild().getNext();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getLastChild().getNext();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	42	None	replace
41	[BUG]  [BUGGY]  Node  lastArg  =  function.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  function.getLastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  function.getLastChild();	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	42	None	replace
42	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.getLastChild()  +  1;  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getLastChild()  +  1;	  Node    lastArg    =    argList.getLastChild();    	non-compiled	[CE]  	42	None	replace
43	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())  ==  null)  {	  while((    argList    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	18	None	replace
44	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())  ==  null)  {	  while((    argList    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	18	None	replace
45	[BUG]  [BUGGY]  while((  argList  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getLastChild())  ==  null)  {	  while((    argList    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	18	None	replace
46	[BUG]  [BUGGY]  Node  fnScope  =  parentScope.getScope();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  parentScope.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  parentScope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
47	[BUG]  [BUGGY]  Node  fnScope  =  scope.getScope();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  scope.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  scope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
48	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getScope();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  fnScope.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
49	[BUG]  [BUGGY]  Node  fnScope  =  lastArg.getScope();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  lastArg.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  lastArg.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
50	[BUG]  [BUGGY]  Node  fnScope  =  this.parentScope.getScope();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  this.parentScope.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  this.parentScope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
51	[BUG]  [BUGGY]  Node  fnScope  =  nameNode.getScope();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  nameNode.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  nameNode.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
52	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg.getFirstChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
53	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  argList.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  argList.getLastChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
54	[BUG]  [BUGGY]  while(lastArg.getType()!=  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()!=  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()!=  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
55	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  argList.getLastChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
56	[BUG]  [BUGGY]  while(lastArg.getType()!=  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()!=  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()!=  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getLastChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
57	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	50	None	replace
58	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	50	None	replace
59	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	50	None	replace
60	[BUG]  [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getLastChild())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	50	None	replace
61	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  lastArg.getFirstChild())!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList  =  lastArg.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  lastArg.getFirstChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	20	None	replace
62	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  fnScope.getFirstChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	20	None	replace
63	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()    ==    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	53	None	replace
64	[BUG]  [BUGGY]  while(lastArg.getLastChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()  ==  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()    ==    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	53	None	replace
65	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {	  while(argList!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	26	None	replace
66	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  =  argList.getLastChild())!=  null)  {	  while(argList!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	26	None	replace
67	[BUG]  [BUGGY]  while((  argList  =  fnScope.getNext())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getNext())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getNext())!=  null)  {	  while((    argList    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	14	None	replace
68	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    argList    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	14	None	replace
69	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())!=  null  &&!referenced.contains(lastArg))  {	  while((    argList    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	14	None	replace
70	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    argList    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  lastArg.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  lastArg.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  lastArg.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
72	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  argList.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  argList.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
73	[BUG]  [BUGGY]  while(argList.getLastChild()!=  argList.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  argList.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
74	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  argList.getLastChild()  ||!referenced.contains(lastArg))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  argList.getLastChild()  ||!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  argList.getLastChild()  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
75	[BUG]  [BUGGY]  while((  argList  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getLastChild())!=  null)  {	  while((    argList    =    lastArg.getFirstChild())!=    null)    {    	non-compiled	[CE]  	13	None	replace
76	[BUG]  [BUGGY]  while((  argList  =  lastArg.getString())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getString())!=  null)  {	  while((    argList    =    lastArg.getFirstChild())!=    null)    {    	non-compiled	[CE]  	13	None	replace
77	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
78	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
79	[BUG]  [BUGGY]  while(fnScope.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
80	[BUG]  [BUGGY]  whilst(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
81	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {	  while(argList!=    null    &&(argList    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	24	None	replace
82	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {	  while(argList!=    null    &&(argList    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	24	None	replace
83	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
84	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().startsWith( "_ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().startsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().startsWith( "_ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
85	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "._ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "._ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "._ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
86	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "._ "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "._ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "._ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
87	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getFirstChild()  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getFirstChild()  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getFirstChild()  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
88	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
89	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  fnScope.getNext();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.getNext();	  Node    lastArg    =    argList.getNext();    	non-compiled	[CE]  	46	None	replace
90	[BUG]  [BUGGY]  Node  lastArg  =  function.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  function.getNext();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  function.getNext();	  Node    lastArg    =    argList.getNext();    	non-compiled	[CE]  	46	None	replace
91	[BUG]  [BUGGY]  Node  lastArg  =  argList.removeChild(lastArg);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.removeChild(lastArg);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.removeChild(lastArg);	  Node    lastArg    =    argList.getNext();    	non-compiled	[CE]  	46	None	replace
92	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "* "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
93	[BUG]  [BUGGY]  while((  lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
94	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "null "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
95	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "/ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "/ "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
96	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "_ "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "_ "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
97	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())  ==  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
98	[BUG]  [BUGGY]  while(parentScope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(parentScope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(parentScope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
99	[BUG]  [BUGGY]  while(scope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(scope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(scope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
100	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
101	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
102	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  null)  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
103	[BUG]  [BUGGY]  while(fnScope.getLastChild()!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getLastChild()!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getLastChild()!=  null)  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
104	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
105	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
106	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  parentScope.getFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  parentScope.getFirstChild();	  Node    lastArg    =    fnScope.getFirstChild();    	non-compiled	[CE]  	44	None	replace
107	[BUG]  [BUGGY]  Node  lastArg  =  scope.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  scope.getLastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  scope.getLastChild();	  Node    lastArg    =    fnScope.getFirstChild();    	non-compiled	[CE]  	44	None	replace
108	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  fnScope.removeFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.removeFirstChild();	  Node    lastArg    =    fnScope.getFirstChild();    	non-compiled	[CE]  	44	None	replace
109	[BUG]  [BUGGY]  Node  lastArg  =  scope.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  scope.getFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  scope.getFirstChild();	  Node    lastArg    =    fnScope.getFirstChild();    	non-compiled	[CE]  	44	None	replace
110	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	22	None	replace
111	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getFirstChild())  ==  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	22	None	replace
112	[BUG]  [BUGGY]  while(argList!=  null  ||(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  ||(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  ||(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	22	None	replace
113	[BUG]  [BUGGY]  while(argList  ==  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList  ==  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList  ==  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	22	None	replace
114	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
115	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
116	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.VAR)  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  null)  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
118	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  fnScope.getFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList  =  fnScope.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  fnScope.getFirstChild())!=  null)  {	  while(argList!=    null    &&(argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	21	None	replace
119	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  argList.getNext())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList  =  argList.getNext())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  argList.getNext())!=  null)  {	  while(argList!=    null    &&(argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	21	None	replace
120	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
121	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( "null "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
122	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "false "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "false "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "false "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
123	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  lastArg.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
124	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "true "))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "true "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "true "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
125	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
126	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
127	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  ==  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
128	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.getString().length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.getString().length()  >  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
129	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >=  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >=  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >=  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
130	[BUG]  [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
131	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
133	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getString().length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild().getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
134	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
135	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >=  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >=  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >=  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
136	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getNext())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getNext())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getNext())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
137	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  fnScope.getFirstChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  fnScope.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  fnScope.getFirstChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
138	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  lastArg.getFirstChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  lastArg.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  lastArg.getFirstChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
139	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getString())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getString())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
140	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  ==  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
141	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
142	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >=  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >=  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >=  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
143	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  <  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  <  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  <  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
144	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  [Delete]  0)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  [Delete]  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  [Delete]  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
145	[BUG]  [BUGGY]  whilst((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
146	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
147	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
148	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
149	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getString().length()  ==  0)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild().getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
150	[BUG]  [BUGGY]  while(argList!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
151	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getLastChild().getString().equals( " "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getLastChild().getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getLastChild().getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
152	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getLastChild().getString().equals( "* "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getLastChild().getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getLastChild().getString().equals( "* "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
153	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getFirstChild().getString().equals( "   "))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getFirstChild().getString().equals( "   "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getFirstChild().getString().equals( "   "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
154	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getString().equals( "   "))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getString().equals( "   "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild().getString().equals( "   "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
155	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "* "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
156	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.getString().equals( "   "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.getString().equals( "   "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.getString().equals( "   "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
157	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "prototype "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "prototype "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
158	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "null "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
159	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  =  lastArg.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
160	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  <  argList.getLastChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  <  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  <  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
161	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg.getFirstChild()  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg.getFirstChild()  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg.getFirstChild()  =  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
162	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  =  lastArg.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
163	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getLastChild()  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getLastChild()  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getLastChild()  =  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
164	[BUG]  [BUGGY]  fnScope.removeChild(argList);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.removeChild(argList);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.removeChild(argList);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
165	[BUG]  [BUGGY]  fnScope.replaceChild(argList,  lastArg);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.replaceChild(argList,  lastArg);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.replaceChild(argList,  lastArg);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
166	[BUG]  [BUGGY]  fnScope.removeChild(varList);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.removeChild(varList);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.removeChild(varList);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
167	[BUG]  [BUGGY]  fnScope.removeChild(parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.removeChild(parent);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.removeChild(parent);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
168	[BUG]  [BUGGY]  fnScope.removeChild(nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.removeChild(nameNode);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.removeChild(nameNode);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
169	[BUG]  [BUGGY]  fnScope.removeChild(lastArg.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.removeChild(lastArg.getString());  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.removeChild(lastArg.getString());	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
170	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
171	[BUG]  [BUGGY]  while(fnScope.getLastChild()!=  null  &&  lastArg.getString().equals( "   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getLastChild()!=  null  &&  lastArg.getString().equals( "   "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getLastChild()!=  null  &&  lastArg.getString().equals( "   "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
172	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
173	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "/ "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "/ "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
174	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	17	None	replace
175	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  argList.getString().equals( "* "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  argList.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  argList.getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	67	None	replace
176	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	1	None	replace
177	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	1	None	replace
178	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "/ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "/ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	1	None	replace
179	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "_ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	1	None	replace
180	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg.getFirstChild()!=  null))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg.getFirstChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg.getFirstChild()!=  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
181	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getLastChild()!=  null))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getLastChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getLastChild()!=  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
182	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
183	[BUG]  [BUGGY]  while(fnScope!=  null  &&(argList.getFirstChild()!=  null))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope!=  null  &&(argList.getFirstChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope!=  null  &&(argList.getFirstChild()!=  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
184	[BUG]  [BUGGY]  while(lastArg!=  null  &&(fnScope.getFirstChild()!=  null))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(fnScope.getFirstChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(fnScope.getFirstChild()!=  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
185	[BUG]  [BUGGY]  lastArg  =  fnScope.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  fnScope.getFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  fnScope.getFirstChild();	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
186	[BUG]  [BUGGY]  lastArg  =  scope.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  scope.getLastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  scope.getLastChild();	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
187	[BUG]  [BUGGY]  lastArg  =  parentScope.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  parentScope.getLastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  parentScope.getLastChild();	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
188	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  fnScope.getLastChild()  +  1;  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  fnScope.getLastChild()  +  1;	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
189	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  fnScope.getLastChild().getString();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  fnScope.getLastChild().getString();	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
190	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "* "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "* "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
191	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "/ "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "/ "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
192	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
193	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "prototype "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
194	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "- "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "- "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "- "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
195	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "_ "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
196	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  argList.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  argList.getLastChild())  {	  while(lastArg.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	29	None	replace
197	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg.getLastChild())  {	  while(lastArg.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	29	None	replace
198	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	15	None	replace
199	[BUG]  [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	15	None	replace
200	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	15	None	replace
201	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	36	None	replace
202	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	36	None	replace
203	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	36	None	replace
204	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
205	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
206	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
207	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
208	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  ||  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  ||  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  ||  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
209	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
210	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&!referenced.contains(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
211	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  lastArg  &&!referenced.contains(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  lastArg  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  lastArg  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
212	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
213	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  lastArg  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  lastArg  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  lastArg  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
214	[BUG]  [BUGGY]  while(fnScope.getLastChild()!=  lastArg)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getLastChild()!=  lastArg)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getLastChild()!=  lastArg)  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
215	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  fnScope.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  fnScope.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  fnScope.getFirstChild())  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
216	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  fnScope.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  fnScope.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  fnScope.getLastChild())  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
217	[BUG]  [BUGGY]  while(fnScope.getFirstChild()  ==  lastArg)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()  ==  lastArg)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()  ==  lastArg)  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
218	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  lastArg  &&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  lastArg  &&  isPropertyAssign)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  lastArg  &&  isPropertyAssign)  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
219	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
220	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
221	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
222	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
223	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
224	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
225	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  fnScope.getLastChild().getNext();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.getLastChild().getNext();	  Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	40	None	replace
226	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getFirstChild())  ==  null)  {	  while((    lastArg    =    fnScope.getLastChild())    ==    null)    {    	non-compiled	[CE]  	19	None	replace
227	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())    ==    null)    {    	non-compiled	[CE]  	19	None	replace
228	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())  ==  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())  ==  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())    ==    null)    {    	non-compiled	[CE]  	34	None	replace
229	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
230	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "* "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
231	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "prototype "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "prototype "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
232	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "/ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "/ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
233	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "- "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "- "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "- "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
234	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "_ "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( "_ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
235	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
236	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
237	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
238	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
239	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isName(lastArg))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isName(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isName(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
240	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isVar(lastArg))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isVar(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isVar(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
241	[BUG]  [BUGGY]  whilst((  lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst((  lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  lastArg  =  argList.getLastChild())  ==  null)  {	  whilst((    lastArg    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	59	None	replace
242	[BUG]  [BUGGY]  whilst((  lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst((  lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  lastArg  =  argList.getLastChild())!=  null)  {	  whilst((    lastArg    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	59	None	replace
243	[BUG]  [BUGGY]  whilst((  lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst((  lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  lastArg  =  argList.getFirstChild())!=  null)  {	  whilst((    lastArg    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	59	None	replace
244	[BUG]  [BUGGY]  whilst((  argList  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst((  argList  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  argList  =  argList.getFirstChild())!=  null)  {	  whilst((    lastArg    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	59	None	replace
245	[BUG]  [BUGGY]  while((  lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
246	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
247	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
248	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
249	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isVar(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isVar(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isVar(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
250	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
251	[BUG]  [BUGGY]  while((  argList  =  parentScope.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  parentScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  parentScope.getLastChild())!=  null)  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
252	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  ==  0)  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
253	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  ||(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  ||(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  ||(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()    ==    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	35	None	replace
254	[BUG]  [BUGGY]  Node  lastArg  =  argList.getfirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.getfirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getfirstChild();	  Node    lastArg    =    parentScope.getLastChild();    	non-compiled	[CE]  	43	None	replace
255	[BUG]  [BUGGY]  while(argList!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
256	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
257	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
258	[BUG]  [BUGGY]  while(argList!=  null  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
259	[BUG]  [BUGGY]  while(argList!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
260	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
261	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "/ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "/ "))  {	  while(lastArg.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	52	None	replace
262	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().equals( "   "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().equals( "   "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&  lastArg.getString().equals( "   "))  {	  while(lastArg.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	52	None	replace
263	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
264	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
265	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().startsWith( "_ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().startsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().startsWith( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
266	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "._ "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "._ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "._ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
267	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
268	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().endsWith( "_ "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
269	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondarySideEffects(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
270	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
271	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
272	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
273	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isObjectCall(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
274	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
275	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
276	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&!referenced.contains(lastArg.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&!referenced.contains(lastArg.getString()))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&!referenced.contains(lastArg.getString()))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
277	[BUG]  [BUGGY]  while(scope.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(scope.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(scope.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
278	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
279	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
280	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
281	[BUG]  [BUGGY]  Node  lastArg  =  getLastChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  getLastChild().getNext();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  getLastChild().getNext();	  Node    lastArg    =    getLastChild();    	non-compiled	[CE]  	74	None	replace
282	[BUG]  [BUGGY]  Node  lastArg  =  getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  getFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  getFirstChild();	  Node    lastArg    =    getLastChild();    	non-compiled	[CE]  	74	None	replace
283	[BUG]  [BUGGY]  Node  lastArg  =  getLastChild().cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  getLastChild().cloneTree();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  getLastChild().cloneTree();	  Node    lastArg    =    getLastChild();    	non-compiled	[CE]  	74	None	replace
284	[BUG]  [BUGGY]  Node  lastArg  =  getLastChild().getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  getLastChild().getString();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  getLastChild().getString();	  Node    lastArg    =    getLastChild();    	non-compiled	[CE]  	74	None	replace
285	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())  ==  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())  ==  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
286	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getString())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  fnScope.getString())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
287	[BUG]  [BUGGY]  while(fnScope!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
288	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg.getFirstChild()  ==  null))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg.getFirstChild()  ==  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg.getFirstChild()  ==  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
289	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getLastChild()  ==  null))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getLastChild()  ==  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getLastChild()  ==  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
290	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.FUNCTION))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
291	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.VAR))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.VAR))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.VAR))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
292	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||!referenced.contains(lastArg)))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||!referenced.contains(lastArg)))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||!referenced.contains(lastArg)))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
293	[BUG]  [BUGGY]  while(fnScope!=  null  &&(argList.getFirstChild()  ==  null))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope!=  null  &&(argList.getFirstChild()  ==  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope!=  null  &&(argList.getFirstChild()  ==  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
294	[BUG]  [BUGGY]  while(argList.getLastChild()!=  lastArg.getString())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  lastArg.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  lastArg.getString())  {	  while(argList.getLastChild()!=    lastArg)    {    	non-compiled	[CE]  	32	None	replace
295	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  argList.getFirstChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  argList.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  argList.getFirstChild())  {	  while(argList.getLastChild()!=    lastArg)    {    	non-compiled	[CE]  	32	None	replace
296	[BUG]  [BUGGY]  Node  lastArg  =  function.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  function.getFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  function.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	41	None	replace
297	[BUG]  [BUGGY]  Node  lastArg  =  parent.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  parent.getLastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  parent.getLastChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	41	None	replace
298	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
299	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
300	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
301	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
302	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
303	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "* "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "* "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
304	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "/ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "/ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "/ "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
305	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "null "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
306	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "_ "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "_ "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
307	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild().getString().equals( "* "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild().getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getLastChild().getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "*   "))    {    	non-compiled	[CE]  	8	None	replace
308	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  null  &&  argList.getString().equals( "* "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  null  &&  argList.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  null  &&  argList.getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "*   "))    {    	non-compiled	[CE]  	8	None	replace
309	[BUG]  [BUGGY]  while(fnScope.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "*   "))    {    	non-compiled	[CE]  	8	None	replace
310	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getFirstChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  argList.getFirstChild())  {	  while(argList.getFirstChild()    ==    lastArg)    {    	non-compiled	[CE]  	33	None	replace
311	[BUG]  [BUGGY]  while(lastArg.getLastChild()  ==  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()  ==  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()  ==  null  &&  argList.getString().equals( " "))  {	  while(argList.getLastChild()    ==    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	53	None	replace
312	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()    ==    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	53	None	replace
313	[BUG]  [BUGGY]  Node  lastArg  =  nameNode.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  nameNode.getLastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  nameNode.getLastChild();	  Node    lastArg    =    parentScope.getLastChild();    	non-compiled	[CE]  	43	None	replace
314	[BUG]  [BUGGY]  Node  lastArg  =  argList.getlastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.getlastChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getlastChild();	  Node    lastArg    =    parentScope.getLastChild();    	non-compiled	[CE]  	43	None	replace
315	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "null "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
316	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  argList.getLastChild().getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  argList.getLastChild().getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  argList.getLastChild().getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
317	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	67	None	replace
318	[BUG]  [BUGGY]  while(argList.getLastChild()  ==  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()  ==  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()  ==  null  &&  argList.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	67	None	replace
319	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  fnScope.getLastChild().getNext();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  fnScope.getLastChild().getNext();	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
320	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg.getString())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg.getString())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
321	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getString())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  argList.getString())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
322	[BUG]  [BUGGY]  fnScope.detachFromParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.detachFromParent();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.detachFromParent();	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
323	[BUG]  [BUGGY]  while(lastArg!=  null  &&(parent.getFirstChild()!=  null))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(parent.getFirstChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(parent.getFirstChild()!=  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
324	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	52	None	replace
325	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	52	None	replace
326	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  argList.getLastChild()!=  argList.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  argList.getLastChild()!=  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  argList.getLastChild()!=  argList.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
327	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
328	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isFunctionDeclaration(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isFunctionDeclaration(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isFunctionDeclaration(lastArg))  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
329	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isAssignmentOp(lastArg))  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
330	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "- "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "- "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
331	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
332	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getFirstChild()!=  argList.getFirstChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
333	[BUG]  [BUGGY]  while(lastArg.getNext()!=  argList.getNext())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getNext()!=  argList.getNext())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getNext()!=  argList.getNext())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
334	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  argList.getLastChild())!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
335	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  <  argList.getLastChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  <  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  <  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
336	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
337	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.hasFunctionObjectCall(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.hasFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.hasFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
338	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isVar(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isVar(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isVar(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
339	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(parent))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(parent))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(parent))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
340	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  fnScope.getLastChild()  +  1;  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.getLastChild()  +  1;	  Node    lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	40	None	replace
341	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(var))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
342	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
343	[BUG]  [BUGGY]  Node  lastArg  =  argList.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.removeFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.removeFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	41	None	replace
344	[BUG]  [BUGGY]  Node  lastArg  =  parent.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  parent.getFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  parent.getFirstChild();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	41	None	replace
345	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.hasVar(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.hasVar(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.hasVar(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())    ==    null)    {    	non-compiled	[CE]  	19	None	replace
346	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
347	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
348	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  argList.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
349	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
350	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(parent  =  argList.getLastChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&(parent  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(parent  =  argList.getLastChild())!=  null)  {	  while(argList.hasChildren()    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	58	None	replace
351	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getLastChild()!=  null  &&  argList.getString().equals( " "))  {	  while(lastArg.getLastChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	9	None	replace
352	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	14	None	replace
353	[BUG]  [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
354	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
355	[BUG]  [BUGGY]  while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
356	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getFirstChild()!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getFirstChild()!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  ||  lastArg.getFirstChild()!=  null)  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
357	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION)  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
358	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
359	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
360	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  fnScope.getParent();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  fnScope.getParent();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
361	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
362	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "*   "))    {    	non-compiled	[CE]  	8	None	replace
363	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "*   "))    {    	non-compiled	[CE]  	8	None	replace
364	[BUG]  [BUGGY]  while((  argList  =  parentScope.getFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  parentScope.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  parentScope.getFirstChild())!=  null)  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
365	[BUG]  [BUGGY]  while((  argList  =  fnScope.getParent())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getParent())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getParent())!=  null)  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
366	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
367	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
368	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "- "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "- "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "- "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
369	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().equals(   "null   "))    {    	non-compiled	[CE]  	6	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(canHaveSecondarySideEffects);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects,  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects,  isPropertyAssign);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(canHaveSecondarySideEffects,  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!referenced.contains(lastArg));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||!referenced.contains(lastArg));  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(isPropertyAssign  ||!referenced.contains(lastArg));	  Preconditions.checkState(isPropertyAssign);    	non-compiled	[CE]  	45	None	replace
373	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  argList)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  argList)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  argList)  {	  while(argList.getFirstChild()    ==    lastArg)    {    	non-compiled	[CE]  	33	None	replace
374	[BUG]  [BUGGY]  while(argList.getLastChild()  ==  lastArg)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()  ==  lastArg)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()  ==  lastArg)  {	  while(argList.getFirstChild()    ==    lastArg)    {    	non-compiled	[CE]  	33	None	replace
375	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
376	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
377	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getLastChild()  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
378	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&!referenced.contains(var))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
379	[BUG]  [BUGGY]  while(argList.hasChildren()  &&!referenced.contains(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	56	None	replace
380	[BUG]  [BUGGY]  while(lastArg!=  null  &&(parent.getFirstChild()  ==  null))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(parent.getFirstChild()  ==  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(parent.getFirstChild()  ==  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
381	[BUG]  [BUGGY]  while(lastArg!=  null  &&(fnScope.getFirstChild()  ==  null))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(fnScope.getFirstChild()  ==  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(fnScope.getFirstChild()  ==  null))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
382	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  =  fnScope.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
383	[BUG]  [BUGGY]  while(argList!=  null  &&(parentScope  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(parentScope  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(parentScope  =  fnScope.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
384	[BUG]  [BUGGY]  while(argList!=  null  &&(parentScope.getLastChild()  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(parentScope.getLastChild()  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(parentScope.getLastChild()  =  fnScope.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
385	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
386	[BUG]  [BUGGY]  while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
387	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().length()  ==  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
388	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
389	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getFirstChild()  ||!referenced.contains(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getFirstChild()  ||!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getFirstChild()  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
390	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "._ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "._ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "._ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
391	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getFirstChild()!=  argList.getLastChild())  {	  while(lastArg.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	29	None	replace
392	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  ||  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  ||  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getLastChild()  ||  lastArg.getType()  ==  Token.FUNCTION)  {	  while(lastArg.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	29	None	replace
393	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
394	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getLastChild().getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
395	[BUG]  [BUGGY]  while((  argList  =  fnScope.getVar(lastArg.getString())!=  null))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getVar(lastArg.getString())!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getVar(lastArg.getString())!=  null))  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
396	[BUG]  [BUGGY]  while(fnScope!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(fnScope!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
397	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  lastArg)&&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  lastArg)&&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  lastArg)&&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	36	None	replace
398	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {	  while(argList!=    null    &&(argList    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	24	None	replace
399	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg.getLastChild()!=  null))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg.getLastChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg.getLastChild()!=  null))  {	  while(argList!=    null    &&(argList    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	24	None	replace
400	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  argList.getString())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  argList.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  argList.getString())  {	  while(argList.getLastChild()!=    lastArg)    {    	non-compiled	[CE]  	32	None	replace
401	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  argList.getLowerCase())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  argList.getLowerCase())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  argList.getLowerCase())  {	  while(argList.getLastChild()!=    lastArg)    {    	non-compiled	[CE]  	32	None	replace
402	[BUG]  [BUGGY]  while(parentScope.getFirstChild()!=  lastArg)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(parentScope.getFirstChild()!=  lastArg)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(parentScope.getFirstChild()!=  lastArg)  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
403	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()!=  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()!=  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()!=  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
404	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  argList.getString().length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  argList.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  argList.getString().length()  >  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
405	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isName(lastArg))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isName(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isName(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
406	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()!=  null))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()!=  null))  {	  while(argList!=    null    &&(argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	21	None	replace
407	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
408	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.VAR  &&  lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
409	[BUG]  [BUGGY]  while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg  ==  null  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
410	[BUG]  [BUGGY]  while(lastArg!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
411	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
412	[BUG]  [BUGGY]  while(argList.getLastChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
413	[BUG]  [BUGGY]  while(argList.nextChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.nextChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.nextChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
414	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
415	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getLastChild()  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
416	[BUG]  [BUGGY]  while(lastArg!=  argList.getFirstChild()  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  argList.getFirstChild()  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  argList.getFirstChild()  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
417	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  lastArg  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  lastArg  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  lastArg  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	64	None	replace
418	[BUG]  [BUGGY]  while((  argList  =  varList.getFirstChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  varList.getFirstChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  varList.getFirstChild())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	50	None	replace
419	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  null)  {	  while(argList.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	55	None	replace
420	[BUG]  [BUGGY]  while((  lastArg  =  argList.removeFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.removeFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.removeFirstChild())!=  null)  {	  while((    lastArg    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	17	None	replace
421	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())  ==  null)  {	  while((    lastArg    =    fnScope.getLastChild())    ==    null)    {    	non-compiled	[CE]  	19	None	replace
422	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())  ==  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())  ==  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())  ==  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())    ==    null)    {    	non-compiled	[CE]  	19	None	replace
423	[BUG]  [BUGGY]  whilst((  lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  whilst((  lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  lastArg  =  fnScope.getLastChild())!=  null)  {	  while((    lastArg    =    fnScope.getLastChild())    ==    null)    {    	non-compiled	[CE]  	19	None	replace
424	[BUG]  [BUGGY]  while(lastArg.getString()!=  null  &&  lastArg.getLastChild().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getString()!=  null  &&  lastArg.getLastChild().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getString()!=  null  &&  lastArg.getLastChild().equals( " "))  {	  while(lastArg.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	7	None	replace
425	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "_ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( "_ "))  {	  while(lastArg.getFirstChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	52	None	replace
426	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
427	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
428	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getFirstChild()!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getFirstChild()!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getFirstChild()!=  null  &&  argList.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
429	[BUG]  [BUGGY]  while(argList.hasChildren()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.hasChildren()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	4	None	replace
430	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  function.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  function.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  function.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
431	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  argList.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  argList.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
432	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild())  {	  while(argList.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	31	None	replace
433	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while((    argList    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	14	None	replace
434	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
435	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
436	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  fnScope.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	25	None	replace
437	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg.getString()  ||  argList.getFirstChild()!=  lastArg.getString())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  lastArg.getString()  ||  argList.getFirstChild()!=  lastArg.getString())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg.getString()  ||  argList.getFirstChild()!=  lastArg.getString())  {	  while(argList.getFirstChild()!=    lastArg.getString())    {    	non-compiled	[CE]  	30	None	replace
438	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().equals( " "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
439	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "var "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "var "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "var "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
440	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "_ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "_ "))  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	62	None	replace
441	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
442	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondaryFunctionObjectCall(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondaryFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondaryFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
443	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
444	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondaryCall(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondaryCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.mayHaveSecondaryCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	78	None	replace
445	[BUG]  [BUGGY]  lastArg  =  fnScope.removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  lastArg  =  fnScope.removeFirstChild();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  fnScope.removeFirstChild();	  lastArg    =    fnScope.getLastChild();    	non-compiled	[CE]  	72	None	replace
446	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  null))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  ==  null))  {	  while(argList!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	26	None	replace
447	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  lastArg))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  ==  lastArg))  {	  while(argList!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	26	None	replace
448	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().length()  ==  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
449	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
450	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().length()  >  0)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    ==    0)    {    	non-compiled	[CE]  	5	None	replace
451	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
452	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
453	[BUG]  [BUGGY]  while(argList.size()  ==  0  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.size()  ==  0  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.size()  ==  0  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null    &&    argList.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	76	None	replace
454	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " ")))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " ")))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " ")))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
455	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " ")))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " ")))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " ")))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
456	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getString().equals( " ")))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getString().equals( " ")))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getString().equals( " ")))  {	  while(lastArg!=    null    &&(argList.getFirstChild()!=    null))    {    	non-compiled	[CE]  	68	None	replace
457	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "var "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "var "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "var "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
458	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "_ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "_ "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
459	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "node "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "node "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( "node "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	79	None	replace
460	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  ||  lastArg.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  ||  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  ||  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()    ==    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	53	None	replace
461	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getLastChild().getString().equals( "null "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getLastChild().getString().equals( "null "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getLastChild().getString().equals( "null "))  {	  while(lastArg!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	10	None	replace
462	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "var "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "var "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().equals( "var "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	66	None	replace
463	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
464	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&  NodeUtil.isExpressionNode(lastArg))  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
465	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getNext())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    lastArg    =    argList.getNext())!=    null)    {    	non-compiled	[CE]  	47	None	replace
466	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
467	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
468	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
469	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	39	None	replace
470	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
471	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
472	[BUG]  [BUGGY]  Node  lastArg  =  isPropertyAssign?  getLastChild()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  isPropertyAssign?  getLastChild()  :  null;  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  isPropertyAssign?  getLastChild()  :  null;	  Node    lastArg    =    getLastChild();    	non-compiled	[CE]  	74	None	replace
473	[BUG]  [BUGGY]  Node  lastArg  =  argList.cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.cloneTree();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.cloneTree();	  Node    lastArg    =    argList.getFirstChild();    	non-compiled	[CE]  	41	None	replace
474	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
475	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectApply(lastArg))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	81	None	replace
476	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.mayHaveSideEffects(lastArg))  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    NodeUtil.isFunctionObjectCall(lastArg))    {    	non-compiled	[CE]  	70	None	replace
477	[BUG]  [BUGGY]  fnScope.replaceChild(argList,  new  Node(Token.EMPTY));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.replaceChild(argList,  new  Node(Token.EMPTY));  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.replaceChild(argList,  new  Node(Token.EMPTY));	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
478	[BUG]  [BUGGY]  fnScope.replaceChild(lastArg,  argList);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  fnScope.replaceChild(lastArg,  argList);  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.replaceChild(lastArg,  argList);	  fnScope.removeChild(lastArg);    	non-compiled	[CE]  	48	None	replace
479	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(argList.getLastChild()  ==  lastArg)&&!referenced.contains(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(argList.getLastChild()  ==  lastArg)&&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(argList.getLastChild()  ==  lastArg)&&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
480	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg)!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg)!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg)!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
481	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(argList.getLastChild()!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(argList.getLastChild()!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(argList.getLastChild()!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null    &&!referenced.contains(lastArg))    {    	non-compiled	[CE]  	80	None	replace
482	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
483	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
484	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "._ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "._ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getString()  &&  lastArg.getString().endsWith( "._ "))  {	  while(argList.getFirstChild()!=    lastArg    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	65	None	replace
485	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
486	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
487	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList!=    null    &&(lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	23	None	replace
488	[BUG]  [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getNext())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()  ==  argList.getNext())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()  ==  argList.getNext())  {	  while(argList.getFirstChild()    ==    lastArg)    {    	non-compiled	[CE]  	33	None	replace
489	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().length()  >  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
490	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().length()  ==  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().length()  ==  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  argList.getString().length()  ==  0)  {	  while((    argList    =    argList.getFirstChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	63	None	replace
491	[BUG]  [BUGGY]  while(argList  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	22	None	replace
492	[BUG]  [BUGGY]  While(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  While(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	While(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(argList!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	22	None	replace
493	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "var "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "var "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( "var "))  {	  while((    lastArg    =    argList.getFirstChild())!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	82	None	replace
494	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  argList.size())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getLastChild()!=  argList.size())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  argList.size())  {	  while(argList.getLastChild()!=    lastArg)    {    	non-compiled	[CE]  	32	None	replace
495	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
496	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
497	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().endsWith( "__ "))  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
498	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    argList    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	49	None	replace
499	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().endsWith( "__ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
500	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().endsWith( "__ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().endsWith( "__ "))  {	  while(argList.getFirstChild()!=    null    &&    lastArg.getString().endsWith(   "_   "))    {    	non-compiled	[CE]  	77	None	replace
501	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().endsWith( "__ "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().endsWith( "__ "))  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
502	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().endsWith( "_ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().endsWith( "_ "))  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
503	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getLastChild().getString().length()  >  0)  {	  while(lastArg.getFirstChild()!=    null)    {    	non-compiled	[CE]  	2	None	replace
504	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while    ((    lastArg    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	16	None	replace
505	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getFirstChild().getString().length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getFirstChild().getString().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getFirstChild().getString().length()  >  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
506	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getValue().length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getValue().length()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getValue().length()  >  0)  {	  while((    lastArg    =    fnScope.getLastChild())!=    null    &&    lastArg.getString().length()    >    0)    {    	non-compiled	[CE]  	71	None	replace
507	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.contains(lastArg.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.contains(lastArg.getString()))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.contains(lastArg.getString()))  {	  while((    argList    =    lastArg.getFirstChild())!=    null)    {    	non-compiled	[CE]  	13	None	replace
508	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.size()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.size()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null  &&  argList.size()  >  0)  {	  while((    argList    =    lastArg.getFirstChild())!=    null)    {    	non-compiled	[CE]  	13	None	replace
509	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  argList.getNext())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())  ==  null)  {	  while((    argList    =    argList.getFirstChild())    ==    null)    {    	non-compiled	[CE]  	18	None	replace
510	[BUG]  [BUGGY]  Node  argScope  =  fnScope.getScope();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  argScope  =  fnScope.getScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  argScope  =  fnScope.getScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
511	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getFunctionScope();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  fnScope  =  fnScope.getFunctionScope();  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  fnScope.getFunctionScope();	  Node    fnScope    =    fnScope.getScope();    	non-compiled	[CE]  	73	None	replace
512	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&(argList  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	36	None	replace
513	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  arglist.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  arglist.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  arglist.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    lastArg.getLastChild())!=    null)    {    	non-compiled	[CE]  	36	None	replace
514	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList.getLastChild()!=  null))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&(argList.getLastChild()!=  null))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&(argList.getLastChild()!=  null))  {	  while(fnScope.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	38	None	replace
515	[BUG]  [BUGGY]  While(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  While(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	While(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()    ==    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	35	None	replace
516	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  ||(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  ||(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  ||(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()    ==    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	35	None	replace
517	[BUG]  [BUGGY]  while(argList.size()  ==  0  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.size()  ==  0  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.size()  ==  0  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()    ==    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	35	None	replace
518	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  argList.getFirstChild())  ==  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList  =  argList.getFirstChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  argList.getFirstChild())  ==  null)  {	  while(argList!=    null    &&(argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	21	None	replace
519	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  argList.getLastChild())!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  ==  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
520	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  argList.getLastChild())!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  argList.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
521	[BUG]  [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&(argList.getFirstChild()  ==  lastArg.getLastChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList.getFirstChild()  ==  lastArg.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList.getFirstChild()    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	54	None	replace
522	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getNext())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getNext())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getNext())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
523	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  function.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  function.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  function.getFirstChild())  {	  while(lastArg.getFirstChild()!=    argList.getFirstChild())    {    	non-compiled	[CE]  	28	None	replace
524	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  lastArg  ||!referenced.contains(lastArg))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  lastArg  ||!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  lastArg  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg    ||!referenced.contains(lastArg))    {    	non-compiled	[CE]  	60	None	replace
525	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
526	[BUG]  [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getLastChild()!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getLastChild()!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getType()  ==  Token.FUNCTION  &&  argList.getLastChild()!=  null)  {	  while(argList.getLastChild()!=    null)    {    	non-compiled	[CE]  	57	None	replace
527	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( "* "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( "* "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  argList.getString().equals( "* "))  {	  while(lastArg.getLastChild()!=    null    &&    argList.getString().equals(   "   "))    {    	non-compiled	[CE]  	9	None	replace
528	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())    ==    null)    {    	non-compiled	[CE]  	34	None	replace
529	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  >=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  >=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  >=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())    ==    null)    {    	non-compiled	[CE]  	34	None	replace
530	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "var "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "var "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( "var "))  {	  while(argList.getFirstChild()!=    null    &&    argList.getLastChild().getString().equals(   "   "))    {    	non-compiled	[CE]  	75	None	replace
531	[BUG]  [BUGGY]  while(lastArg!=  fnScope.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  fnScope.getFirstChild())  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  fnScope.getFirstChild())  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
532	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  fnScope)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  fnScope)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  fnScope)  {	  while(fnScope.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	61	None	replace
533	[BUG]  [BUGGY]  while(argList!=  null  &&  argList.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList!=  null  &&  argList.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&  argList.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {	  while(lastArg!=    null    &&    argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	51	None	replace
534	[BUG]  [BUGGY]  while(argList.getLastChild()  ==  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getLastChild()  ==  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()  ==  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(argList.getLastChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	37	None	replace
535	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  ||!referenced.contains(lastArg))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  ||!referenced.contains(lastArg))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	55	None	replace
536	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(argList.getFirstChild()  ==  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	55	None	replace
537	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  ||  lastArg.getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild()  ||  lastArg.getString().equals( " "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getLastChild()  ||  lastArg.getString().equals( " "))  {	  while(lastArg.getFirstChild()!=    argList.getLastChild())    {    	non-compiled	[CE]  	29	None	replace
538	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getString().equals( " ")))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getString().equals( " ")))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getString().equals( " ")))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
539	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.STRING))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.STRING))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getType()  ==  Token.STRING))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
540	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getString().equals( "null ")))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getString().equals( "null ")))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getFirstChild().getString().equals( "null ")))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
541	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getLastChild().getString().equals( " ")))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getLastChild().getString().equals( " ")))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null  ||  argList.getLastChild().getString().equals( " ")))  {	  while(lastArg!=    null    &&(argList.getFirstChild()    ==    null))    {    	non-compiled	[CE]  	69	None	replace
542	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
543	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  argList.size()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null  &&  argList.size()  >  0)  {  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null  &&  argList.size()  >  0)  {	  while((    argList    =    fnScope.getFirstChild())!=    null)    {    	non-compiled	[CE]  	11	None	replace
544	[BUG]  [BUGGY]  Node  lastArg  =  argList.size()  >  1?  argList.getNext()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;      [BUGGY]  Node  lastArg  =  argList.size()  >  1?  argList.getNext()  :  null;  [BUGGY]      Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.size()  >  1?  argList.getNext()  :  null;	  Node    lastArg    =    argList.getNext();    	non-compiled	[CE]  	46	None	replace
