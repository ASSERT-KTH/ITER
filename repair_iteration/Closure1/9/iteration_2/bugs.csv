bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg.getFirstChild()!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  >  0)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().length()  ==  0)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().equals( "null "))  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  lastArg.getString().equals( "* "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  while(lastArg.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getLastChild()!=  null  &&  argList.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild().getString().equals( " "))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild().getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getLastChild().getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  fnScope.getFirstChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getFirstChild())!=  null)  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  while((  argList  =  argList.getLastChild())!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getLastChild())!=  null)  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  lastArg.getFirstChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  lastArg.getFirstChild())!=  null)  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  while((  argList  =  argList.getNext())!=  null)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getNext())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getNext())!=  null)  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&!referenced.contains(lastArg))  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  while  ((  lastArg  =  fnScope.getFirstChild())!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while  ((  lastArg  =  fnScope.getFirstChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while  ((  lastArg  =  fnScope.getFirstChild())!=  null)  {	  while    ((    lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())  ==  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  argList.getFirstChild())  ==  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())  ==  null)  {	  while    ((    lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())  ==  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getFirstChild())  ==  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())  ==  null)  {	  while((    lastArg    =    argList.getLastChild())    ==    null)    {    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())  ==  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  fnScope.getLastChild())  ==  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())  ==  null)  {	  while((    lastArg    =    argList.getLastChild())    ==    null)    {    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&(argList  =  argList.getFirstChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  argList.getFirstChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList!=  null  &&(argList  =  argList.getFirstChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  argList.getFirstChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(lastArg  =  argList.getFirstChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  lastArg.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList  =  fnScope.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  while(argList!=  null  &&(argList  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList!=  null  &&(argList  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList!=  null  &&(argList  =  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while  ((  lastArg  =  fnScope.getLastChild())!=  null  &&  parentScope.getVar(lastArg.getString())!=  null)  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getFirstChild())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg.getFirstChild()!=  argList.getFirstChild())  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getFirstChild())  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg.getFirstChild()!=  argList.getLastChild())  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  argList.getLastChild())  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg.getString())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  lastArg.getString())  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg.getString())  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  argList.getLastChild())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  argList.getLastChild())  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  argList.getLastChild())  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  while(argList.getLastChild()!=  lastArg)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getLastChild()!=  lastArg)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  lastArg)  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  lastArg)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()  ==  lastArg)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  lastArg)  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())  ==  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  lastArg.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
39	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  fnScope.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
40	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  fnScope.getLastChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.getLastChild();	      	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getFirstChild();	      	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  argList.getLastChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getLastChild();	      	non-compiled	[CE]  	5	None	replace
43	[BUG]  [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  parentScope.getLastChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  parentScope.getLastChild();	      	non-compiled	[CE]  	5	None	replace
44	[BUG]  [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  fnScope.getFirstChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  fnScope.getFirstChild();	      	non-compiled	[CE]  	5	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Preconditions.checkState(isPropertyAssign);  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Preconditions.checkState(isPropertyAssign);	      	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  Node  lastArg  =  argList.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  argList.getNext();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  argList.getNext();	      	non-compiled	[CE]  	5	None	replace
47	[BUG]  [BUGGY]  while((  lastArg  =  argList.getNext())!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  argList.getNext())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getNext())!=  null)  {	  while    ((    lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	1	None	replace
48	[BUG]  [BUGGY]  fnScope.removeChild(lastArg);  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  fnScope.removeChild(lastArg);  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	fnScope.removeChild(lastArg);	      	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  fnScope.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  fnScope.getLastChild())!=  null)  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&!referenced.contains(var))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&!referenced.contains(var))  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&  argList.getLastChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg.getFirstChild()!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  while(argList.getLastChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getLastChild()  ==  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()  ==  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  =  argList.getLastChild())!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  =  argList.getLastChild())!=  null)  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  while(argList.getFirstChild()  ==  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()  ==  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()  ==  null)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
57	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getLastChild()!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())!=  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.hasChildren()  &&(lastArg  =  argList.getLastChild())!=  null)  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  whilst((  lastArg  =  argList.getFirstChild())  ==  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  whilst((  lastArg  =  argList.getFirstChild())  ==  null)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	whilst((  lastArg  =  argList.getFirstChild())  ==  null)  {	  while((    lastArg    =    argList.getLastChild())    ==    null)    {    	non-compiled	[CE]  	10	None	replace
60	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  ||!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  while(fnScope.getFirstChild()!=  lastArg)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(fnScope.getFirstChild()!=  lastArg)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(fnScope.getFirstChild()!=  lastArg)  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  argList  =  argList.getFirstChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while((    argList    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
65	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  lastArg  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    lastArg)    {    	non-compiled	[CE]  	7	None	replace
66	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  while(argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getLastChild()!=  null  &&  argList.getString().equals( " "))  {	  while(argList.getLastChild()!=    null    &&    lastArg.getString().equals(   "   "))    {    	non-compiled	[CE]  	4	None	replace
68	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()!=  null))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()!=  null))  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(lastArg!=  null  &&(argList.getFirstChild()  ==  null))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(lastArg!=  null  &&(argList.getFirstChild()  ==  null))  {	  while(lastArg!=    null    &&(argList    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	3	None	replace
71	[BUG]  [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  fnScope.getLastChild())!=  null  &&  lastArg.getString().length()  >  0)  {	  while    ((    lastArg    =    fnScope.getLastChild())!=    null)    {    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  lastArg  =  fnScope.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  lastArg  =  fnScope.getLastChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	lastArg  =  fnScope.getLastChild();	      	non-compiled	[CE]  	5	None	replace
73	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getScope();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  fnScope  =  fnScope.getScope();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  fnScope  =  fnScope.getScope();	      	non-compiled	[CE]  	5	None	replace
74	[BUG]  [BUGGY]  Node  lastArg  =  getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  Node  lastArg  =  getLastChild();  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	Node  lastArg  =  getLastChild();	      	non-compiled	[CE]  	5	None	replace
75	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getLastChild().getString().equals( " "))  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
76	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  argList.getFirstChild().getType()  ==  Token.FUNCTION)  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
77	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&  lastArg.getString().endsWith( "_ "))  {	  while(argList.getFirstChild()!=    null)    {    	non-compiled	[CE]  	6	None	replace
78	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
79	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
80	[BUG]  [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while(argList.getFirstChild()!=  null  &&(lastArg  =  argList.getLastChild())!=  null  &&!referenced.contains(lastArg))  {	  while(argList.getFirstChild()!=    null    &&(lastArg    =    argList.getLastChild())!=    null)    {    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  NodeUtil.isFunctionObjectCall(lastArg))  {	  while    ((    lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	1	None	replace
82	[BUG]  [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;    [BUGGY]  while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {  [BUGGY]    Var  var  =  fnScope.getVar(lastArg.getString());  if  (!referenced.contains(var))  {  argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	while((  lastArg  =  argList.getFirstChild())!=  null  &&  lastArg.getString().equals( " "))  {	  while    ((    lastArg    =    argList.getFirstChild())!=    null)    {    	non-compiled	[CE]  	1	None	replace
