bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private boolean isRemovableVar(Var var) {  if (!removeGlobals && var.isGlobal()) { [BUGGY] return false; [BUGGY] }  if (referenced.contains(var)) { return false; }  if (codingConvention.isExported(var.getName())) { return false; [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] isRemovableVar [RETURN_TYPE] boolean  Var var [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope scope Var var CodingConvention codingConvention Node a assignNode c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isRemovableVar(Var var) {  if (!removeGlobals && var.isGlobal()) { [BUGGY] [BUGGY] return false; }  if (referenced.contains(var)) { return false; }  if (codingConvention.isExported(var.getName())) { return false; [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] isRemovableVar [RETURN_TYPE] boolean  Var var [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope scope Var var CodingConvention codingConvention Node a assignNode c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.6201736729460423	310	310	5	add	
3	[BUG] [BUGGY] argList.removeChild(lastArg); [FE] AssertionFailedError [CONTEXT] Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { [BUGGY] argList.removeChild(lastArg); [BUGGY] compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { [BUGGY] [BUGGY] argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	397	397	5	add	
5	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] AssertionFailedError [CONTEXT] Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); [BUGGY] compiler.reportCodeChange(); [BUGGY] } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); [BUGGY] [BUGGY] compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	398	398	5	add	
7	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT]  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } [BUGGY] } [BUGGY] } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } [BUGGY] [BUGGY] } } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.5976143046671968	402	402	5	add	
9	[BUG] [BUGGY] Var var = fnScope.getVar(lastArg.getString()); [FE] AssertionFailedError [CONTEXT] return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { [BUGGY] Var var = fnScope.getVar(lastArg.getString()); [BUGGY] if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { [BUGGY] [BUGGY] Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	395	395	5	add	
11	[BUG] [BUGGY] if (!referenced.contains(var)) { [FE] AssertionFailedError [CONTEXT] } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); [BUGGY] if (!referenced.contains(var)) { [BUGGY] argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); [BUGGY] [BUGGY] if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	add	
13	[BUG] [BUGGY] traverseFunction(n, scope); [FE] AssertionFailedError [CONTEXT] if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { [BUGGY] traverseFunction(n, scope); [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.37267799624996495	206	206	5	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { [BUGGY] [BUGGY] traverseFunction(n, scope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.37267799624996495	206	206	5	add	
15	[BUG] [BUGGY] assignedToUnknownValue = true; [FE] AssertionFailedError [CONTEXT] if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); assignedToUnknownValue = value != null && !NodeUtil.isLiteralValue(value, true); } else {   [BUGGY] assignedToUnknownValue = true; [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); assignedToUnknownValue = value != null && !NodeUtil.isLiteralValue(value, true); } else {   [BUGGY] [BUGGY] assignedToUnknownValue = true; } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3492151478847891	746	746	5	add	
17	[BUG] [BUGGY] while ((lastArg = argList.getLastChild()) != null) { [FE] AssertionFailedError [CONTEXT]  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; [BUGGY] while ((lastArg = argList.getLastChild()) != null) { [BUGGY] Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; [BUGGY] [BUGGY] while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	394	394	5	add	
19	[BUG] [BUGGY] } else { [FE] AssertionFailedError [CONTEXT] Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } [BUGGY] } else { [BUGGY] callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } [BUGGY] [BUGGY] } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3042903097250923	403	403	5	add	
21	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (value != null && var != null && isRemovableVar(var) && !NodeUtil.mayHaveSideEffects(value, compiler)) {    continuations.put(var, new Continuation(n, scope)); return; } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.30237157840738177	273	273	5	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (value != null && var != null && isRemovableVar(var) && !NodeUtil.mayHaveSideEffects(value, compiler)) {    continuations.put(var, new Continuation(n, scope)); return; } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.30237157840738177	273	273	5	add	
23	[BUG] [BUGGY] Node argList = getFunctionArgList(function); [FE] AssertionFailedError [CONTEXT]  Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } [BUGGY] Node argList = getFunctionArgList(function); [BUGGY] boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	388	388	5	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } [BUGGY] [BUGGY] Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	388	388	5	add	
25	[BUG] [BUGGY] boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); [FE] AssertionFailedError [CONTEXT] Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); [BUGGY] boolean modifyCallers = modifyCallSites  && callSiteOptimizer.canModifyCallers(function); [BUGGY] && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); [BUGGY] [BUGGY] boolean modifyCallers = modifyCallSites  && callSiteOptimizer.canModifyCallers(function); && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	389	390	5	add	
27	[BUG] [BUGGY] if (!modifyCallers) { [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); [BUGGY] if (!modifyCallers) { [BUGGY]  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	391	391	5	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); [BUGGY] [BUGGY] if (!modifyCallers) {  Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	391	391	5	add	
29	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	406	406	5	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	406	406	5	add	
31	[BUG] [BUGGY] return function.getFirstChild().getNext(); [FE] AssertionFailedError [CONTEXT] private static Node getFunctionArgList(Node function) { [BUGGY] return function.getFirstChild().getNext(); [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] getFunctionArgList [RETURN_TYPE] Node  Node function [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	413	413	5	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static Node getFunctionArgList(Node function) { [BUGGY] [BUGGY] return function.getFirstChild().getNext(); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] getFunctionArgList [RETURN_TYPE] Node  Node function [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.29361010975735174	413	413	5	add	
33	[BUG] [BUGGY] removeUnreferencedFunctionArgs(fnScope); [FE] AssertionFailedError [CONTEXT] Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null); traverseNode(root, null, scope); if (removeGlobals) { collectMaybeUnreferencedVars(scope); } interpretAssigns(); removeUnreferencedVars(); for (Scope fnScope : allFunctionScopes) { [BUGGY] removeUnreferencedFunctionArgs(fnScope); [BUGGY] } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void  Node root [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope scope CodingConvention codingConvention Node assignNode externs nameNode node root List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null); traverseNode(root, null, scope); if (removeGlobals) { collectMaybeUnreferencedVars(scope); } interpretAssigns(); removeUnreferencedVars(); for (Scope fnScope : allFunctionScopes) { [BUGGY] [BUGGY] removeUnreferencedFunctionArgs(fnScope); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void  Node root [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope scope CodingConvention codingConvention Node assignNode externs nameNode node root List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	add	
35	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] traverseNode(root, null, scope); if (removeGlobals) { collectMaybeUnreferencedVars(scope); } interpretAssigns(); removeUnreferencedVars(); for (Scope fnScope : allFunctionScopes) { removeUnreferencedFunctionArgs(fnScope); [BUGGY] } [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void  Node root [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope scope CodingConvention codingConvention Node assignNode externs nameNode node root List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] traverseNode(root, null, scope); if (removeGlobals) { collectMaybeUnreferencedVars(scope); } interpretAssigns(); removeUnreferencedVars(); for (Scope fnScope : allFunctionScopes) { removeUnreferencedFunctionArgs(fnScope); [BUGGY] [BUGGY] } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void  Node root [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope scope CodingConvention codingConvention Node assignNode externs nameNode node root List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	180	180	5	add	
37	[BUG] [BUGGY] Preconditions.checkState(n.getChildCount() == 3); [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { [BUGGY] Preconditions.checkState(n.getChildCount() == 3); [BUGGY] Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope);  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { [BUGGY] [BUGGY] Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope);  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	335	335	5	add	
39	[BUG] [BUGGY] Preconditions.checkState(n.isFunction()); [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); [BUGGY] Preconditions.checkState(n.isFunction()); [BUGGY]  final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); [BUGGY] [BUGGY] Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	336	336	5	add	
41	[BUG] [BUGGY] final Node body = n.getLastChild(); [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); [BUGGY] final Node body = n.getLastChild(); [BUGGY] Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); [BUGGY] [BUGGY] final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	add	
43	[BUG] [BUGGY] Preconditions.checkState(body.getNext() == null && body.isBlock()); [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); [BUGGY] Preconditions.checkState(body.getNext() == null &&   body.isBlock()); [BUGGY] body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); [BUGGY] [BUGGY] Preconditions.checkState(body.getNext() == null &&   body.isBlock()); body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	339	340	5	add	
45	[BUG] [BUGGY] Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); [BUGGY] Scope fnScope =  new SyntacticScopeCreator(compiler).createScope(n, parentScope); [BUGGY] new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); [BUGGY] [BUGGY] Scope fnScope =  new SyntacticScopeCreator(compiler).createScope(n, parentScope); new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	342	343	5	add	
47	[BUG] [BUGGY] traverseNode(body, n, fnScope); [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); [BUGGY] traverseNode(body, n, fnScope); [BUGGY]  collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	344	344	5	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseFunction(Node n, Scope parentScope) { Preconditions.checkState(n.getChildCount() == 3); Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); [BUGGY] [BUGGY] traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	344	344	5	add	
49	[BUG] [BUGGY] collectMaybeUnreferencedVars(fnScope); [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); [BUGGY] collectMaybeUnreferencedVars(fnScope); [BUGGY] allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkState(n.isFunction()); final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); [BUGGY] [BUGGY] collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	add	
51	[BUG] [BUGGY] allFunctionScopes.add(fnScope); [FE] AssertionFailedError [CONTEXT] final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); [BUGGY] allFunctionScopes.add(fnScope); [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	347	347	5	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); [BUGGY] [BUGGY] allFunctionScopes.add(fnScope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	347	347	5	add	
53	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); [BUGGY] } [BUGGY]  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final Node body = n.getLastChild(); Preconditions.checkState(body.getNext() == null && body.isBlock()); Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, parentScope); traverseNode(body, n, fnScope); collectMaybeUnreferencedVars(fnScope); allFunctionScopes.add(fnScope); [BUGGY] [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseFunction [RETURN_TYPE] void  Node n Scope parentScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope CodingConvention codingConvention Node a assignNode body c externs lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	348	348	5	add	
55	[BUG] [BUGGY] Node function = fnScope.getRootNode(); [FE] AssertionFailedError [CONTEXT]          [BUGGY] Node function = fnScope.getRootNode(); [BUGGY]  Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	380	380	5	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]          [BUGGY] [BUGGY] Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	380	380	5	add	
57	[BUG] [BUGGY] Preconditions.checkState(function.isFunction()); [FE] AssertionFailedError [CONTEXT]        Node function = fnScope.getRootNode(); [BUGGY] Preconditions.checkState(function.isFunction()); [BUGGY] if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]        Node function = fnScope.getRootNode(); [BUGGY] [BUGGY] Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	add	
59	[BUG] [BUGGY] if (NodeUtil.isGetOrSetKey(function.getParent())) { [FE] AssertionFailedError [CONTEXT]       Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); [BUGGY] if (NodeUtil.isGetOrSetKey(function.getParent())) { [BUGGY]  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]       Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); [BUGGY] [BUGGY] if (NodeUtil.isGetOrSetKey(function.getParent())) {  return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) {  Node lastArg; [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void  Scope fnScope [VARIABLES] Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Set referenced Scope fnScope parentScope scope Var var CodingConvention codingConvention Node a argList assignNode body c externs function lastArg lp n nameNode node parent root value List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero SimpleDefinitionFinder defFinder Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	383	383	5	add	
61	[BUG] [BUGGY] if (NodeUtil.isFunctionDeclaration(n)) { [FE] AssertionFailedError [CONTEXT] private void traverseNode(Node n, Node parent, Scope scope) { int type = n.getType(); Var var = null; switch (type) { case Token.FUNCTION:   [BUGGY] if (NodeUtil.isFunctionDeclaration(n)) { [BUGGY] var = scope.getVar(n.getFirstChild().getString()); } if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } return;  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseNode(Node n, Node parent, Scope scope) { int type = n.getType(); Var var = null; switch (type) { case Token.FUNCTION:   [BUGGY] [BUGGY] if (NodeUtil.isFunctionDeclaration(n)) { var = scope.getVar(n.getFirstChild().getString()); } if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } return;  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	199	199	5	add	
63	[BUG] [BUGGY] if (var != null && isRemovableVar(var)) { [FE] AssertionFailedError [CONTEXT] int type = n.getType(); Var var = null; switch (type) { case Token.FUNCTION:   if (NodeUtil.isFunctionDeclaration(n)) { var = scope.getVar(n.getFirstChild().getString()); } [BUGGY] if (var != null && isRemovableVar(var)) { [BUGGY] continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } return; case Token.ASSIGN: Assign maybeAssign = Assign.maybeCreateAssign(n); if (maybeAssign != null) {  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int type = n.getType(); Var var = null; switch (type) { case Token.FUNCTION:   if (NodeUtil.isFunctionDeclaration(n)) { var = scope.getVar(n.getFirstChild().getString()); } [BUGGY] [BUGGY] if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } return; case Token.ASSIGN: Assign maybeAssign = Assign.maybeCreateAssign(n); if (maybeAssign != null) {  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	203	203	5	add	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	208	208	5	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2817180849095055	208	208	5	add	
67	[BUG] [BUGGY] var = scope.getVar(n.getFirstChild().getString()); [FE] AssertionFailedError [CONTEXT] private void traverseNode(Node n, Node parent, Scope scope) { int type = n.getType(); Var var = null; switch (type) { case Token.FUNCTION:   if (NodeUtil.isFunctionDeclaration(n)) { [BUGGY] var = scope.getVar(n.getFirstChild().getString()); [BUGGY] } if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } return; case Token.ASSIGN: [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2760262237369417	200	200	5	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void traverseNode(Node n, Node parent, Scope scope) { int type = n.getType(); Var var = null; switch (type) { case Token.FUNCTION:   if (NodeUtil.isFunctionDeclaration(n)) { [BUGGY] [BUGGY] var = scope.getVar(n.getFirstChild().getString()); } if (var != null && isRemovableVar(var)) { continuations.put(var, new Continuation(n, scope)); } else { traverseFunction(n, scope); } return; case Token.ASSIGN: [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] traverseNode [RETURN_TYPE] void  Node n Node parent Scope scope [VARIABLES] Set referenced Var modifiedVar var Node a assignNode c externs lp n nameNode node parent root value SubclassRelationship subclassRelationship SimpleDefinitionFinder defFinder String className int type Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope scope CodingConvention codingConvention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign maybeAssign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.2760262237369417	200	200	5	add	
69	[BUG] [BUGGY] for (Assign assign : assignsByVar.get(var)) { [FE] AssertionFailedError [CONTEXT] private void removeAllAssigns(Var var) { [BUGGY] for (Assign assign : assignsByVar.get(var)) { [BUGGY] assign.remove(); compiler.reportCodeChange(); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeAllAssigns [RETURN_TYPE] void  Var var [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	776	776	5	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeAllAssigns(Var var) { [BUGGY] [BUGGY] for (Assign assign : assignsByVar.get(var)) { assign.remove(); compiler.reportCodeChange(); } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeAllAssigns [RETURN_TYPE] void  Var var [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	776	776	5	add	
71	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void removeAllAssigns(Var var) { for (Assign assign : assignsByVar.get(var)) { assign.remove(); compiler.reportCodeChange(); } [BUGGY] } [BUGGY]  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeAllAssigns [RETURN_TYPE] void  Var var [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	780	780	5	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeAllAssigns(Var var) { for (Assign assign : assignsByVar.get(var)) { assign.remove(); compiler.reportCodeChange(); } [BUGGY] [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeAllAssigns [RETURN_TYPE] void  Var var [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	780	780	5	add	
73	[BUG] [BUGGY] Var var = it.next(); [FE] AssertionFailedError [CONTEXT] private void removeUnreferencedVars() { CodingConvention convention = codingConvention; for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) { [BUGGY] Var var = it.next(); [BUGGY]    for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	805	805	5	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeUnreferencedVars() { CodingConvention convention = codingConvention; for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) { [BUGGY] [BUGGY] Var var = it.next();   for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	805	805	5	add	
75	[BUG] [BUGGY] for (Node exprCallNode : classDefiningCalls.get(var)) { [FE] AssertionFailedError [CONTEXT] private void removeUnreferencedVars() { CodingConvention convention = codingConvention; for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) { Var var = it.next();   [BUGGY] for (Node exprCallNode : classDefiningCalls.get(var)) { [BUGGY] NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	809	809	5	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void removeUnreferencedVars() { CodingConvention convention = codingConvention; for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) { Var var = it.next();   [BUGGY] [BUGGY] for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	809	809	5	add	
77	[BUG] [BUGGY] removeAllAssigns(var); [FE] AssertionFailedError [CONTEXT]   for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    [BUGGY] removeAllAssigns(var); [BUGGY]  compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	817	817	5	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    [BUGGY] [BUGGY] removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	817	817	5	add	
79	[BUG] [BUGGY] compiler.addToDebugLog("Unreferenced var: " + var.name); [FE] AssertionFailedError [CONTEXT] for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    removeAllAssigns(var); [BUGGY] compiler.addToDebugLog("Unreferenced var: " + var.name); [BUGGY] Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	819	819	5	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (Node exprCallNode : classDefiningCalls.get(var)) { NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    removeAllAssigns(var); [BUGGY] [BUGGY] compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	819	819	5	add	
81	[BUG] [BUGGY] Node nameNode = var.nameNode; [FE] AssertionFailedError [CONTEXT] NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); [BUGGY] Node nameNode = var.nameNode; [BUGGY] Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args");  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	820	820	5	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode); compiler.reportCodeChange(); }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); [BUGGY] [BUGGY] Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args");  [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	820	820	5	add	
83	[BUG] [BUGGY] Node toRemove = nameNode.getParent(); [FE] AssertionFailedError [CONTEXT] compiler.reportCodeChange(); }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; [BUGGY] Node toRemove = nameNode.getParent(); [BUGGY] Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); if (toRemove.isParamList() && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	821	821	5	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] compiler.reportCodeChange(); }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; [BUGGY] [BUGGY] Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); if (toRemove.isParamList() && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	821	821	5	add	
85	[BUG] [BUGGY] Node parent = toRemove.getParent(); [FE] AssertionFailedError [CONTEXT] }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); [BUGGY] Node parent = toRemove.getParent(); [BUGGY]  Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); if (toRemove.isParamList() && parent.isFunction()) { [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	822	822	5	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); [BUGGY] [BUGGY] Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); if (toRemove.isParamList() && parent.isFunction()) { [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	822	822	5	add	
87	[BUG] [BUGGY] Preconditions.checkState( toRemove.isVar() ||  toRemove.isFunction() || [FE] AssertionFailedError [CONTEXT]    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); [BUGGY] Preconditions.checkState(   toRemove.isVar() ||     toRemove.isFunction() || [BUGGY] toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); if (toRemove.isParamList() && parent.isFunction()) {   [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	824	826	5	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    removeAllAssigns(var); compiler.addToDebugLog("Unreferenced var: " + var.name); Node nameNode = var.nameNode; Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); [BUGGY] [BUGGY] Preconditions.checkState(   toRemove.isVar() ||     toRemove.isFunction() || toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); if (toRemove.isParamList() && parent.isFunction()) {   [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	824	826	5	add	
89	[BUG] [BUGGY] if (toRemove.isParamList() && parent.isFunction()) { [FE] AssertionFailedError [CONTEXT] Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); [BUGGY] if (toRemove.isParamList() &&   parent.isFunction()) { [BUGGY] parent.isFunction()) {   } else if (NodeUtil.isFunctionExpression(toRemove)) { if (!preserveFunctionExpressionNames) { toRemove.getFirstChild().setString(""); compiler.reportCodeChange(); }  } else if (parent != null && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	831	832	5	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node toRemove = nameNode.getParent(); Node parent = toRemove.getParent(); Preconditions.checkState( toRemove.isVar() || toRemove.isFunction() || toRemove.isParamList() && parent.isFunction(), "We should only declare vars and functions and function args"); [BUGGY] [BUGGY] if (toRemove.isParamList() &&   parent.isFunction()) { parent.isFunction()) {   } else if (NodeUtil.isFunctionExpression(toRemove)) { if (!preserveFunctionExpressionNames) { toRemove.getFirstChild().setString(""); compiler.reportCodeChange(); }  } else if (parent != null && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	831	832	5	add	
91	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] } else if (toRemove.isVar() && toRemove.getChildCount() > 1) {   toRemove.removeChild(nameNode); compiler.reportCodeChange(); } else if (parent != null) { NodeUtil.removeChild(parent, toRemove); compiler.reportCodeChange(); } [BUGGY] } [BUGGY] } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	866	866	5	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (toRemove.isVar() && toRemove.getChildCount() > 1) {   toRemove.removeChild(nameNode); compiler.reportCodeChange(); } else if (parent != null) { NodeUtil.removeChild(parent, toRemove); compiler.reportCodeChange(); } [BUGGY] [BUGGY] } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] removeUnreferencedVars [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c exprCallNode externs function lastArg lp n nameNode node param parent root toRemove value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.26919095102908275	866	866	5	add	
93	[BUG] [BUGGY] maybeUnreferenced.add(var); [FE] AssertionFailedError [CONTEXT] private void collectMaybeUnreferencedVars(Scope scope) { for (Iterator<Var> it = scope.getVars(); it.hasNext(); ) { Var var = it.next(); if (isRemovableVar(var)) { [BUGGY] maybeUnreferenced.add(var); [BUGGY] } } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] collectMaybeUnreferencedVars [RETURN_TYPE] void  Scope scope [VARIABLES] Set referenced Var var Node a assignNode body c externs lp n nameNode node parent root value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	358	358	5	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void collectMaybeUnreferencedVars(Scope scope) { for (Iterator<Var> it = scope.getVars(); it.hasNext(); ) { Var var = it.next(); if (isRemovableVar(var)) { [BUGGY] [BUGGY] maybeUnreferenced.add(var); } } } [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] collectMaybeUnreferencedVars [RETURN_TYPE] void  Scope scope [VARIABLES] Set referenced Var var Node a assignNode body c externs lp n nameNode node parent root value SimpleDefinitionFinder defFinder Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean isPropertyAssign mayHaveSecondarySideEffects maybeAliased modifyCallSites preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention Iterator it List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	358	358	5	add	
95	[BUG] [BUGGY] Var var = maybeUnreferenced.get(current); [FE] AssertionFailedError [CONTEXT] private void interpretAssigns() { boolean changes = false; do { changes = false;    for (int current = 0; current < maybeUnreferenced.size(); current++) { [BUGGY] Var var = maybeUnreferenced.get(current); [BUGGY] if (referenced.contains(var)) { maybeUnreferenced.remove(current); current--; } else { boolean assignedToUnknownValue = false; boolean hasPropertyAssign = false; if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	730	730	5	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void interpretAssigns() { boolean changes = false; do { changes = false;    for (int current = 0; current < maybeUnreferenced.size(); current++) { [BUGGY] [BUGGY] Var var = maybeUnreferenced.get(current); if (referenced.contains(var)) { maybeUnreferenced.remove(current); current--; } else { boolean assignedToUnknownValue = false; boolean hasPropertyAssign = false; if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	730	730	5	add	
97	[BUG] [BUGGY] if (referenced.contains(var)) { [FE] AssertionFailedError [CONTEXT] private void interpretAssigns() { boolean changes = false; do { changes = false;    for (int current = 0; current < maybeUnreferenced.size(); current++) { Var var = maybeUnreferenced.get(current); [BUGGY] if (referenced.contains(var)) { [BUGGY] maybeUnreferenced.remove(current); current--; } else { boolean assignedToUnknownValue = false; boolean hasPropertyAssign = false; if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); assignedToUnknownValue = value != null && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	731	731	5	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void interpretAssigns() { boolean changes = false; do { changes = false;    for (int current = 0; current < maybeUnreferenced.size(); current++) { Var var = maybeUnreferenced.get(current); [BUGGY] [BUGGY] if (referenced.contains(var)) { maybeUnreferenced.remove(current); current--; } else { boolean assignedToUnknownValue = false; boolean hasPropertyAssign = false; if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); assignedToUnknownValue = value != null && [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	731	731	5	add	
99	[BUG] [BUGGY] boolean assignedToUnknownValue = false; [FE] AssertionFailedError [CONTEXT] if (referenced.contains(var)) { maybeUnreferenced.remove(current); current--; } else { [BUGGY] boolean assignedToUnknownValue = false; [BUGGY] boolean hasPropertyAssign = false; if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); assignedToUnknownValue = value != null && !NodeUtil.isLiteralValue(value, true); } else {   [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	735	735	5	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (referenced.contains(var)) { maybeUnreferenced.remove(current); current--; } else { [BUGGY] [BUGGY] boolean assignedToUnknownValue = false; boolean hasPropertyAssign = false; if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) { Node value = var.getInitialValue(); assignedToUnknownValue = value != null && !NodeUtil.isLiteralValue(value, true); } else {   [CLASS] RemoveUnusedVars CallSiteOptimizer Continuation Assign [METHOD] interpretAssigns [RETURN_TYPE] void  [VARIABLES] Set referenced Var var Node a arg argList argParent assignNode body c externs function lastArg lp n nameNode node param parent root value SimpleDefinitionFinder defFinder int current Multimap assignsByVar classDefiningCalls continuations CallSiteOptimizer callSiteOptimizer AbstractCompiler compiler boolean assignedToUnknownValue canChangeSignature canModifyAllSites changeCallSignature changes hasFollowing hasPropertyAssign isPropertyAssign mayHaveSecondarySideEffects maybeAliased maybeEscaped modifyAllCallSites modifyCallSites modifyCallers preserveFunctionExpressionNames removeGlobals Scope fnScope parentScope scope CodingConvention codingConvention convention List allFunctionScopes maybeUnreferenced toRemove toReplaceWithZero Assign assign Map assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25649458802128855	735	735	5	add	
