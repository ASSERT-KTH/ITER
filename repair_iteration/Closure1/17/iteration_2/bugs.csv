bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  scope);	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope);	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  codingConvention);	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedVars(fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope);	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero);	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(scope);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(scope);	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  fnScope);	  removeUnreferencedFunctionArgs(fnScope,    fnScope);    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  fnScope);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedVars(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  fnScope);	  removeUnreferencedFunctionArgs(fnScope,    fnScope);    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  scope);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(fnScope,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  scope);	  removeUnreferencedFunctionArgs(fnScope,    fnScope);    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  scope);	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScopes(fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope);	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  codingConvention);	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero);	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope);	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	      	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	      	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(isPropertyAssign)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  node.removeChild(fnScope);  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  node.removeChild(fnScope);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  node.removeChild(fnScope);  }	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(isPropertyAssign)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }	      	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  scope);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(scope);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(scope);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  removeUnreferencedScope(scope);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(scope);	  removeUnreferencedScope(fnScope);    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  codingConvention);	  removeUnreferencedScope(fnScope);    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  fnScope);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  fnScope);	  removeUnreferencedScope(fnScope);    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  toReplaceWithZero);	  removeUnreferencedScope(fnScope);    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
38	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  scope);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScope(fnScope,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  scope);	  removeUnreferencedFunctionScope(fnScope);    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(scope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScope(scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(scope);	  removeUnreferencedFunctionScope(fnScope);    	non-compiled	[CE]  	3	None	replace
41	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  fnScope);	  removeUnreferencedFunctionScope(fnScope);    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  codingConvention);	  removeUnreferencedFunctionScope(fnScope);    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero);	  removeUnreferencedFunctionScope(fnScope);    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  scope);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctions(fnScope,  scope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  scope);	  removeUnreferencedFunctions(fnScope);    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention);	  removeUnreferencedFunctions(fnScope);    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  toReplaceWithZero);	  removeUnreferencedFunctions(fnScope);    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  fnScope);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctions(fnScope,  fnScope);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  fnScope);	  removeUnreferencedFunctions(fnScope);    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  root);	  removeUnreferencedFunctionArgs(fnScope,    fnScope);    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree());	  removeUnreferencedFunctionArgs(fnScope,    fnScope);    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getParent());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctions(fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getParent());	  removeUnreferencedFunctions(fnScope);    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getParent());	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
53	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent());	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  nameNode);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  true);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  true);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  true);	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getParent());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getParent());	  removeUnreferencedScope(fnScope);    	non-compiled	[CE]  	6	None	replace
57	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }	      	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	      	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	      	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(!isPropertyAssign)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	      	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes);	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree());	  removeUnreferencedFunctionVars(fnScope);    	non-compiled	[CE]  	10	None	replace
64	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.cloneTree());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedScope(fnScope.cloneTree());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.cloneTree());	  removeUnreferencedScope(fnScope);    	non-compiled	[CE]  	6	None	replace
65	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  fnScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree());	  removeUnreferencedFunctionAssigns(fnScope);    	non-compiled	[CE]  	9	None	replace
72	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree());	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
73	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getParent());	  removeUnreferencedFunctionScopes(fnScope);    	non-compiled	[CE]  	2	None	replace
74	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneTree);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneTree);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  cloneTree);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
75	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assign);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assign);  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	4	None	replace
76	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent());	  removeUnreferencedFunctionArgs(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
77	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {    [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent());  [BUGGY]    }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getParent());	  removeUnreferencedFunctionScope(fnScope);    	non-compiled	[CE]  	3	None	replace
