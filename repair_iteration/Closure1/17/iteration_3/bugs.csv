bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
2	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
3	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
4	[BUG]  [BUGGY]  For(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
5	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getParent(),  scope);	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
6	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent(),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getParent(),  fnScope);	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
7	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getNameNode());	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
8	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getFirstChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getFirstChild());	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
9	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getLastChild());	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
10	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent(),  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getParent(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getParent(),  true);	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
11	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getParent(),  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getParent(),  scope);	  removeUnreferencedScope(fnScope.getParent());    	non-compiled	[CE]  	56	None	replace
12	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getParent(),  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getParent(),  fnScope);	  removeUnreferencedScope(fnScope.getParent());    	non-compiled	[CE]  	56	None	replace
13	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getNameNode());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getNameNode());	  removeUnreferencedScope(fnScope.getParent());    	non-compiled	[CE]  	56	None	replace
14	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getLastChild());	  removeUnreferencedScope(fnScope.getParent());    	non-compiled	[CE]  	56	None	replace
15	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getFirstChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getFirstChild());	  removeUnreferencedScope(fnScope.getParent());    	non-compiled	[CE]  	56	None	replace
16	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getFunctionExpressionName());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getFunctionExpressionName());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getFunctionExpressionName());	  removeUnreferencedScope(fnScope.getParent());    	non-compiled	[CE]  	56	None	replace
17	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(scope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(scope,  fnScope);	  removeUnreferencedFunctionScope(fnScope,    fnScope);    	non-compiled	[CE]  	41	None	replace
18	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  codingConvention,  scope);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
19	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  this.codingConvention);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  this.codingConvention);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
20	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(scope,  codingConvention);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(scope,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(scope,  codingConvention);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
21	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  codingConvention,  scope);	  removeUnreferencedFunctionScopes(fnScope,    codingConvention);    	non-compiled	[CE]  	12	None	replace
22	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  this.codingConvention);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  this.codingConvention);	  removeUnreferencedFunctionScopes(fnScope,    codingConvention);    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  codingConvention,  nameNode);	  removeUnreferencedFunctionScopes(fnScope,    codingConvention);    	non-compiled	[CE]  	12	None	replace
24	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  root);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  root);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
25	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  allFunctionScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  allFunctionScopes);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
26	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  nameNode,  scope);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
27	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode,  toReplaceWithZero);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  nameNode,  toReplaceWithZero);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
28	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assign,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assign,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assign,  scope);	  removeUnreferencedFunctionArgs(fnScope,    assign);    	non-compiled	[CE]  	75	None	replace
29	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assign,  toReplaceWithZero);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assign,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assign,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    assign);    	non-compiled	[CE]  	75	None	replace
30	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getParent(),  scope);	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
31	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent(),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getParent(),  fnScope);	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
32	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getNameNode());	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
33	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getFirstChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getFirstChild());	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
34	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getLastChild());	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
35	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getRawParent());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getRawParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getRawParent());	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
36	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  mayHaveSecondarySideEffects);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  mayHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  mayHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  mayHaveSecondarySideEffects);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  mayHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  mayHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
38	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
39	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  this.mayHaveSecondarySideEffects);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  this.mayHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  this.mayHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
40	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  mightHaveSecondarySideEffects);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  mightHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  mightHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
41	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(scope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(scope,  fnScope);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope);    	non-compiled	[CE]  	31	None	replace
42	[BUG]  [BUGGY]  removeUnreferencedFunctionAssign(fnScope,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssign(fnScope,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssign(fnScope,  scope);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope);    	non-compiled	[CE]  	31	None	replace
43	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  scope);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
44	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  preserveFunctionExpressionNames);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
45	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  codingConvention);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
46	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  codingConvention);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  nameNode,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
47	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
48	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
49	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
50	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  allFunctionScopes);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  allFunctionScopes);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  node,  allFunctionScopes);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
51	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  scope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
52	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope.cloneTree());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
53	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  scope);	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
54	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.clone());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.clone());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.clone());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
55	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
56	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope.cloneTree());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  fnScope.cloneTree());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
57	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
58	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  allFunctionScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  allFunctionScopes);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
59	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
60	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
61	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
62	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  toReplaceWithZero,  codingConvention);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
63	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
64	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
65	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
66	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
67	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
68	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
69	[BUG]  [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  continue;  }  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
70	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopes(fnScope,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope,  scope);	  removeUnreferencedFunctionScopes(fnScope,    fnScope);    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopes(fnScope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope,  fnScope);	  removeUnreferencedFunctionScopes(fnScope,    fnScope);    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(scope,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(scope,  fnScope);	  removeUnreferencedFunctionScopes(fnScope,    fnScope);    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
74	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
75	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  ')'  expected	66	None	replace
76	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
77	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
78	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
79	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  nameNode,  scope);	  removeUnreferencedFunctionArgs(fnScope,    nameNode);    	non-compiled	[CE]  	51	None	replace
80	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  toReplaceWithZero);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  nameNode,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    nameNode);    	non-compiled	[CE]  	51	None	replace
81	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  scope);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
82	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  toReplaceWithZero);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  toReplaceWithZero);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
83	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes,  nameNode);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
84	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.cloneTree(),  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.cloneTree(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.cloneTree(),  scope);	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
85	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.clone());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.clone());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.clone());	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
86	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.clone(),  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.clone(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.clone(),  scope);	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
87	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getName());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getName());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getName());	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
88	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
89	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
90	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  ')'  expected	24	None	replace
91	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  continue;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  ')'  expected	24	None	replace
92	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
93	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  node.removeChild(fnScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
94	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  node.removeChild(fnScope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
95	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  node.removeChild(fnScope);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
96	[BUG]  [BUGGY]  For(Scope  fnScope  :  scopes)  {  node.removeChild(fnScope);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scopes)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scopes)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
97	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  node.removeChild(fnScope);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
98	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  scope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  scope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  scope.cloneTree());	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
99	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  scope);	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
100	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.clone());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.clone());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.clone());	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
101	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.getParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.getParent());	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
102	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(scope,  fnScope.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(scope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(scope,  fnScope.cloneTree());	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
103	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope,  toReplaceWithZero);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  fnScope,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(scope,    fnScope);    	non-compiled	[CE]  	7	None	replace
104	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope,  allFunctionScopes);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  fnScope,  allFunctionScopes);	  removeUnreferencedFunctionArgs(scope,    fnScope);    	non-compiled	[CE]  	7	None	replace
105	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  fnScope,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  fnScope,  isPropertyAssign);	  removeUnreferencedFunctionArgs(scope,    fnScope);    	non-compiled	[CE]  	7	None	replace
106	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  root);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  root);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
107	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
108	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  nameNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
109	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  assignNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  assignNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  assignNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
110	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  allFunctionScopes);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  allFunctionScopes);	  removeUnreferencedFunctionScope(fnScope,    scope);    	non-compiled	[CE]  	39	None	replace
111	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  scope,  toReplaceWithZero);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  scope,  toReplaceWithZero);	  removeUnreferencedFunctionScope(fnScope,    scope);    	non-compiled	[CE]  	39	None	replace
112	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  scope,  codingConvention);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  scope,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  scope,  codingConvention);	  removeUnreferencedFunctionScope(fnScope,    scope);    	non-compiled	[CE]  	39	None	replace
113	[BUG]  [BUGGY]  removeUnreferencedFunction(fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunction(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunction(fnScope);	  removeUnreferencedFunctionAssigns(scope);    	non-compiled	[CE]  	32	None	replace
114	[BUG]  [BUGGY]  removeUnreferencedFunctionAssign(fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssign(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssign(fnScope);	  removeUnreferencedFunctionAssigns(scope);    	non-compiled	[CE]  	32	None	replace
115	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  this.codingConvention);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  this.codingConvention);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
116	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  scope);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
117	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  isPropertyAssign);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
118	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
119	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
120	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
121	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
122	[BUG]  [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
123	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
124	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  scope.cloneTree());	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
125	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  scope);	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
126	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.clone());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.clone());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.clone());	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
127	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
128	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(scope,  fnScope.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(scope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(scope,  fnScope.cloneTree());	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
129	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.getParent());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.getParent());	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
130	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  codingConvention,  scope);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
131	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  this.codingConvention);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  this.codingConvention);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  allFunctionScopes);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
133	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  callSiteOptimizer);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  callSiteOptimizer);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  codingConvention,  callSiteOptimizer);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
134	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
135	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
136	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
137	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  codingConvention);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
138	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
139	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  scope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  scope);	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
140	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getNameNode());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getNameNode());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
141	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope.getParent());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope.getParent());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
142	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getLastChild());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
143	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getRawParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getRawParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getRawParent());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
144	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  scope.cloneTree());	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
145	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  scope);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
146	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.clone());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.clone());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.clone());	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
147	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  toReplaceWithZero);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
148	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.getParent());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.getParent());	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
149	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.scope.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.scope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.scope.cloneTree());	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
150	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope,  preserveFunctionExpressionNames);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  scope,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionAssigns(fnScope,    scope);    	non-compiled	[CE]  	28	None	replace
151	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope,  toReplaceWithZero);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  scope,  toReplaceWithZero);	  removeUnreferencedFunctionAssigns(fnScope,    scope);    	non-compiled	[CE]  	28	None	replace
152	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope,  codingConvention);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopes(fnScope,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope,  codingConvention);	  removeUnreferencedFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	10	None	replace
153	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
154	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  toReplaceWithZero);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
155	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
156	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
157	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes.values())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes.values())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes.values())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
158	[BUG]  [BUGGY]  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
159	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getNext();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getNext();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getNext();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
160	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getFirstChild();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getFirstChild();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getFirstChild();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
161	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope,  toReplaceWithZero);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  scope,  toReplaceWithZero);	  removeUnreferencedFunctionVars(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
162	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(scope,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(scope,  fnScope);	  removeUnreferencedFunctionVars(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
163	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope,  preserveFunctionExpressionNames);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  scope,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  scope,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionVars(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
164	[BUG]  [BUGGY]  removeUnreferencedFunctions(scope,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(scope,  fnScope);	  removeUnreferencedFunctions(fnScope,    fnScope);    	non-compiled	[CE]  	47	None	replace
165	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  scope);	  removeUnreferencedFunctions(fnScope,    fnScope);    	non-compiled	[CE]  	47	None	replace
166	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  scope);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
167	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  mayHaveSecondarySideEffects);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  mayHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  mayHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
168	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
169	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  ignoreGlobals);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  ignoreGlobals);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  ignoreGlobals);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
170	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
171	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  interpretAssigns);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  interpretAssigns);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  interpretAssigns);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  scope,  preserveFunctionExpressionNames);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  scope,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  scope,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
173	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  toReplaceWithZero,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  toReplaceWithZero,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  toReplaceWithZero,  fnScope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
174	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
175	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
176	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
177	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
178	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
179	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(fnScope.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(fnScope.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(fnScope.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
180	[BUG]  [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  return;  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  assigns)  {  if(fnScope.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  ')'  expected	67	None	replace
181	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
182	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
183	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
184	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
185	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  codingConvention);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
186	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  this.codingConvention);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  this.codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    codingConvention);    	non-compiled	[CE]  	20	None	replace
187	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    codingConvention);    	non-compiled	[CE]  	20	None	replace
188	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  toReplaceWithZero);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  toReplaceWithZero);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  	4	None	replace
189	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  codingConvention);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  codingConvention);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  	4	None	replace
190	[BUG]  [BUGGY]  removeUnreferencedVars(scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(scope);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  	4	None	replace
191	[BUG]  [BUGGY]  traverseUnreferencedScope(fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  traverseUnreferencedScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	traverseUnreferencedScope(fnScope);	  removeUnreferencedScope(scope);    	non-compiled	[CE]  	33	None	replace
192	[BUG]  [BUGGY]  resolveUnreferencedScope(fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  resolveUnreferencedScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	resolveUnreferencedScope(fnScope);	  removeUnreferencedScope(scope);    	non-compiled	[CE]  	33	None	replace
193	[BUG]  [BUGGY]  ensureUnreferencedScope(fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  ensureUnreferencedScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	ensureUnreferencedScope(fnScope);	  removeUnreferencedScope(scope);    	non-compiled	[CE]  	33	None	replace
194	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  NodeUtil.removeChild(nameNode,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	NodeUtil.removeChild(nameNode,  fnScope);	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
195	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
196	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
197	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
198	[BUG]  [BUGGY]  For(Scope  fnScope  :  scopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scopes)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
199	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getParent(),  scope);	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
200	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getParent(),  fnScope);	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
201	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getNameNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getNameNode());	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
202	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getLastChild());	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
203	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getFirstChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getFirstChild());	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
204	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getParent(),  true);	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
205	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  cloneTree);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  cloneTree);	  removeUnreferencedFunctionArgs(fnScope,    cloneTree);    	non-compiled	[CE]  	74	None	replace
206	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  cloneAssign);	  removeUnreferencedFunctionArgs(fnScope,    cloneTree);    	non-compiled	[CE]  	74	None	replace
207	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneTree,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneTree,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  cloneTree,  scope);	  removeUnreferencedFunctionArgs(fnScope,    cloneTree);    	non-compiled	[CE]  	74	None	replace
208	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
209	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
210	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
211	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
212	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.get(0))  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
213	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.removeChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.removeChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.removeChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
214	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  root,  scope);	  removeUnreferencedFunctionArgs(fnScope,    root);    	non-compiled	[CE]  	48	None	replace
215	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  clone);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  clone);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  clone);	  removeUnreferencedFunctionArgs(fnScope,    root);    	non-compiled	[CE]  	48	None	replace
216	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
217	[BUG]  [BUGGY]  Node  assignNode  =  fnScope.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Node  assignNode  =  fnScope.getParent();  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Node  assignNode  =  fnScope.getParent();	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
218	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getNext();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getNext();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getNext();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
219	[BUG]  [BUGGY]  removeUnreferencedScope(scope,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(scope,  fnScope);	  removeUnreferencedScope(fnScope,    fnScope);    	non-compiled	[CE]  	35	None	replace
220	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  allFunctionScopes);	  removeUnreferencedScope(fnScope,    scope);    	non-compiled	[CE]  	9	None	replace
221	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  scope,  toReplaceWithZero);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  scope,  toReplaceWithZero);	  removeUnreferencedScope(fnScope,    scope);    	non-compiled	[CE]  	9	None	replace
222	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  scope,  codingConvention);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  scope,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  scope,  codingConvention);	  removeUnreferencedScope(fnScope,    scope);    	non-compiled	[CE]  	9	None	replace
223	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
224	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
225	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  ')'  expected	60	None	replace
226	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  ')'  expected	60	None	replace
227	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
228	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getScopes())  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getScopes())  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getScopes())  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
229	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
230	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
231	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
232	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
233	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  toReplaceWithZero,  codingConvention);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
234	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  mayHaveSecondarySideEffects);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  mayHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  mayHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
235	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
236	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
237	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  preserveFunctionExpressionNames);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
238	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  codingConvention);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
239	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  nameNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
240	[BUG]  [BUGGY]  traverseUnreferencedFunctionScope(fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  traverseUnreferencedFunctionScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	traverseUnreferencedFunctionScope(fnScope);	  removeUnreferencedFunctionScope(scope);    	non-compiled	[CE]  	40	None	replace
241	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
242	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
243	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
244	[BUG]  [BUGGY]  For(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scopes)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  new  CallSiteOptimizer());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  new  CallSiteOptimizer());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	NodeTraversal.traverse(compiler,  fnScope,  new  CallSiteOptimizer());	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
246	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
247	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  null);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  null);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
248	[BUG]  [BUGGY]  removeUnreferencedFunctionAssign(fnScope,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssign(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssign(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
249	[BUG]  [BUGGY]  removeUnreferencedScopeAssigns(fnScope,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopeAssigns(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopeAssigns(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
250	[BUG]  [BUGGY]  removeUnreferencedFunction(fnScope,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunction(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunction(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
251	[BUG]  [BUGGY]  RemoveUnreferencedFunctionAssigns(fnScope,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  RemoveUnreferencedFunctionAssigns(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	RemoveUnreferencedFunctionAssigns(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
252	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  scope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getParent(),  scope);	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
253	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getParent(),  fnScope);	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
254	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getLastChild());	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
255	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getNameNode());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getNameNode());	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
256	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getFirstChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getFirstChild());	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
257	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  fnScope.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getParent(),  fnScope.cloneTree());	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
258	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent(),  scope);	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
259	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope);	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
260	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getNameNode());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getNameNode());	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
261	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getFirstChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getFirstChild());	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
262	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getLastChild());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getLastChild());	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
263	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.cloneTree());	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
264	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
265	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
266	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  ')'  expected	26	None	replace
267	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
268	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  return;  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  ')'  expected	26	None	replace
269	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
270	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
271	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getNameNode();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getNameNode();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getNameNode();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
272	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes.values())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes.values())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes.values())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
273	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getFirstChild();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getFirstChild();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getFirstChild();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
274	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
275	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
276	[BUG]  [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
277	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
278	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnS  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnS  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnS	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
279	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
280	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  f  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  f  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  f	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
281	[BUG]  [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [CE]  ')'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  assigns)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
282	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  codingConvention,  scope);	  removeUnreferencedScope(fnScope,    codingConvention);    	non-compiled	[CE]  	34	None	replace
283	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  this.codingConvention);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  this.codingConvention);	  removeUnreferencedScope(fnScope,    codingConvention);    	non-compiled	[CE]  	34	None	replace
284	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  callSiteOptimizer);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  callSiteOptimizer);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  codingConvention,  callSiteOptimizer);	  removeUnreferencedScope(fnScope,    codingConvention);    	non-compiled	[CE]  	34	None	replace
285	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
286	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
287	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
288	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
289	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention,  scope);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
290	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  this.codingConvention);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  this.codingConvention);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
291	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention,  isPropertyAssign);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  removeUnreferencedVars(scope,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(scope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(scope,  fnScope);	  removeUnreferencedVars(fnScope,    fnScope);    	non-compiled	[CE]  	8	None	replace
293	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  fnScope.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  fnScope.cloneTree());	  removeUnreferencedVars(fnScope,    fnScope);    	non-compiled	[CE]  	8	None	replace
294	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  scope,  toReplaceWithZero);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  scope,  toReplaceWithZero);	  removeUnreferencedFunctions(fnScope,    scope);    	non-compiled	[CE]  	44	None	replace
295	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  scope,  preserveFunctionExpressionNames);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  scope,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  scope,  preserveFunctionExpressionNames);	  removeUnreferencedFunctions(fnScope,    scope);    	non-compiled	[CE]  	44	None	replace
296	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope,  toReplaceWithZero);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopes(fnScope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope,  toReplaceWithZero);	  removeUnreferencedScopes(fnScope);    	non-compiled	[CE]  	11	None	replace
297	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  this.codingConvention);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  this.codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  this.codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    codingConvention);    	non-compiled	[CE]  	21	None	replace
298	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    codingConvention);    	non-compiled	[CE]  	21	None	replace
299	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  preserveFunctionExpressionNames);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    codingConvention);    	non-compiled	[CE]  	21	None	replace
300	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  toReplaceWithZero,  scope);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
301	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
302	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  toReplaceWithZero,  codingConvention);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
303	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  nameNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  toReplaceWithZero,  nameNode);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
304	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
305	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  ')'  expected	67	None	replace
306	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
307	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
308	[BUG]  [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  scope  :  fnScopes)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
309	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
310	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedScope(fnScope,    codingConvention);    	non-compiled	[CE]  	34	None	replace
311	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  codingConvention,  nameNode);	  removeUnreferencedScope(fnScope,    codingConvention);    	non-compiled	[CE]  	34	None	replace
312	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  nameNode);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
313	[BUG]  [BUGGY]  removeUnreferencedScope(scope,  toReplaceWithZero);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(scope,  toReplaceWithZero);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
314	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.toReplaceWithZero());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.toReplaceWithZero());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.toReplaceWithZero());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
315	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopes(fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope.cloneTree());	  removeUnreferencedScopes(fnScope);    	non-compiled	[CE]  	11	None	replace
316	[BUG]  [BUGGY]  removeUnreferencedScopes(fnScope.getParent());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScopes(fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScopes(fnScope.getParent());	  removeUnreferencedScopes(fnScope);    	non-compiled	[CE]  	11	None	replace
317	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  root);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  root);	  removeUnreferencedVars(fnScope,    fnScope);    	non-compiled	[CE]  	8	None	replace
318	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  nameNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  nameNode);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
319	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneNode());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneNode());	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
320	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.getNameNode());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.getNameNode());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.getNameNode());	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
321	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  nameNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  nameNode);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
322	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  namingNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  namingNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  namingNode);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
323	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  fnScope  =  fnScope.getParent();  assignNode.removeChild(fnScope);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  fnScope  =  fnScope.getParent();  assignNode.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  fnScope  =  fnScope.getParent();  assignNode.removeChild(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
324	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes.cloneTree());	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
325	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes.size());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes.size());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  allFunctionScopes.size());	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
326	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  null);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  null);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
327	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  null);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  null);	  removeUnreferencedScope(fnScope,    scope);    	non-compiled	[CE]  	9	None	replace
328	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  true);	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
329	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  root);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  root);	  removeUnreferencedFunctionScopes(fnScope,    fnScope);    	non-compiled	[CE]  	14	None	replace
330	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
331	[BUG]  [BUGGY]  for(Scope  fnScope  :  callSiteOptimizer)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  callSiteOptimizer)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  callSiteOptimizer)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
332	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  root);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  root);	  removeUnreferencedFunctionVars(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
333	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
334	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  codingConvention,  nameNode);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
335	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  nameNode);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
336	[BUG]  [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  scope  :  fnScopes)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
337	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  root,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
338	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  preserveFunctionExpressionNames);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  nameNode,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
339	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingNode,  toReplaceWithZero);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingNode,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  namingNode,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
340	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
341	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  codingConvention,  nameNode);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
342	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  codingConvention,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionVars(fnScope,    codingConvention);    	non-compiled	[CE]  	3	None	replace
343	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    codingConvention);    	non-compiled	[CE]  	20	None	replace
344	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    codingConvention);    	non-compiled	[CE]  	20	None	replace
345	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  toReplaceWithZero,  codingConvention);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  nameNode,  toReplaceWithZero,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  nameNode,  toReplaceWithZero,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    codingConvention);    	non-compiled	[CE]  	21	None	replace
346	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
347	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Pentru(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
348	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  toReplaceWithZero,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
349	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  ignoreGlobals);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  ignoreGlobals);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  allFunctionScopes,  ignoreGlobals);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
350	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  toReplaceWithZero);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  root,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
351	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero,  preserveFunctionExpressionNames);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  toReplaceWithZero,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
352	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  fnScope);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
353	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  node.removeChild(fnScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
354	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  node.replaceChild(fnScope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  node.replaceChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  node.replaceChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()  ==  fnScope.getParent());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope.getParent()  ==  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope.getParent()  ==  fnScope.getParent());	  removeUnreferencedFunctionAssigns(scope);    	non-compiled	[CE]  	32	None	replace
356	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingConvention);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  namingConvention);	  removeUnreferencedFunctionArgs(fnScope,    nameNode);    	non-compiled	[CE]  	51	None	replace
357	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  namingNode);	  removeUnreferencedFunctionArgs(fnScope,    nameNode);    	non-compiled	[CE]  	51	None	replace
358	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  accountNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  accountNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  accountNode);	  removeUnreferencedFunctionArgs(fnScope,    nameNode);    	non-compiled	[CE]  	51	None	replace
359	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
360	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  null);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  null);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  root,  null);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
361	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  root);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  root);	  removeUnreferencedFunctions(fnScope,    fnScope);    	non-compiled	[CE]  	47	None	replace
362	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  fnScope.cloneTree());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  fnScope.cloneTree());	  removeUnreferencedFunctions(fnScope,    fnScope);    	non-compiled	[CE]  	47	None	replace
363	[BUG]  [BUGGY]  rehashAndRemoveUnreferencedScope(fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  rehashAndRemoveUnreferencedScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	rehashAndRemoveUnreferencedScope(fnScope);	  removeUnreferencedScope(scope);    	non-compiled	[CE]  	33	None	replace
364	[BUG]  [BUGGY]  renameUnreferencedScope(fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  renameUnreferencedScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	renameUnreferencedScope(fnScope);	  removeUnreferencedScope(scope);    	non-compiled	[CE]  	33	None	replace
365	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent(),  true);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
366	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getNameNode(),  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getNameNode(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getNameNode(),  true);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
367	[BUG]  [BUGGY]  resolveUnreferencedFunctionAssigns(fnScope,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  resolveUnreferencedFunctionAssigns(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	resolveUnreferencedFunctionAssigns(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
368	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  root);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  root);	  removeUnreferencedScope(fnScope,    fnScope);    	non-compiled	[CE]  	35	None	replace
369	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  codingConvention);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  root,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
370	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
371	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.toReplaceWithZero());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.toReplaceWithZero());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.toReplaceWithZero());	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
372	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  preserveFunctionExpressionNames);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  allFunctionScopes,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
373	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(scope,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(scope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(scope,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
374	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  cloneNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  cloneNode);	  removeUnreferencedFunctionArgs(fnScope,    cloneTree);    	non-compiled	[CE]  	74	None	replace
375	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getNext();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getNext();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  nameNode  =  fnScope.getNext();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
376	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode,  allFunctionScopes);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  nameNode,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  nameNode,  allFunctionScopes);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
377	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  namingConvention);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  namingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  namingConvention);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
378	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(scope,  toReplaceWithZero);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(scope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(scope,  toReplaceWithZero);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
379	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  root);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  root);	  removeUnreferencedFunctionScope(fnScope,    fnScope);    	non-compiled	[CE]  	41	None	replace
380	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
381	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention,  preserveFunctionExpressionNames);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
382	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention,  nameNode);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
383	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent(),  fnScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope.getParent(),  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope.getParent(),  fnScope.cloneTree());	  removeUnreferencedFunctionVars(fnScope.getParent());    	non-compiled	[CE]  	52	None	replace
384	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  this.referencedVars);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  this.referencedVars);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  this.referencedVars);	  removeUnreferencedFunctionAssigns(fnScope,    scope);    	non-compiled	[CE]  	28	None	replace
385	[BUG]  [BUGGY]  resolveUnreferencedFunctionScope(fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  resolveUnreferencedFunctionScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	resolveUnreferencedFunctionScope(fnScope);	  removeUnreferencedFunctionScope(scope);    	non-compiled	[CE]  	40	None	replace
386	[BUG]  [BUGGY]  renameUnreferencedFunctionScope(fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  renameUnreferencedFunctionScope(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	renameUnreferencedFunctionScope(fnScope);	  removeUnreferencedFunctionScope(scope);    	non-compiled	[CE]  	40	None	replace
387	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  root);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  root);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getParent(),  root);	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
388	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getParent(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getParent(),  true);	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
389	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  nameNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  nameNode);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
390	[BUG]  [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  scope  :  fnScopes)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
391	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName()  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName()  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName()	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
392	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
393	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  nameNode);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
394	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  namingNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  namingNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  namingNode);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
395	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assignNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assignNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assignNode);	  removeUnreferencedFunctionArgs(fnScope,    assign);    	non-compiled	[CE]  	75	None	replace
396	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  this.assign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  this.assign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  this.assign);	  removeUnreferencedFunctionArgs(fnScope,    assign);    	non-compiled	[CE]  	75	None	replace
397	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.cloneTree());	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
398	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
399	[BUG]  [BUGGY]  for(Scope  fnScope  :  children)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  children)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  children)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
400	[BUG]  [BUGGY]  for(Scope  fnScope  :  names)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  names)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  names)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
401	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctionScopes(fnScope,    codingConvention);    	non-compiled	[CE]  	12	None	replace
402	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  this);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getParent(),  this);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getParent(),  this);	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
403	[BUG]  [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  allFunctionScopes)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
404	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
405	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
406	[BUG]  [BUGGY]  for(Scope  fnScope  :  names)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  names)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  names)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
407	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Node  fnScope  =  fnScope.getParent();  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Node  fnScope  =  fnScope.getParent();	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
408	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
409	[BUG]  [BUGGY]  Node  fnScope  =  fnScope.getParent();  assignNode.removeChild(fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Node  fnScope  =  fnScope.getParent();  assignNode.removeChild(fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Node  fnScope  =  fnScope.getParent();  assignNode.removeChild(fnScope);	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
410	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingNode,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  namingNode,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  namingNode,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
411	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  allFunctionScopes);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
412	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
413	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  root,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  root,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    root);    	non-compiled	[CE]  	48	None	replace
414	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.getParent());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope.getParent());	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  	4	None	replace
415	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  true);	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  	4	None	replace
416	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  isPropertyAssign,  toReplaceWithZero);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  isPropertyAssign,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  isPropertyAssign,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
417	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  preserveFunctionExpressionNames);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  isPropertyAssign,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
418	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  preserveFunctionExpressionNames);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  preserveFunctionExpressionNames);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  preserveFunctionExpressionNames);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
419	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  codingConvention);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  codingConvention,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  codingConvention,  codingConvention);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
420	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
421	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  toReplaceWithZero);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  scope,  codingConvention,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    scope,    codingConvention);    	non-compiled	[CE]  	38	None	replace
422	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  fnScope.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  fnScope.cloneTree());	  removeUnreferencedScope(fnScope,    scope);    	non-compiled	[CE]  	9	None	replace
423	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  fnScope.getParent());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  fnScope.getParent());	  removeUnreferencedScope(fnScope,    scope);    	non-compiled	[CE]  	9	None	replace
424	[BUG]  [BUGGY]  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
425	[BUG]  [BUGGY]  for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.replaceChild(assignNode);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.replaceChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.replaceChild(assignNode);  }	  for(Scope    fnScope    :    fnScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	23	None	replace
426	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  fnScope);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
427	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  allFunctionScopes);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  fnScope.cloneTree(),  allFunctionScopes);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	71	None	replace
428	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  clone);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  clone);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  clone);	  removeUnreferencedFunctionVars(fnScope,    scope);    	non-compiled	[CE]  	1	None	replace
429	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
430	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
431	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
432	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
433	[BUG]  [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(assignsByNode.contains(scope))  {  removeUnreferencedVars(scope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  scope  :  fnScopes)  {  if(assignsByNode.contains(scope))  {  removeUnreferencedVars(scope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  scope  :  fnScopes)  {  if(assignsByNode.contains(scope))  {  removeUnreferencedVars(scope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(scope);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
434	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
435	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getScopes())  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getScopes())  {  NodeUtil.removeChild(nameNode,  fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getScopes())  {  NodeUtil.removeChild(nameNode,  fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeUtil.removeChild(nameNode,    fnScope);    }    	non-compiled	[CE]  	59	None	replace
436	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  nameNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  nameNode);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
437	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  callSiteOptimizer);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  callSiteOptimizer);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  codingConvention,  callSiteOptimizer);	  removeUnreferencedFunctionAssigns(fnScope,    codingConvention);    	non-compiled	[CE]  	29	None	replace
438	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
439	[BUG]  [BUGGY]  For(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  return;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    return;    }    	non-compiled	[CE]  ')'  expected	67	None	replace
440	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  true);	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
441	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  nameNode);	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
442	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.cloneTree(),  fnScope);	  removeUnreferencedFunctionVars(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	63	None	replace
443	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  cloneTree);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  cloneTree);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
444	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope,  assign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope,  assign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope,  assign);	  removeUnreferencedScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	36	None	replace
445	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
446	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getScopes())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
447	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  removeUnreferencedVars(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    removeUnreferencedVars(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  fnScope.getFunctionType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  fnScope.getFunctionType());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope.getFunctionType()  ==  fnScope.getFunctionType());	  removeUnreferencedFunctionAssigns(scope);    	non-compiled	[CE]  	32	None	replace
449	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.getParent());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope.getParent(),  fnScope.getParent());	  removeUnreferencedFunctionAssigns(fnScope.getParent());    	non-compiled	[CE]  	53	None	replace
450	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  fnScope.cloneTree());	  removeUnreferencedFunctionScope(fnScope,    scope);    	non-compiled	[CE]  	39	None	replace
451	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope.getParent());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  fnScope.getParent());	  removeUnreferencedFunctionScope(fnScope,    scope);    	non-compiled	[CE]  	39	None	replace
452	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
453	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  fnAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  fnAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  fnAssign);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    isPropertyAssign);    	non-compiled	[CE]  	18	None	replace
454	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  allFunctionScopes);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  allFunctionScopes);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  NodeTraversal.traverse(compiler,  scope,  allFunctionScopes);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
455	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  allFunctionScopes);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    allFunctionScopes);    }    	non-compiled	[CE]  	57	None	replace
457	[BUG]  [BUGGY]  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
458	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  assignNode  =  fnScope.getParent();  assignNode.removeChild(nameNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(nameNode);    }    	non-compiled	[CE]  	27	None	replace
459	[BUG]  [BUGGY]  removeUnreferencedScope(scope,  codingConvention);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(scope,  codingConvention);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(scope,  codingConvention);	  removeUnreferencedScope(fnScope,    codingConvention);    	non-compiled	[CE]  	34	None	replace
460	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.cloneTree(),  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.cloneTree(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.cloneTree(),  fnScope);	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
461	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getOwnerFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getOwnerFunction());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getOwnerFunction());	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
462	[BUG]  [BUGGY]  removeUnreferencedScope(fnScope.getFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedScope(fnScope.getFunction());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedScope(fnScope.getFunction());	  removeUnreferencedScope(fnScope.cloneTree());    	non-compiled	[CE]  	64	None	replace
463	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
464	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
465	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.assigns)  {  if(isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.assigns)  {  if(isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.assigns)  {  if(isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
466	[BUG]  [BUGGY]  removeUnreferencedFunctionSamples(fnScope,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionSamples(fnScope,  false);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionSamples(fnScope,  false);	  removeUnreferencedFunctionAssigns(fnScope,    true);    	non-compiled	[CE]  	55	None	replace
467	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  true);	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
468	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  null);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.cloneTree(),  null);	  removeUnreferencedFunctionScopes(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	72	None	replace
469	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  cloneTree);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  cloneTree);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
470	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  assign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  assign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  assign);	  removeUnreferencedFunctions(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	46	None	replace
471	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
472	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  referenced);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  referenced);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    allFunctionScopes);    	non-compiled	[CE]  	16	None	replace
473	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  toReplaceWithZero);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  codingConvention,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  codingConvention,  toReplaceWithZero);	  removeUnreferencedFunctions(fnScope,    codingConvention);    	non-compiled	[CE]  	45	None	replace
474	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
475	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero  +  1);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero  +  1);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
476	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero,  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero,  isPropertyAssign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero,  isPropertyAssign);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
477	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero.cloneTree());	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
478	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero,  mayHaveSecondarySideEffects);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero,  mayHaveSecondarySideEffects);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  toReplaceWithZero,  mayHaveSecondarySideEffects);	  removeUnreferencedFunctionArgs(fnScope,    scope,    toReplaceWithZero);    	non-compiled	[CE]  	37	None	replace
479	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  fnScope);	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
480	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  fnScope.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getParent(),  fnScope.cloneTree());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
481	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getOwnerFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.getOwnerFunction());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.getOwnerFunction());	  removeUnreferencedFunctionArgs(fnScope,    fnScope.getParent());    	non-compiled	[CE]  	76	None	replace
482	[BUG]  [BUGGY]  resolveUnreferencedScope(fnScope,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  resolveUnreferencedScope(fnScope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	resolveUnreferencedScope(fnScope,  fnScope);	  removeUnreferencedScope(fnScope,    fnScope);    	non-compiled	[CE]  	35	None	replace
483	[BUG]  [BUGGY]  resolveUnreferencedScope(fnScope,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  resolveUnreferencedScope(fnScope,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	resolveUnreferencedScope(fnScope,  scope);	  removeUnreferencedScope(fnScope,    fnScope);    	non-compiled	[CE]  	35	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope!=  null);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope!=  null);	  removeUnreferencedScope(fnScope,    fnScope);    	non-compiled	[CE]  	35	None	replace
485	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
486	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.toReplaceWithZero,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.toReplaceWithZero,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.toReplaceWithZero,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
487	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assignNode,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assignNode,  scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assignNode,  scope);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    scope);    	non-compiled	[CE]  	15	None	replace
488	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  cloneTree);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  cloneTree);	  removeUnreferencedFunctionScopes(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	13	None	replace
489	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getAllFunctionScopes())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getAllFunctionScopes())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getAllFunctionScopes())  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(assignNode);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
490	[BUG]  [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(fnScope);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  allFunctionScopes)  {  Node  assignNode  =  fnScope.getParent();  assignNode.removeChild(fnScope);  }	  for(Scope    fnScope    :    allFunctionScopes)    {    Node    assignNode    =    fnScope.getParent();    assignNode.removeChild(assignNode);    }    	non-compiled	[CE]  	22	None	replace
491	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	NodeTraversal.traverse(compiler,  fnScope,  this);	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
493	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes)  {  NodeTraversal.traverse(compiler,  root,  this);  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    this);    }    	non-compiled	[CE]  	58	None	replace
494	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.toReplaceWithZero);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  fnScope.toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  fnScope.toReplaceWithZero);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
495	[BUG]  [BUGGY]  removeUnreferencedFunctionVars(fnScope,  cloneTree);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionVars(fnScope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionVars(fnScope,  cloneTree);	  removeUnreferencedFunctionVars(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	5	None	replace
496	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
497	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.put(fnScope.getName(),  fn	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.put(fnScope.getName(),    fnScope);    }    	non-compiled	[CE]  ')'  expected	70	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()  ==  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope.getParent()  ==  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope.getParent()  ==  fnScope);	  removeUnreferencedFunctionScope(scope);    	non-compiled	[CE]  	40	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  removeUnreferencedFunctionScope(scope);    	non-compiled	[CE]  	40	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope.getParent()!=  fnScope);	  removeUnreferencedFunctionScope(scope);    	non-compiled	[CE]  	40	None	replace
501	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScope.scope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScope.scope);	  removeUnreferencedFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	10	None	replace
502	[BUG]  [BUGGY]  resolveUnreferencedFunctionAssigns(fnScope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  resolveUnreferencedFunctionAssigns(fnScope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	resolveUnreferencedFunctionAssigns(fnScope,  fnScope);	  removeUnreferencedFunctionAssigns(fnScope,    fnScope);    	non-compiled	[CE]  	31	None	replace
503	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  cloneTree);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  cloneTree);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
504	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope.toReplaceWithZero);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  fnScope.toReplaceWithZero);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  fnScope.toReplaceWithZero);	  removeUnreferencedFunctionScope(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	43	None	replace
505	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  true);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnScope.cloneTree(),  true);	  removeUnreferencedFunctionArgs(fnScope,    fnScope.cloneTree());    	non-compiled	[CE]  	49	None	replace
506	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope.getOwnerFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope.getOwnerFunction());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope.getOwnerFunction());	  removeUnreferencedFunctions(fnScope.getParent());    	non-compiled	[CE]  	50	None	replace
507	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
508	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(isPropertyAssign)  {  return;  }	  for(Scope    fnScope    :    fnScopes)    {    if(isPropertyAssign)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
509	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnNode,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  fnNode,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  fnNode,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
510	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assignNode,  nameNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assignNode,  nameNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assignNode,  nameNode);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    nameNode);    	non-compiled	[CE]  	19	None	replace
511	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  assignNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  assignNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  assignNode);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
512	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  clone);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  clone);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  clone);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
513	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  assign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  assign);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  assign);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
514	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  cloneTreeNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  cloneTreeNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  cloneTreeNode);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
515	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  cloneTree);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  cloneTree);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  cloneTree);	  removeUnreferencedFunctionAssigns(fnScope,    nameNode);    	non-compiled	[CE]  	54	None	replace
516	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  assigns);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  assigns);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  assigns);	  removeUnreferencedFunctionAssigns(fnScope,    scope);    	non-compiled	[CE]  	28	None	replace
517	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes)  {  node.removeChild(fnScope);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes)  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes)  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
518	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  node.removeChild(fnScope);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  node.removeChild(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  node.removeChild(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    node.removeChild(fnScope);    }    	non-compiled	[CE]  	25	None	replace
519	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  clone);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  clone);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  clone);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
520	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  assigns);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  assigns);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  assigns);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
521	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  fnScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  fnScopes);	  removeUnreferencedFunctionScopes(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	62	None	replace
522	[BUG]  [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	For(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
523	[BUG]  [BUGGY]  Pentru(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Pentru(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Pentru(Scope  fnScope  :  scope)  {  NodeTraversal.traverse(compiler,  root,  new  CallSiteOptimizer());  }	  for(Scope    fnScope    :    fnScopes)    {    NodeTraversal.traverse(compiler,    root,    new    CallSiteOptimizer());    }    	non-compiled	[CE]  	61	None	replace
524	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  referenced);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  toReplaceWithZero,  referenced);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
525	[BUG]  [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  namingNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionAssigns(fnScope,  namingNode);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionAssigns(fnScope,  namingNode);	  removeUnreferencedFunctionAssigns(fnScope,    toReplaceWithZero);    	non-compiled	[CE]  	30	None	replace
526	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
527	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
528	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
529	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  fnScope.getParent());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  fnScope.getParent());	  removeUnreferencedFunctions(fnScope,    scope);    	non-compiled	[CE]  	44	None	replace
530	[BUG]  [BUGGY]  removeUnreferencedFunctions(fnScope,  clone);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctions(fnScope,  clone);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctions(fnScope,  clone);	  removeUnreferencedFunctions(fnScope,    scope);    	non-compiled	[CE]  	44	None	replace
531	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
532	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.assigns)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.assigns)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.assigns)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
533	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.allFunctionScopes)  {  if(!isPropertyAssign)  {  continue;  }	  for(Scope    fnScope    :    fnScopes)    {    if(!isPropertyAssign)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
534	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getOwnerFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope.getOwnerFunction());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope.getOwnerFunction());	  removeUnreferencedFunctionScopes(fnScope.getParent());    	non-compiled	[CE]  	73	None	replace
535	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  allFunctionScopes);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  allFunctionScopes);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  toReplaceWithZero,  codingConvention,  allFunctionScopes);	  removeUnreferencedFunctionArgs(fnScope,    toReplaceWithZero,    codingConvention);    	non-compiled	[CE]  	21	None	replace
536	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  callSiteOptimizer);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope,  codingConvention,  callSiteOptimizer);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope,  codingConvention,  callSiteOptimizer);	  removeUnreferencedFunctionScope(fnScope,    codingConvention);    	non-compiled	[CE]  	42	None	replace
537	[BUG]  [BUGGY]  removeAllUnreferencedVars(fnScope,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeAllUnreferencedVars(fnScope,  fnScope);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeAllUnreferencedVars(fnScope,  fnScope);	  removeUnreferencedVars(fnScope,    fnScope);    	non-compiled	[CE]  	8	None	replace
538	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope,  fnScope.getParent());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope,  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope,  fnScope.getParent());	  removeUnreferencedVars(fnScope,    fnScope);    	non-compiled	[CE]  	8	None	replace
539	[BUG]  [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assigns);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionArgs(fnScope,  assigns);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionArgs(fnScope,  assigns);	  removeUnreferencedFunctionArgs(fnScope,    allFunctionScopes);    	non-compiled	[CE]  	17	None	replace
540	[BUG]  [BUGGY]  removeUnreferencedVars(fnScope.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedVars(fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedVars(fnScope.cloneTree());	  removeUnreferencedVars(fnScope);    	non-compiled	[CE]  	4	None	replace
541	[BUG]  [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  callSiteOptimizer);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScopes(fnScope,  codingConvention,  callSiteOptimizer);  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScopes(fnScope,  codingConvention,  callSiteOptimizer);	  removeUnreferencedFunctionScopes(fnScope,    codingConvention);    	non-compiled	[CE]  	12	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  fnScope.getParent());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  fnScope.getParent());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	Preconditions.checkState(fnScope.getParent()!=  fnScope.getParent());	  removeUnreferencedScope(scope);    	non-compiled	[CE]  	33	None	replace
543	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.getFnScopes())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
544	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.values())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
545	[BUG]  [BUGGY]  for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  scope.assignsByNode)  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
546	[BUG]  [BUGGY]  for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	for(Scope  fnScope  :  assignsByNode.keySet())  {  if(assignsByNode.contains(fnScope))  {  toReplaceWithZero.addChildToBack(fnScope);  }	  for(Scope    fnScope    :    fnScopes)    {    if(assignsByNode.contains(fnScope))    {    toReplaceWithZero.addChildToBack(fnScope);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
547	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.cloneTree());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.cloneTree());	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
548	[BUG]  [BUGGY]  removeUnreferencedFunctionScope(fnScope.getOwnerFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Scope  scope  =  new  SyntacticScopeCreator(compiler).createScope(root,  null);  traverseNode(root,  null,  scope);  if  (removeGlobals)  {  collectMaybeUnreferencedVars(scope);  }  interpretAssigns();  removeUnreferencedVars();  for  (Scope  fnScope  :  allFunctionScopes)  {      [BUGGY]  removeUnreferencedFunctionScope(fnScope.getOwnerFunction());  [BUGGY]      }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseAndRemoveUnusedReferences  [RETURN_TYPE]  void  Node  root  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  CodingConvention  codingConvention  Node  assignNode  externs  nameNode  node  root  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	179	179	5	replace	removeUnreferencedFunctionScope(fnScope.getOwnerFunction());	  removeUnreferencedFunctionScope(fnScope.getParent());    	non-compiled	[CE]  	77	None	replace
