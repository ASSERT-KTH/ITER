bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced());  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isUnreferenced());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction());  [CE]  [FE]      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(fnScope.isFunction());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]        AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION);  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION);	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]            AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isUnreferenced());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isUnreferenced());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isConstructor());  [CE]  [FE]              AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isConstructor());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isConstructor());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	  	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunction());  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunction());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isFunction());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunction());  [CE]  [FE]      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunction());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isFunction());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isExtern());  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isExtern());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isExtern());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isAll());  [CE]  [FE]      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isAll());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isAll());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
12	[BUG]  [BUGGY]    Node  parentScope  =  fnScope.getParentNode();  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  parentScope  =  fnScope.getParentNode();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  parentScope  =  fnScope.getParentNode();		non-compiled	[CE]  	58	None	add
13	[BUG]  [BUGGY]    Node  parent  =  fnScope.getParentNode();  [CE]  [FE]      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  parent  =  fnScope.getParentNode();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  parent  =  fnScope.getParentNode();		non-compiled	[CE]  	58	None	add
14	[BUG]  [BUGGY]    Node  parent  =  fnScope.getParent();  [CE]  [FE]        AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  parent  =  fnScope.getParent();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  parent  =  fnScope.getParent();		non-compiled	[CE]  	58	None	add
15	[BUG]  [BUGGY]    Node  parentScope  =  fnScope.getParent();  [CE]  [FE]          AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  parentScope  =  fnScope.getParent();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  parentScope  =  fnScope.getParent();		non-compiled	[CE]  	58	None	add
16	[BUG]  [BUGGY]    Node  body  =  fnScope.getRootNode();  [CE]  [FE]            AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  body  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  body  =  fnScope.getRootNode();		non-compiled	[CE]  	58	None	add
17	[BUG]  [BUGGY]    Preconditions.checkState(fnScope.getParent()  ==  null);  [CE]  [FE]              AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(fnScope.getParent()  ==  null);  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(fnScope.getParent()  ==  null);		non-compiled	[CE]  	58	None	add
18	[BUG]  [BUGGY]    Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  	58	None	add
19	[BUG]  [BUGGY]    Preconditions.checkState(fnScope.getParent()!=  null);  [CE]  [FE]                  AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(fnScope.getParent()!=  null);  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(fnScope.getParent()!=  null);		non-compiled	[CE]  	58	None	add
20	[BUG]  [BUGGY]    Node  c  =  fnScope.getCurrentNode();  [CE]  [FE]                    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  c  =  fnScope.getCurrentNode();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  c  =  fnScope.getCurrentNode();		non-compiled	[CE]  	58	None	add
21	[BUG]  [BUGGY]    Node  nameNode  =  fnScope.getNameNode();  [CE]  [FE]                      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  nameNode  =  fnScope.getNameNode();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  nameNode  =  fnScope.getNameNode();		non-compiled	[CE]  	58	None	add
22	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
24	[BUG]  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));		non-compiled	[CE]  	58	None	add
25	[BUG]  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]      AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));		non-compiled	[CE]  	58	None	add
26	[BUG]  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]        AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));		non-compiled	[CE]  	58	None	add
27	[BUG]  [BUGGY]    Node  body  =  fnScope.getLastChild();  [CE]  [FE]          AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Node  body  =  fnScope.getLastChild();  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Node  body  =  fnScope.getLastChild();		non-compiled	[CE]  	58	None	add
28	[BUG]  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]            AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));		non-compiled	[CE]  	58	None	add
29	[BUG]  [BUGGY]    Preconditions.checkState(fnScope.getRootNode()  ==  null);  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(fnScope.getRootNode()  ==  null);  [BUGGY]  Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	    Preconditions.checkState(fnScope.getRootNode()  ==  null);		non-compiled	[CE]  	58	None	add
30	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isVarArgs());  [CE]  [FE]    AssertionFailedError  [CONTEXT]          Node  function  =  fnScope.getRootNode();  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isVarArgs());  [BUGGY]  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isVarArgs());	Preconditions.checkState(function.isFunction());  	non-compiled	[CE]  	57	None	replace
