bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isExtern());	  Preconditions.checkState(function!=    null    ||    function.isExtern());    	non-compiled	[CE]  	39	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isExtern());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isExtern());	  Preconditions.checkState(function!=    null    ||    function.isExtern());    	non-compiled	[CE]  	39	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isAssignmentOp());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isAssignmentOp());	  Preconditions.checkState(function!=    null    &&    function.isAssignmentOp());    	non-compiled	[CE]  	100	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isAssignmentOp());	  Preconditions.checkState(function!=    null    &&    function.isAssignmentOp());    	non-compiled	[CE]  	100	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isPropertyAssignment());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isPropertyAssignment());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isPropertyAssignment());	  Preconditions.checkState(function!=    null    &&    function.isAssignmentOp());    	non-compiled	[CE]  	100	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isPropertyAssignmentOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isPropertyAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isPropertyAssignmentOp());	  Preconditions.checkState(function!=    null    &&    function.isAssignmentOp());    	non-compiled	[CE]  	100	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunctionOp());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunctionOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isFunctionOp());	  Preconditions.checkState(function!=    null    &&    function.isAssignmentOp());    	non-compiled	[CE]  	100	None	replace
14	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  null;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
15	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  parentScope;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  parentScope;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  parentScope;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
16	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  node;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  node;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  node;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
17	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getLastChild()  :  null;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getLastChild()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getLastChild()  :  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
18	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getFirstChild()  :  null;  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getFirstChild()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getFirstChild()  :  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
19	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  scope;  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  scope;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  scope;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	274	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	274	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	274	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	274	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	274	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getLocalPart()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
52	[BUG]  [BUGGY]  Node  c  =  parentScope.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getFirstChild();	  Node    c    =    function.getFirstChild();    	non-compiled	[CE]  	153	None	replace
53	[BUG]  [BUGGY]  Node  c  =  function.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getParent();	  Node    c    =    function.getFirstChild();    	non-compiled	[CE]  	153	None	replace
54	[BUG]  [BUGGY]  Node  parentScope  =  function.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getFirstChild();	  Node    parentScope    =    fnScope.getFirstChild();    	non-compiled	[CE]  	65	None	replace
55	[BUG]  [BUGGY]  Node  parentScope  =  function.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getLastChild();	  Node    parentScope    =    fnScope.getFirstChild();    	non-compiled	[CE]  	65	None	replace
56	[BUG]  [BUGGY]  Node  parentScope  =  scope.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getFirstChild();	  Node    parentScope    =    fnScope.getFirstChild();    	non-compiled	[CE]  	65	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignmentOp()  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignmentOp()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignmentOp()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isAssignmentOp());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isAssignmentOp());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isAssignmentOp());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isAssignmentOp());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isAssignmentOp());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
64	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestor(3);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAncestor(3);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestor(3);	  Node    body    =    fnScope.getAncestor(2);    	non-compiled	[CE]  	261	None	replace
65	[BUG]  [BUGGY]  Node  body  =  parentScope.getAncestor(2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getAncestor(2);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getAncestor(2);	  Node    body    =    fnScope.getAncestor(2);    	non-compiled	[CE]  	261	None	replace
66	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestor(0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAncestor(0);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestor(0);	  Node    body    =    fnScope.getAncestor(2);    	non-compiled	[CE]  	261	None	replace
67	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestor(4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAncestor(4);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestor(4);	  Node    body    =    fnScope.getAncestor(2);    	non-compiled	[CE]  	261	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()),  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isImmutableValue(function.getString()));	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString()  +  1));	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isVar(function.getString()));	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isName(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isName(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isName(function.getString()));	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(function.getFunctionNode()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getFunctionNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getFunctionNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(function.getFunctionNode()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getFunctionNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getFunctionNode()!=  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getFunctionNode()!=  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getFunctionNode()  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getFunctionNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getFunctionNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(function.getFunction()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getFunction()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getFunction()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.isUnreferenced());	  Preconditions.checkState(parentScope.isUnreferenced());    	non-compiled	[CE]  	28	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  parentScope.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  parentScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  parentScope.isUnreferenced());	  Preconditions.checkState(parentScope.isUnreferenced());    	non-compiled	[CE]  	28	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isUnreferenced());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isUnreferenced());	  Preconditions.checkState(parentScope.isUnreferenced());    	non-compiled	[CE]  	28	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isAll());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isAll());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isAll());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isAll());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  function.isAll());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isVar());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isVar());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	146	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	146	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	146	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isVarArgs());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  &&  function.isVarArgs());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isFunction());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isVarArgs());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  function.isVarArgs());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAssignmentOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isUnknown());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isUnknown());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAssignableFrom(fnScope.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAssignableFrom(fnScope.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isAssignableFrom(fnScope.getParent()));	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
95	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero(),  function);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero(),  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero(),  function);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
96	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(toReplaceWithZero());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(toReplaceWithZero());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(toReplaceWithZero());	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
97	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero()  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero()  +  1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero()  +  1);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
98	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(toReplaceWithZero());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(toReplaceWithZero());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(toReplaceWithZero());	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
99	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(toReplaceWithZero());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(toReplaceWithZero());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode(toReplaceWithZero());	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
100	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero(),  parent);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero(),  parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero(),  parent);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
101	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function.toReplaceWithZero());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function.toReplaceWithZero());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function.toReplaceWithZero());	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
102	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNextNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getNextNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getNextNode();	  Node    parent    =    scope.getParentNode();    	non-compiled	[CE]  	81	None	replace
103	[BUG]  [BUGGY]  Node  parent  =  fnScope.getPreviousNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getPreviousNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getPreviousNode();	  Node    parent    =    scope.getParentNode();    	non-compiled	[CE]  	81	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getRootNode()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  fnScope.getRootNode()  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  fnScope.getRootNode()  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getRootNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getRootNode()!=  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  parentScope.getRootNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  parentScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  parentScope.getRootNode()  ==  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
111	[BUG]  [BUGGY]  Node  body  =  function.getRootNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getRootNode();	  Node    body    =    parentScope.getRootNode();    	non-compiled	[CE]  	15	None	replace
112	[BUG]  [BUGGY]  Node  body  =  fnScope.getNameNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getNameNode();	  Node    body    =    parentScope.getRootNode();    	non-compiled	[CE]  	15	None	replace
113	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedNode();	  Node    body    =    parentScope.getRootNode();    	non-compiled	[CE]  	15	None	replace
114	[BUG]  [BUGGY]  Node  body  =  parentScope.getHeaderNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getHeaderNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getHeaderNode();	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
115	[BUG]  [BUGGY]  Node  body  =  function.getHeaderNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getHeaderNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getHeaderNode();	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
116	[BUG]  [BUGGY]  Node  body  =  fnScope.getRealNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getRealNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getRealNode();	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
117	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestorNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAncestorNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestorNode();	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isUnreferenced());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isExtern());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isExtern());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  function.isExtern());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isFunctionExpression());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isFunctionExpression());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isExtern());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isReferenced()  ||  function.isExtern());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
123	[BUG]  [BUGGY]  Node  parent  =  function.getParentOperator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getParentOperator();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getParentOperator();	  Node    parent    =    fnScope.getParentOperator();    	non-compiled	[CE]  	213	None	replace
124	[BUG]  [BUGGY]  Node  parent  =  scope.getParentOperator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getParentOperator();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getParentOperator();	  Node    parent    =    fnScope.getParentOperator();    	non-compiled	[CE]  	213	None	replace
125	[BUG]  [BUGGY]  Node  parent  =  scope.getParentRootNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getParentRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getParentRootNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	263	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  &&  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  &&  function.isFunction());	  Preconditions.checkState(function.isFunction()    &&    function.isExtern());    	non-compiled	[CE]  	168	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isExtern());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.isExtern());	  Preconditions.checkState(function.isFunction()    &&    function.isExtern());    	non-compiled	[CE]  	168	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isExtern());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  &&  function.isExtern());	  Preconditions.checkState(function.isFunction()    &&    function.isExtern());    	non-compiled	[CE]  	168	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(function.getNode()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getNode()!=  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNode()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getNode()  ==  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNode()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getNode()!=  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(function.getFirstChild()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getFirstChild()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getFirstChild()  ==  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNode()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNode()  ==  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNode()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNode()!=  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isFunction());	  Preconditions.checkState(function.isDefine()    ||    function.isVarArgs());    	non-compiled	[CE]  	172	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isAssignmentOp());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isDefine()    ||    function.isVarArgs());    	non-compiled	[CE]  	172	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isUnknown());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isUnknown());	  Preconditions.checkState(function.isDefine()    ||    function.isVarArgs());    	non-compiled	[CE]  	172	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isReferenced());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isReferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isReferenced());	  Preconditions.checkState(function.isDefine()    ||    function.isVarArgs());    	non-compiled	[CE]  	172	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isAssignableFrom(fnScope.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isAssignableFrom(fnScope.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isAssignableFrom(fnScope.getParent()));	  Preconditions.checkState(function.isDefine()    ||    function.isVarArgs());    	non-compiled	[CE]  	172	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isConstructor());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isConstructor());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isConstructor());    	non-compiled	[CE]  	30	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionDeclaration());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionDeclaration());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isConstructor());    	non-compiled	[CE]  	30	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isInterface());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isInterface());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isInterface());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isConstructor());    	non-compiled	[CE]  	30	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParentNode()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getParentNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getParentNode()!=  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	94	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(function.getParentNode()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getParentNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getParentNode()!=  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	94	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParentNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getParentNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getParentNode()  ==  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	94	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNameNode()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getNameNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getNameNode()  ==  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	94	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(function.getNameNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getNameNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getNameNode()  ==  null);	  Preconditions.checkState(fnScope.getParentNode()    ==    null);    	non-compiled	[CE]  	94	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	43	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	43	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	43	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	43	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()!=  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	43	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope!=  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getQualifiedName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  false);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  false);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  function.isFunction());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  function.isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()),  function.isFunction());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(function.getNameNode()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getNameNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	111	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getNameNode()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getNameNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	111	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(function.getFunction()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getFunction()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getFunction()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	111	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNameNode()!=  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getFunctionNameNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getFunctionNameNode()!=  null);	  Preconditions.checkState(fnScope.getNameNode()!=    null);    	non-compiled	[CE]  	111	None	replace
169	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentNode(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentNode(parent);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	211	None	replace
170	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(parent,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParent(parent,  scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParent(parent,  scope);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	211	None	replace
171	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParent(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParent(function);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	211	None	replace
172	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParent(scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParent(scope);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	211	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isAssignmentOp());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionOp());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionOp());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyAssignmentOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyAssignmentOp());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyAssignment());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyAssignment());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyAssignment());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionPrototype());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionPrototype());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionPrototype());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
178	[BUG]  [BUGGY]  Node  parent  =  function.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getLastChild();	  Node    parent    =    fnScope.getLastChild();    	non-compiled	[CE]  	9	None	replace
179	[BUG]  [BUGGY]  Node  parent  =  scope.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getLastChild();	  Node    parent    =    fnScope.getLastChild();    	non-compiled	[CE]  	9	None	replace
180	[BUG]  [BUGGY]  Node  parent  =  function.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getFirstChild();	  Node    parent    =    fnScope.getLastChild();    	non-compiled	[CE]  	9	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign,  parent);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isReferenced);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isReferenced);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isReferenced);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isAll());	  Preconditions.checkState(function.isAll());    	non-compiled	[CE]  	234	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAll());	  Preconditions.checkState(function.isAll());    	non-compiled	[CE]  	234	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()  +  1));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(fnScope.getString()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getName()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
195	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent();  Preconditions.checkState(NodeUtil.isGetOrSetKey(parent,  function.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParent();  Preconditions.checkState(NodeUtil.isGetOrSetKey(parent,  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParent();  Preconditions.checkState(NodeUtil.isGetOrSetKey(parent,  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));    	non-compiled	[CE]  	87	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));    	non-compiled	[CE]  	87	None	replace
197	[BUG]  [BUGGY]  Node  c  =  function.getParentNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getParentNode();	  Node    c    =    parentScope.getCurrentNode();    	non-compiled	[CE]  	150	None	replace
198	[BUG]  [BUGGY]  Node  nameNode  =  function.getReferenceNameNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getReferenceNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getReferenceNameNode();	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
199	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getReferenceNameNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getReferenceNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getReferenceNameNode();	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
200	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(function);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode(function);	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
201	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getRawNode();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getRawNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getRawNode();	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
202	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(null);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode(null);	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
203	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(node);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(node);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
204	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(node);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(node);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(node);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
205	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(fnScope);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(fnScope);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
206	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode(function);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getFunctionNameNode(function);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
207	[BUG]  [BUGGY]  Node  nameNode  =  parent.getNameNode(node);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parent.getNameNode(node);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parent.getNameNode(node);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isConstructor());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isConstructor());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionDeclaration());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionDeclaration());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isDefine());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isDefine());	  Preconditions.checkState(function.isDefine()    ||    function.isExtern());    	non-compiled	[CE]  	259	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isFunctionExpression());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isFunctionExpression());	  Preconditions.checkState(function.isDefine()    ||    function.isExtern());    	non-compiled	[CE]  	259	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isConstructor());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isConstructor());	  Preconditions.checkState(function!=    null    &&    function.isConstructor());    	non-compiled	[CE]  	99	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isConstructor());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isConstructor());	  Preconditions.checkState(function!=    null    &&    function.isConstructor());    	non-compiled	[CE]  	99	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.isConstructor());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  &&  function.isConstructor());	  Preconditions.checkState(function!=    null    &&    function.isConstructor());    	non-compiled	[CE]  	99	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isConstructor());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isConstructor());	  Preconditions.checkState(function!=    null    &&    function.isConstructor());    	non-compiled	[CE]  	99	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isVarArgs());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isVarArgs());	  Preconditions.checkState(function!=    null    &&    function.isVarArgs());    	non-compiled	[CE]  	253	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isVarArgs());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isVarArgs());	  Preconditions.checkState(function!=    null    &&    function.isVarArgs());    	non-compiled	[CE]  	253	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isReferenced());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isReferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isReferenced());	  Preconditions.checkState(function!=    null    &&    function.isVarArgs());    	non-compiled	[CE]  	253	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunctionDeclaration());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isFunctionDeclaration());	  Preconditions.checkState(function!=    null    &&    function.isVarArgs());    	non-compiled	[CE]  	253	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(parent.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getNext()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
237	[BUG]  [BUGGY]  Node  nameNode  =  function.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getFirstChild();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
238	[BUG]  [BUGGY]  Node  nameNode  =  function.getFunctionNameNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getFunctionNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getFunctionNameNode();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
239	[BUG]  [BUGGY]  Node  nameNode  =  function.getQualifiedName();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getQualifiedName();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getQualifiedName();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
240	[BUG]  [BUGGY]  Node  nameNode  =  function.getLocalNameNode();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getLocalNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getLocalNameNode();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
241	[BUG]  [BUGGY]  Node  nameNode  =  function.getSimpleNameNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getSimpleNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getSimpleNameNode();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
242	[BUG]  [BUGGY]  Node  nameNode  =  parent.getNameNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parent.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parent.getNameNode();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()!=  Token.FUNCTION));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()!=  Token.FUNCTION));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()!=  Token.FUNCTION));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	136	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(parent.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	136	None	replace
253	[BUG]  [BUGGY]  Node  body  =  parentScope.getHeaderSize();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getHeaderSize();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getHeaderSize();	  Node    body    =    fnScope.getHeaderSize();    	non-compiled	[CE]  	171	None	replace
254	[BUG]  [BUGGY]  Node  body  =  function.getHeaderSize();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getHeaderSize();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getHeaderSize();	  Node    body    =    fnScope.getHeaderSize();    	non-compiled	[CE]  	171	None	replace
255	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderSize()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderSize()  +  1;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderSize()  +  1;	  Node    body    =    fnScope.getHeaderSize();    	non-compiled	[CE]  	171	None	replace
256	[BUG]  [BUGGY]  Node  body  =  scope.getHeaderSize();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getHeaderSize();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getHeaderSize();	  Node    body    =    fnScope.getHeaderSize();    	non-compiled	[CE]  	171	None	replace
257	[BUG]  [BUGGY]  Node  body  =  fnScope.getRealSize();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getRealSize();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getRealSize();	  Node    body    =    fnScope.getHeaderSize();    	non-compiled	[CE]  	171	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	157	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  &&  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  &&  function.isFunction());	  Preconditions.checkState(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	157	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isConstructor()  ||  function.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isConstructor()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	157	None	replace
261	[BUG]  [BUGGY]  Node  parent  =  scope.getOwnScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getOwnScope();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	212	None	replace
262	[BUG]  [BUGGY]  Node  parent  =  function.getOwnScope();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getOwnScope();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	212	None	replace
263	[BUG]  [BUGGY]  Node  parent  =  fnScope.getAssignedParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getAssignedParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getAssignedParent();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	212	None	replace
264	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getNode();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	212	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	103	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	103	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()  +  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	103	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	72	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getType()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	72	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	72	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	72	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isUnreferenced());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isUnreferenced());	  Preconditions.checkState(function!=    null    &&    function.isUnreferenced());    	non-compiled	[CE]  	98	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())&&  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign,  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  isPropertyAssign));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  isPropertyAssign));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  isPropertyAssign));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()!=  null);	  Preconditions.checkState(function.getParent()!=    null);    	non-compiled	[CE]  	76	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getParent()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getParent()!=  null);	  Preconditions.checkState(function.getParent()!=    null);    	non-compiled	[CE]  	76	None	replace
286	[BUG]  [BUGGY]  Node  parent  =  function.getCurrentNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getCurrentNode();	  Node    parent    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	265	None	replace
287	[BUG]  [BUGGY]  Node  parent  =  fnScope.getCurrentParentNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getCurrentParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getCurrentParentNode();	  Node    parent    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	265	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isReferenced());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isReferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isReferenced());	  Preconditions.checkState(function!=    null    ||    function.isUnreferenced());    	non-compiled	[CE]  	26	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isExtern());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isExpression());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isVarArgs());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isVarArgs());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
305	[BUG]  [BUGGY]  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getFirstChild();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getFirstChild();	  Node    body    =    function.getFirstChild();    	non-compiled	[CE]  	236	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExpression());    	non-compiled	[CE]  	35	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isVarArgs());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isVarArgs());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExpression());    	non-compiled	[CE]  	35	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isDefine());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isDefine());	  Preconditions.checkState(function!=    null    &&    function.isDefine());    	non-compiled	[CE]  	186	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isDefine());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isDefine());	  Preconditions.checkState(function!=    null    &&    function.isDefine());    	non-compiled	[CE]  	186	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isDefine());	  Preconditions.checkState(function!=    null    &&    function.isDefine());    	non-compiled	[CE]  	186	None	replace
315	[BUG]  [BUGGY]  Node  body  =  parentScope.getReferencedFunctionNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getReferencedFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getReferencedFunctionNode();	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
316	[BUG]  [BUGGY]  Node  body  =  function.getReferencedFunctionNode();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getReferencedFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getReferencedFunctionNode();	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
317	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionBody();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionBody();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionBody();	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
318	[BUG]  [BUGGY]  Node  body  =  scope.getReferencedFunctionNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getReferencedFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getReferencedFunctionNode();	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
319	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionRootNode();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionRootNode();	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	45	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	45	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	45	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(function!=    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	45	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(function  >=  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  >=  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  >=  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	45	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  &&  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isAll());    	non-compiled	[CE]  	7	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isAll());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isEmpty()  ||  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isAll());    	non-compiled	[CE]  	7	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isAll());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isAll()  ||  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isAll());    	non-compiled	[CE]  	7	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isVar());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  ||  function.isVar());	  Preconditions.checkState(function.isAll()    ||    function.isAll());    	non-compiled	[CE]  	7	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isDefine());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isDefine());	  Preconditions.checkState(function.isDefine()    ||    function.isUnreferenced());    	non-compiled	[CE]  	182	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isDefine()    ||    function.isUnreferenced());    	non-compiled	[CE]  	182	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isReferenced()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isDefine()    ||    function.isUnreferenced());    	non-compiled	[CE]  	182	None	replace
332	[BUG]  [BUGGY]  Node  parentScope  =  function.getNameNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getNameNode();	  Node    parentScope    =    fnScope.getNameNode();    	non-compiled	[CE]  	66	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	159	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isConstructor());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	159	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isConstructor());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||  function.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	159	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunctionExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isFunctionExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isFunctionExpression());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnreferencedFunctionExpression());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnreferencedFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isUnreferencedFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
341	[BUG]  [BUGGY]  Node  function  =  fnScope.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  function  =  fnScope.getParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  function  =  fnScope.getParent();	  Node    parentScope    =    function.getParent();    	non-compiled	[CE]  	141	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getName()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getName()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getName()!=  null);	  Preconditions.checkState(function.getName()!=    null);    	non-compiled	[CE]  	210	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getName()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getName()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getName()!=  null);	  Preconditions.checkState(function.getName()!=    null);    	non-compiled	[CE]  	210	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getName()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getName()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getName()  ==  null);	  Preconditions.checkState(function.getName()    ==    null);    	non-compiled	[CE]  	181	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getName()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getName()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getName()  ==  null);	  Preconditions.checkState(function.getName()    ==    null);    	non-compiled	[CE]  	181	None	replace
346	[BUG]  [BUGGY]  Node  c  =  parentScope.getRootNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getRootNode();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
347	[BUG]  [BUGGY]  Node  c  =  function.getRootNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getRootNode();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
348	[BUG]  [BUGGY]  Node  c  =  scope.getRootNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  scope.getRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  scope.getRootNode();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
349	[BUG]  [BUGGY]  Node  c  =  fnScope.getParentNode();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getParentNode();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
350	[BUG]  [BUGGY]  Node  c  =  fnScope.getFunctionNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFunctionNode();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  FunctionUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  FunctionUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  FunctionUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isUnreferenced());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
364	[BUG]  [BUGGY]  Node  parent  =  function.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getNext();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getNext();	  Node    parent    =    fnScope.getNext();    	non-compiled	[CE]  	12	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isExtern()  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isExtern()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isExtern()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	167	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	167	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isExtern());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.isExtern());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	167	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isExtern());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||  function.isExtern());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	167	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	83	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isType());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isType());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isFunction());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isUnreferenced());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isConstructor());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  &&  function.isConstructor());	  Preconditions.checkState(function.isDefined()    ||    function.isConstructor());    	non-compiled	[CE]  	161	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  function.isConstructor());	  Preconditions.checkState(function.isDefined()    ||    function.isConstructor());    	non-compiled	[CE]  	161	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isDefined());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isDefined());	  Preconditions.checkState(function.isDefined()    ||    function.isConstructor());    	non-compiled	[CE]  	161	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isImmutable());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isImmutable());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isImmutable());	  Preconditions.checkState(function.isDefined()    ||    function.isConstructor());    	non-compiled	[CE]  	161	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(fnScope.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(fnScope.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(fnScope.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getType()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()  +  1));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getNext()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isPropertyAssignment());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isPropertyAssignment());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isPropertyAssignment());	  Preconditions.checkState(function!=    null    ||    function.isAssignmentOp());    	non-compiled	[CE]  	40	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunctionOp());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunctionOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isFunctionOp());	  Preconditions.checkState(function!=    null    ||    function.isAssignmentOp());    	non-compiled	[CE]  	40	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	52	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	52	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isUnreferenced());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	24	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	24	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isExtern());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isEmpty()  ||  function.isExtern());	  Preconditions.checkState(function.isAll()    ||    function.isExtern());    	non-compiled	[CE]  	175	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isExtern());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  &&  function.isExtern());	  Preconditions.checkState(function.isAll()    ||    function.isExtern());    	non-compiled	[CE]  	175	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isExtern());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  ||  function.isExtern());	  Preconditions.checkState(function.isAll()    ||    function.isExtern());    	non-compiled	[CE]  	175	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isAll());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isExtern());    	non-compiled	[CE]  	175	None	replace
409	[BUG]  [BUGGY]  Node  c  =  parentScope.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getLastChild();	  Node    c    =    fnScope.getLastChild();    	non-compiled	[CE]  	155	None	replace
410	[BUG]  [BUGGY]  Node  c  =  scope.getLastChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  scope.getLastChild();	  Node    c    =    fnScope.getLastChild();    	non-compiled	[CE]  	155	None	replace
411	[BUG]  [BUGGY]  Node  c  =  fnScope.getParent();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getParent();	  Node    c    =    fnScope.getLastChild();    	non-compiled	[CE]  	155	None	replace
412	[BUG]  [BUGGY]  Node  c  =  fnScope.getNext();  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getNext();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getNext();	  Node    c    =    fnScope.getLastChild();    	non-compiled	[CE]  	155	None	replace
413	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  scope.getParent()  :  function;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  scope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  scope.getParent()  :  function;	  Node    parentScope    =    scope.getParent();    	non-compiled	[CE]  	142	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope,  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  &&  function.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  &&  function.isConstructor());	  Preconditions.checkState(function.isExtern()    ||    function.isConstructor());    	non-compiled	[CE]  	162	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isExtern()  ||  function.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isExtern()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isExtern()  ||  function.isConstructor());	  Preconditions.checkState(function.isExtern()    ||    function.isConstructor());    	non-compiled	[CE]  	162	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isConstructor());	  Preconditions.checkState(function.isExtern()    ||    function.isConstructor());    	non-compiled	[CE]  	162	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isConstructor());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isEmpty()  ||  function.isConstructor());	  Preconditions.checkState(function.isExtern()    ||    function.isConstructor());    	non-compiled	[CE]  	162	None	replace
424	[BUG]  [BUGGY]  Node  c  =  function.getCurrentToken();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getCurrentToken();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getCurrentToken();	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
425	[BUG]  [BUGGY]  Node  c  =  parentScope.getCurrentToken();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getCurrentToken();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getCurrentToken();	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
426	[BUG]  [BUGGY]  Node  c  =  scope.getCurrentToken();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  scope.getCurrentToken();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  scope.getCurrentToken();	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
427	[BUG]  [BUGGY]  Node  c  =  fnScope.getCurrentName();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getCurrentName();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getCurrentName();	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
428	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  nameNode;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  nameNode;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  nameNode;	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getName()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()),  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getQualifiedName()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getQualifiedName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getQualifiedName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getFirstChild()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getLocalPart()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getLocalPart()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getLocalPart()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getNext()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isUnreferenced());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isUnreferenced());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnreferenced());    	non-compiled	[CE]  	23	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDefined());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDefined());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnreferenced());    	non-compiled	[CE]  	23	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isReferenced());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isReferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isReferenced());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnreferenced());    	non-compiled	[CE]  	23	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAssignableFrom(fnScope.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAssignableFrom(fnScope.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAssignableFrom(fnScope.getParent()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnreferenced());    	non-compiled	[CE]  	23	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isType());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isType());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isType());	  Preconditions.checkState(function.isType()    ||    function.isExtern());    	non-compiled	[CE]  	176	None	replace
441	[BUG]  [BUGGY]  Node  parent  =  function.getReferenceNameNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getReferenceNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getReferenceNameNode();	  Node    parent    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	214	None	replace
442	[BUG]  [BUGGY]  Node  parent  =  scope.getReferenceNameNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getReferenceNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getReferenceNameNode();	  Node    parent    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	214	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);	  Preconditions.checkState(function.getParent()    ==    null);    	non-compiled	[CE]  	75	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent())||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  FunctionUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  FunctionUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  FunctionUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	86	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	86	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	86	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	86	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()).isFunction());	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	86	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isDefined());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isDefined());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isUnreferenced());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isReferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isReferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isReferenced());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
471	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getRootNode()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getRootNode()!=  null);	  Preconditions.checkState(parentScope.getRootNode()    ==    null);    	non-compiled	[CE]  	95	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkState(scope.getRootNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(scope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(scope.getRootNode()  ==  null);	  Preconditions.checkState(parentScope.getRootNode()    ==    null);    	non-compiled	[CE]  	95	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	53	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	53	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	53	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	53	None	replace
477	[BUG]  [BUGGY]  Node  body  =  parentScope.getOwnScope();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getOwnScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
478	[BUG]  [BUGGY]  Node  body  =  function.getOwnScope();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getOwnScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
479	[BUG]  [BUGGY]  Node  body  =  scope.getOwnScope();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getOwnScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
480	[BUG]  [BUGGY]  Node  body  =  fnScope.getAssignedScope();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAssignedScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAssignedScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
481	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedScope();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
482	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderScope();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
483	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	145	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(parent.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	145	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	145	None	replace
486	[BUG]  [BUGGY]  Node  parent  =  function.getOwnerNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getOwnerNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getOwnerNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	264	None	replace
487	[BUG]  [BUGGY]  Node  parent  =  scope.getOwnerNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getOwnerNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getOwnerNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	264	None	replace
488	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerParent();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	264	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	147	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	147	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	147	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	147	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	147	None	replace
501	[BUG]  [BUGGY]  Node  parent  =  function.getOwnerFunctionParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getOwnerFunctionParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getOwnerFunctionParent();	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
502	[BUG]  [BUGGY]  Node  parent  =  scope.getOwnerFunctionParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getOwnerFunctionParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getOwnerFunctionParent();	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
503	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent(parent);	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
504	[BUG]  [BUGGY]  Node  parent  =  fnScope.getFunctionParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getFunctionParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getFunctionParent();	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()  ==  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getFirstChild()  ==  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getFirstChild()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getFirstChild()  ==  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()!=  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()!=  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  fnScope.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  fnScope.isFunction());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  fnScope.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  fnScope.isFunction());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.isFunction());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  fnScope.isFunction());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isFunctionExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
517	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  parentScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope,  scope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  function);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getString()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope.getParent());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope.getParent());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope.getParent());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	266	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isImmutableValue(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	266	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isVar(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isVar(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	266	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssign(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isAssign(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isAssign(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	266	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	266	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  &&  function.isConstructor());	  Preconditions.checkState(function.isAll()    ||    function.isConstructor());    	non-compiled	[CE]  	164	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isAll());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isConstructor());    	non-compiled	[CE]  	164	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isConstructor());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isAll()  ||  function.isConstructor());	  Preconditions.checkState(function.isAll()    ||    function.isConstructor());    	non-compiled	[CE]  	164	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isConstructor());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  ||  function.isConstructor());	  Preconditions.checkState(function.isAll()    ||    function.isConstructor());    	non-compiled	[CE]  	164	None	replace
533	[BUG]  [BUGGY]  Node  c  =  function.getCurrentNameNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getCurrentNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getCurrentNameNode();	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
534	[BUG]  [BUGGY]  Node  c  =  parentScope.getCurrentNameNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getCurrentNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getCurrentNameNode();	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
535	[BUG]  [BUGGY]  Node  c  =  scope.getCurrentNameNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  scope.getCurrentNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  scope.getCurrentNameNode();	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  0);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  0);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getChildCount()  ==  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  4);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  4);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  4);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()!=  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()!=  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()!=  1);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  3);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  3);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  3);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getParentNode()  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getParentNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getParentNode()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getRootNode()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.getRootNode()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getNode()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getRootNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getRootNode()!=  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getParent()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getParent()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getNameNode()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getNameNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getNameNode()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isConstructor());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.isConstructor());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
549	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  &&  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  &&  function.isFunction());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
550	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isUnreferenced());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isUnreferenced());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
551	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isFunctionExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isFunctionExpression());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
552	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefined()  ||  function.isFunction());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isInterface());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isInterface());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isInterface());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isAssignmentOp());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isAssignmentOp());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getNext()  ==  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getNext()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getNext()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
559	[BUG]  [BUGGY]  Preconditions.checkArgument(function  ==  null  &&  function.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function  ==  null  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function  ==  null  &&  function.isFunction());	  Preconditions.checkArgument(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	250	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isUnreferenced());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isUnreferenced());	  Preconditions.checkArgument(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	250	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkArgument(function  ==  null  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function  ==  null  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function  ==  null  ||  function.isFunction());	  Preconditions.checkArgument(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	250	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isConstructor());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isConstructor());	  Preconditions.checkArgument(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	250	None	replace
563	[BUG]  [BUGGY]  Node  body  =  scope.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getLastChild();	  Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	128	None	replace
564	[BUG]  [BUGGY]  Node  body  =  nScope.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  nScope.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  nScope.getLastChild();	  Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	128	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  function.isFunction());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isFunction());    	non-compiled	[CE]  	27	None	replace
566	[BUG]  [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isReferenced()  ||  function.isFunction());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isFunction());    	non-compiled	[CE]  	27	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  ||  function.isFunction());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isFunction());    	non-compiled	[CE]  	27	None	replace
568	[BUG]  [BUGGY]  Node  body  =  parentScope.getFunctionDeclaration();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getFunctionDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getFunctionDeclaration();	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
569	[BUG]  [BUGGY]  Node  body  =  function.getFunctionDeclaration();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getFunctionDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getFunctionDeclaration();	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
570	[BUG]  [BUGGY]  Node  body  =  scope.getFunctionDeclaration();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getFunctionDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getFunctionDeclaration();	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
571	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeclaration();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeclaration();	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
572	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionDeclaration();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionDeclaration();	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.CALL);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()!=  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
576	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
577	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  Token.CALL);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
580	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.CALL);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParent()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
581	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(referenced);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(referenced);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(referenced);	  Node    nameNode    =    fnScope.getNameNode(referenced);    	non-compiled	[CE]  	61	None	replace
582	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(referenced);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(referenced);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(referenced);	  Node    nameNode    =    fnScope.getNameNode(referenced);    	non-compiled	[CE]  	61	None	replace
583	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(referenced,  parent);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(referenced,  parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(referenced,  parent);	  Node    nameNode    =    fnScope.getNameNode(referenced);    	non-compiled	[CE]  	61	None	replace
584	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(name);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(name);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(name);	  Node    nameNode    =    fnScope.getNameNode(referenced);    	non-compiled	[CE]  	61	None	replace
585	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  &&  function.isFunction());	  Preconditions.checkState(function.isFunction()    &&    function.isAll());    	non-compiled	[CE]  	3	None	replace
586	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isAll());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.isAll());	  Preconditions.checkState(function.isFunction()    &&    function.isAll());    	non-compiled	[CE]  	3	None	replace
587	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isAll());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  function.isAll());	  Preconditions.checkState(function.isFunction()    &&    function.isAll());    	non-compiled	[CE]  	3	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  &&  function.isAll());	  Preconditions.checkState(function.isFunction()    &&    function.isAll());    	non-compiled	[CE]  	3	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  &&  function.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVar()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  &&  function.isAll());	  Preconditions.checkState(function.isFunction()    &&    function.isAll());    	non-compiled	[CE]  	3	None	replace
590	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFunction()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFunction()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	121	None	replace
591	[BUG]  [BUGGY]  Node  parentScope  =  function.getParentScope();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getParentScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getParentScope();	  Node    parentScope    =    function.getParentNode();    	non-compiled	[CE]  	62	None	replace
592	[BUG]  [BUGGY]  Node  parent  =  function.getNameNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getNameNode();	  Node    parent    =    fnScope.getNameNode();    	non-compiled	[CE]  	11	None	replace
593	[BUG]  [BUGGY]  Node  parent  =  function.getPrefixNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getPrefixNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getPrefixNode();	  Node    parent    =    fnScope.getPrefixNode();    	non-compiled	[CE]  	14	None	replace
594	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isExtern());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isExtern());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExtern());    	non-compiled	[CE]  	34	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExtern());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExtern());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExtern());    	non-compiled	[CE]  	34	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isExtern());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExtern());    	non-compiled	[CE]  	34	None	replace
597	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getFunctionNameNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getFunctionNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getFunctionNameNode();	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
598	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode(null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode(null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getFunctionNameNode(null);	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
599	[BUG]  [BUGGY]  Node  nameNode  =  function.getScopeNameNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getScopeNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getScopeNameNode();	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
600	[BUG]  [BUGGY]  Node  nameNode  =  function.getFnScopeNameNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getFnScopeNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getFnScopeNameNode();	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
601	[BUG]  [BUGGY]  Node  parent  =  function.getImmediateParentNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getImmediateParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getImmediateParentNode();	  Node    parent    =    function.getParentNode();    	non-compiled	[CE]  	80	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(function.isExpression()  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExpression()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExpression()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isExpression());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isExpression());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isExpression());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isExtern());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isExtern());	  Preconditions.checkState(function.isExtern()    ||    function.isFunction());    	non-compiled	[CE]  	165	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isEmpty()  ||  function.isFunction());	  Preconditions.checkState(function.isExtern()    ||    function.isFunction());    	non-compiled	[CE]  	165	None	replace
610	[BUG]  [BUGGY]  Node  body  =  parentScope.getReferencedFunction();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getReferencedFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getReferencedFunction();	  Node    body    =    fnScope.getReferencedFunction();    	non-compiled	[CE]  	20	None	replace
611	[BUG]  [BUGGY]  Node  body  =  function.getReferencedFunction();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getReferencedFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getReferencedFunction();	  Node    body    =    fnScope.getReferencedFunction();    	non-compiled	[CE]  	20	None	replace
612	[BUG]  [BUGGY]  Node  body  =  scope.getReferencedFunction();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getReferencedFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getReferencedFunction();	  Node    body    =    fnScope.getReferencedFunction();    	non-compiled	[CE]  	20	None	replace
613	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedBody();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedBody();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedBody();	  Node    body    =    fnScope.getReferencedFunction();    	non-compiled	[CE]  	20	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isAll());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVarArgs()  ||  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isVarArgs());    	non-compiled	[CE]  	117	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isVarArgs());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  &&  function.isVarArgs());	  Preconditions.checkState(function.isAll()    ||    function.isVarArgs());    	non-compiled	[CE]  	117	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isUnknown());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isUnknown());	  Preconditions.checkState(function.isAll()    ||    function.isVarArgs());    	non-compiled	[CE]  	117	None	replace
617	[BUG]  [BUGGY]  Node  parent  =  fnScope.getPreviousParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getPreviousParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getPreviousParent();	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	10	None	replace
618	[BUG]  [BUGGY]  Node  c  =  parentScope.getFunctionNode(function);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getFunctionNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getFunctionNode(function);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
619	[BUG]  [BUGGY]  Node  c  =  function.getFunctionNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getFunctionNode();	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
620	[BUG]  [BUGGY]  Node  c  =  scope.getFunctionNode(function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  scope.getFunctionNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  scope.getFunctionNode(function);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
621	[BUG]  [BUGGY]  Node  c  =  function.getFunctionNode(fnScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getFunctionNode(fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getFunctionNode(fnScope);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
622	[BUG]  [BUGGY]  Node  c  =  parentScope.getFunctionNode(fnScope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getFunctionNode(fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getFunctionNode(fnScope);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
623	[BUG]  [BUGGY]  Node  c  =  fnScope.getNode();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getNode();	  Node    c    =    function.getNode();    	non-compiled	[CE]  	156	None	replace
624	[BUG]  [BUGGY]  Node  c  =  parentScope.getNode();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getNode();	  Node    c    =    function.getNode();    	non-compiled	[CE]  	156	None	replace
625	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferencedNameNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferencedNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferencedNameNode();	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
626	[BUG]  [BUGGY]  Node  nameNode  =  scope.getNameNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  scope.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  scope.getNameNode();	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
627	[BUG]  [BUGGY]  Node  nameNode  =  node.getNameNode();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  node.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  node.getNameNode();	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
630	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
631	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
632	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
633	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
634	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  mayHaveSecondarySideEffects);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  mayHaveSecondarySideEffects);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  mayHaveSecondarySideEffects);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	270	None	replace
635	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	270	None	replace
636	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	270	None	replace
637	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefined()  ||  function.isAll());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
638	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  &&  function.isAll());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
639	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  ||  function.isAll());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDefined()  ||  function.isAll());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
640	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefined()  ||  function.isAll());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefined()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefined()  ||  function.isAll());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
641	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isDefined());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isDefined());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isVarArgs());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVarArgs()  ||  function.isVarArgs());	  Preconditions.checkState(function.isVarArgs()    ||    function.isFunction());    	non-compiled	[CE]  	113	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isVarArgs()  ||  function.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isVarArgs()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isVarArgs()  ||  function.isFunction());	  Preconditions.checkState(function.isVarArgs()    ||    function.isFunction());    	non-compiled	[CE]  	113	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssign()  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssign()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssign()  ||  function.isFunction());	  Preconditions.checkState(function.isVarArgs()    ||    function.isFunction());    	non-compiled	[CE]  	113	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isFunction());	  Preconditions.checkState(function.isVarArgs()    ||    function.isFunction());    	non-compiled	[CE]  	113	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.CALL);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.CALL);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.CALL);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
651	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
653	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	123	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	123	None	replace
656	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	123	None	replace
657	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
658	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
660	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
661	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
664	[BUG]  [BUGGY]  Node  body  =  parentScope.getBody();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getBody();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getBody();	  Node    body    =    fnScope.getBody();    	non-compiled	[CE]  	21	None	replace
665	[BUG]  [BUGGY]  Node  body  =  function.getBody();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getBody();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getBody();	  Node    body    =    fnScope.getBody();    	non-compiled	[CE]  	21	None	replace
666	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isImmutableValue(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
667	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(fnScope.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(fnScope.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
668	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isSetKey(function.getString()));    	non-compiled	[CE]  	140	None	replace
669	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isSetKey(function.getString()));    	non-compiled	[CE]  	140	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.isConstructor());	  Preconditions.checkState(function.isFunction()    &&    function.isConstructor());    	non-compiled	[CE]  	158	None	replace
671	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isDefined());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isDefined());	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
672	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isDefined());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isDefined());	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAssignableFrom(fnScope.getRootNode()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAssignableFrom(fnScope.getRootNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isAssignableFrom(fnScope.getRootNode()));	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAssignableFrom(fnScope.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAssignableFrom(fnScope.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isAssignableFrom(fnScope.getParent()));	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isName());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isName());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isName());	  Preconditions.checkState(function.isName()    ||    function.isExtern());    	non-compiled	[CE]  	178	None	replace
676	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  &&  function.isExtern());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  &&  function.isExtern());	  Preconditions.checkState(function.isName()    ||    function.isExtern());    	non-compiled	[CE]  	178	None	replace
677	[BUG]  [BUGGY]  Node  parentScope  =  function.getNextNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getNextNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getNextNode();	  Node    parentScope    =    fnScope.getNextNode();    	non-compiled	[CE]  	190	None	replace
678	[BUG]  [BUGGY]  Node  parentScope  =  scope.getNextNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getNextNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getNextNode();	  Node    parentScope    =    fnScope.getNextNode();    	non-compiled	[CE]  	190	None	replace
679	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getPreviousNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getPreviousNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getPreviousNode();	  Node    parentScope    =    fnScope.getNextNode();    	non-compiled	[CE]  	190	None	replace
680	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getNextScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getNextScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getNextScope();	  Node    parentScope    =    fnScope.getNextNode();    	non-compiled	[CE]  	190	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
687	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  parentScope.getParent()!=  null);	  Preconditions.checkState(parentScope.getParent()!=    null);    	non-compiled	[CE]  	110	None	replace
688	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  parentScope.getParent()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  parentScope.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  parentScope.getParent()!=  null);	  Preconditions.checkState(parentScope.getParent()!=    null);    	non-compiled	[CE]  	110	None	replace
689	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isVar());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isVar());	  Preconditions.checkState(function.isVar()    ||    function.isUnreferenced());    	non-compiled	[CE]  	127	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(function.isNode()  ||  function.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isNode()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isNode()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isVar()    ||    function.isUnreferenced());    	non-compiled	[CE]  	127	None	replace
691	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignmentOp()  ||  function.isUnreferenced());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignmentOp()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignmentOp()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isVar()    ||    function.isUnreferenced());    	non-compiled	[CE]  	127	None	replace
692	[BUG]  [BUGGY]  Node  parentScope  =  scope.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getLastChild();	  Node    parentScope    =    fnScope.getLastChild();    	non-compiled	[CE]  	64	None	replace
693	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getOwnScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getOwnScope();	  Node    parentScope    =    fnScope.getLastChild();    	non-compiled	[CE]  	64	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isFunction());    	non-compiled	[CE]  	241	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isAssignment());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isAssignment());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isAssignment());	  Preconditions.checkState(function.isFunction()    ||    function.isFunction());    	non-compiled	[CE]  	241	None	replace
696	[BUG]  [BUGGY]  Node  body  =  parentScope.getFunctionNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getFunctionNode();	  Node    body    =    fnScope.getFunctionNode();    	non-compiled	[CE]  	17	None	replace
697	[BUG]  [BUGGY]  Node  body  =  function.getFunctionNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getFunctionNode();	  Node    body    =    fnScope.getFunctionNode();    	non-compiled	[CE]  	17	None	replace
698	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
699	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
700	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
701	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
702	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
703	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
704	[BUG]  [BUGGY]  Node  parent  =  function.getConstructorNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getConstructorNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getConstructorNode();	  Node    parent    =    fnScope.getConstructorNode();    	non-compiled	[CE]  	82	None	replace
705	[BUG]  [BUGGY]  Node  parent  =  fnScope.getContainingConvention();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getContainingConvention();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getContainingConvention();	  Node    parent    =    fnScope.getConstructorNode();    	non-compiled	[CE]  	82	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild(),  function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
707	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()),  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
711	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
713	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()),  isPropertyAssign));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()),  isPropertyAssign));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()),  isPropertyAssign));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
714	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isDefine());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isDefine());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
715	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&  function.isConstructor());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
716	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||  function.isConstructor());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isInterface());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isInterface());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isInterface());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
718	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isImmutable());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isImmutable());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isImmutable());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
719	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getChildCount()  ==  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getChildCount()  ==  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getChildCount()  ==  2);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    2);    	non-compiled	[CE]  	238	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()!=  2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()!=  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()!=  2);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    2);    	non-compiled	[CE]  	238	None	replace
721	[BUG]  [BUGGY]  Node  body  =  parentScope.getDeepestChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getDeepestChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getDeepestChild();	  Node    body    =    fnScope.getDeepestChild();    	non-compiled	[CE]  	257	None	replace
722	[BUG]  [BUGGY]  Node  body  =  function.getDeepestChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getDeepestChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getDeepestChild();	  Node    body    =    fnScope.getDeepestChild();    	non-compiled	[CE]  	257	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	134	None	replace
724	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	134	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	134	None	replace
726	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	134	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  FunctionUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	134	None	replace
728	[BUG]  [BUGGY]  Node  body  =  parentScope.getCurrentNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getCurrentNode();	  Node    body    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	130	None	replace
729	[BUG]  [BUGGY]  Node  body  =  function.getCurrentNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getCurrentNode();	  Node    body    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	130	None	replace
730	[BUG]  [BUGGY]  Node  body  =  fnScope.getRawNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getRawNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getRawNode();	  Node    body    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	130	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	49	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	49	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	49	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isDefine());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isDefine());	  Preconditions.checkState(function.isDefine()    ||    function.isAll());    	non-compiled	[CE]  	173	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isAll());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||  function.isAll());	  Preconditions.checkState(function.isDefine()    ||    function.isAll());    	non-compiled	[CE]  	173	None	replace
736	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isAll());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&  function.isAll());	  Preconditions.checkState(function.isDefine()    ||    function.isAll());    	non-compiled	[CE]  	173	None	replace
737	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefine()  ||  function.isAll());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefine()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefine()  ||  function.isAll());	  Preconditions.checkState(function.isDefine()    ||    function.isAll());    	non-compiled	[CE]  	173	None	replace
738	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.isAll());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  &&  function.isAll());	  Preconditions.checkState(function!=    null    &&    function.isAll());    	non-compiled	[CE]  	254	None	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
740	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
741	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FOR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FOR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FOR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
742	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
743	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
744	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()!=  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.getType()!=  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
745	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
747	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isVar());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isVar());	  Preconditions.checkState(function.isVar()    ||    function.isAll());    	non-compiled	[CE]  	5	None	replace
748	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isVar()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isVar()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isVar()  ||  function.isAll());	  Preconditions.checkState(function.isVar()    ||    function.isAll());    	non-compiled	[CE]  	5	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isAll());	  Preconditions.checkState(function.isVar()    ||    function.isAll());    	non-compiled	[CE]  	5	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isAll()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isAll()    ||    function.isUnreferenced());    	non-compiled	[CE]  	124	None	replace
751	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isAll()    ||    function.isUnreferenced());    	non-compiled	[CE]  	124	None	replace
752	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
754	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
755	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isStatement());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isStatement());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isStatement());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
756	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
757	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
758	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isExpression());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
760	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isDefine());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isDefine());	  Preconditions.checkState(function.isFunction()    ||    function.isDefine());    	non-compiled	[CE]  	271	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isDefine());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isDefine());	  Preconditions.checkState(function.isFunction()    ||    function.isDefine());    	non-compiled	[CE]  	271	None	replace
762	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isDefine());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isDefine());	  Preconditions.checkState(function.isFunction()    ||    function.isDefine());    	non-compiled	[CE]  	271	None	replace
763	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	108	None	replace
764	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	108	None	replace
765	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	108	None	replace
766	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
767	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  isPropertyAssign);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  &&  isPropertyAssign);	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
768	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
769	[BUG]  [BUGGY]  Preconditions.checkState(!function.isAll());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isAll());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
770	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  ||  isPropertyAssign());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  ||  isPropertyAssign());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  ||  isPropertyAssign());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
771	[BUG]  [BUGGY]  Node  body  =  parentScope.getFunctionExpression();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getFunctionExpression();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getFunctionExpression();	  Node    body    =    fnScope.getFunctionExpression();    	non-compiled	[CE]  	133	None	replace
772	[BUG]  [BUGGY]  Node  body  =  function.getFunctionExpression();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getFunctionExpression();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getFunctionExpression();	  Node    body    =    fnScope.getFunctionExpression();    	non-compiled	[CE]  	133	None	replace
773	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionExpression();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionExpression();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionExpression();	  Node    body    =    fnScope.getFunctionExpression();    	non-compiled	[CE]  	133	None	replace
774	[BUG]  [BUGGY]  Node  body  =  scope.getFunctionExpression();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getFunctionExpression();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getFunctionExpression();	  Node    body    =    fnScope.getFunctionExpression();    	non-compiled	[CE]  	133	None	replace
775	[BUG]  [BUGGY]  Preconditions.checkArgument(function  ==  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function  ==  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function  ==  null  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	232	None	replace
776	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	232	None	replace
777	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	135	None	replace
778	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	135	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
780	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
781	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
783	[BUG]  [BUGGY]  Preconditions.checkState(parent.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
784	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isFunctionExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunctionExpression());    	non-compiled	[CE]  	32	None	replace
785	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isFunctionExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunctionExpression());    	non-compiled	[CE]  	32	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunctionExpression());    	non-compiled	[CE]  	32	None	replace
787	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferencedFunctionExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferencedFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferencedFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunctionExpression());    	non-compiled	[CE]  	32	None	replace
788	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
789	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
791	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  FunctionUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  FunctionUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  FunctionUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isConstructor()  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isConstructor()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
795	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isUnreferenced());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  function.isUnreferenced());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
796	[BUG]  [BUGGY]  Preconditions.checkState(!function.isConstructor()  ||  function.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isConstructor()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
797	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isConstructor()  ||  function.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!fnScope.isConstructor()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!fnScope.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
798	[BUG]  [BUGGY]  Node  nameNode  =  parent.getNameNode(fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parent.getNameNode(fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parent.getNameNode(fnScope);	  Node    nameNode    =    fnScope.getNameNode(parent);    	non-compiled	[CE]  	206	None	replace
799	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(parent);	  Node    nameNode    =    fnScope.getNameNode(parent);    	non-compiled	[CE]  	206	None	replace
800	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(fnScope);	  Node    nameNode    =    fnScope.getNameNode(parent);    	non-compiled	[CE]  	206	None	replace
801	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	200	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	200	None	replace
803	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	200	None	replace
804	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	200	None	replace
805	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(function);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(function);	  Node    nameNode    =    fnScope.getNameNode(function);    	non-compiled	[CE]  	60	None	replace
806	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(this.nameNode);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(this.nameNode);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(this.nameNode);	  Node    nameNode    =    fnScope.getNameNode(function);    	non-compiled	[CE]  	60	None	replace
807	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  true);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  true);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function,  true);	  Node    nameNode    =    fnScope.getNameNode(function);    	non-compiled	[CE]  	60	None	replace
808	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
809	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
811	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
812	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&  function.isUnreferenced());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    &&    function.isUnreferenced());    	non-compiled	[CE]  	126	None	replace
813	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isUnreferenced());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    &&    function.isUnreferenced());    	non-compiled	[CE]  	126	None	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    &&    function.isUnreferenced());    	non-compiled	[CE]  	126	None	replace
815	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	112	None	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getFirstChild()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getFirstChild()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	112	None	replace
817	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getNext()!=  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getNext()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getNext()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	112	None	replace
818	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNext()!=  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getNext()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getNext()!=  null);	  Preconditions.checkState(function.getNext()!=    null);    	non-compiled	[CE]  	112	None	replace
819	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    &&    function.isFunction());    	non-compiled	[CE]  	29	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    &&    function.isFunction());    	non-compiled	[CE]  	29	None	replace
821	[BUG]  [BUGGY]  Node  body  =  fnScope.getLocalName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getLocalName();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getLocalName();	  Node    body    =    fnScope.getFirstChild();    	non-compiled	[CE]  	129	None	replace
822	[BUG]  [BUGGY]  Node  body  =  fnScope.getLocalFunction();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getLocalFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getLocalFunction();	  Node    body    =    fnScope.getFirstChild();    	non-compiled	[CE]  	129	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.hasChildren());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
826	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasAnyChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasAnyChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasAnyChildren());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
827	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasOneChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasOneChild());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasOneChild());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
828	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasParent());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasParent());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
829	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren();	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
830	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasAllChildren());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasAllChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasAllChildren());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
831	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isLocal());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isLocal());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isLocal());	  Preconditions.checkState(function.isAll()    ||    function.isFunction());    	non-compiled	[CE]  	1	None	replace
832	[BUG]  [BUGGY]  Node  c  =  function.getCurrentScope();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getCurrentScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getCurrentScope();	  Node    c    =    function.getCurrentNode();    	non-compiled	[CE]  	149	None	replace
833	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()  +  1));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()    +    1));    	non-compiled	[CE]  	71	None	replace
834	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()    +    1));    	non-compiled	[CE]  	71	None	replace
835	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isConstructor());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  function.isConstructor());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isConstructor());    	non-compiled	[CE]  	160	None	replace
836	[BUG]  [BUGGY]  Preconditions.checkState(function.isNode()  ||  function.isConstructor());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isNode()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isNode()  ||  function.isConstructor());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isConstructor());    	non-compiled	[CE]  	160	None	replace
837	[BUG]  [BUGGY]  Node  parentScope  =  function.getOwnerScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getOwnerScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getOwnerScope();	  Node    parentScope    =    fnScope.getOwnerScope();    	non-compiled	[CE]  	246	None	replace
838	[BUG]  [BUGGY]  Node  parentScope  =  scope.getOwnerScope();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getOwnerScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getOwnerScope();	  Node    parentScope    =    fnScope.getOwnerScope();    	non-compiled	[CE]  	246	None	replace
839	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getConstructorScope();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getConstructorScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getConstructorScope();	  Node    parentScope    =    fnScope.getOwnerScope();    	non-compiled	[CE]  	246	None	replace
840	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getFunctionScope();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getFunctionScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getFunctionScope();	  Node    parentScope    =    fnScope.getOwnerScope();    	non-compiled	[CE]  	246	None	replace
841	[BUG]  [BUGGY]  Node  parent  =  scope.getParentOfRootNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getParentOfRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getParentOfRootNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
842	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfFunctionNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfFunctionNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
843	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfVarNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfVarNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfVarNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
844	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
845	[BUG]  [BUGGY]  Node  parent  =  function.getParentOfRootNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getParentOfRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getParentOfRootNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
846	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfChildNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfChildNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfChildNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
847	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	148	None	replace
848	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	148	None	replace
849	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	148	None	replace
850	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	148	None	replace
851	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	148	None	replace
852	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getParentNode()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getParentNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getParentNode()  ==  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getRootNode()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getRootNode()!=  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
854	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getNode()  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getNode()  ==  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getRootNode()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.getRootNode()!=  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
856	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getFirstChild()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getFirstChild()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getFirstChild()  ==  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
857	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getParent()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getParent()  ==  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
858	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getCurrentNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
859	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  scope.getCurrentNode();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  scope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  scope.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
860	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getFirstChild()  :  parentScope.getCurrentNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getFirstChild()  :  parentScope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getFirstChild()  :  parentScope.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
861	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  parentScope.getCurrentNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  parentScope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  parentScope.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
862	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  function.getCurrentNode();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  function.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  function.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
863	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  fnScope.getCurrentNode();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  fnScope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  fnScope.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
864	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  scope.getCurrentNode();  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  scope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  scope.getCurrentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
865	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.isDefined());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  &&  function.isDefined());	  Preconditions.checkState(function!=    null    &&    function.isDefined());    	non-compiled	[CE]  	102	None	replace
866	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isDefined());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isDefined());	  Preconditions.checkState(function!=    null    &&    function.isDefined());    	non-compiled	[CE]  	102	None	replace
867	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isDefined());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isDefined());	  Preconditions.checkState(function!=    null    &&    function.isDefined());    	non-compiled	[CE]  	102	None	replace
868	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  node.getLastChild();	  Node    c    =    function.getLastChild();    	non-compiled	[CE]  	269	None	replace
869	[BUG]  [BUGGY]  Node  body  =  parentScope.getFunctionDeclarations();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getFunctionDeclarations();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getFunctionDeclarations();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
870	[BUG]  [BUGGY]  Node  body  =  function.getFunctionDeclarations();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getFunctionDeclarations();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getFunctionDeclarations();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
871	[BUG]  [BUGGY]  Node  body  =  scope.getFunctionDeclarations();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getFunctionDeclarations();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getFunctionDeclarations();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
872	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionDeclarations();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionDeclarations();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionDeclarations();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
873	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctions();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctions();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctions();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
874	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionExpressions();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionExpressions();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionExpressions();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
875	[BUG]  [BUGGY]  Node  body  =  parentScope.getBodyNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getBodyNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getBodyNode();	  Node    body    =    fnScope.getBodyNode();    	non-compiled	[CE]  	19	None	replace
876	[BUG]  [BUGGY]  Node  body  =  function.getBodyNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getBodyNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getBodyNode();	  Node    body    =    fnScope.getBodyNode();    	non-compiled	[CE]  	19	None	replace
877	[BUG]  [BUGGY]  Node  body  =  fnScope.getReturnNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReturnNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReturnNode();	  Node    body    =    fnScope.getBodyNode();    	non-compiled	[CE]  	19	None	replace
878	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isExtern());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  function.isExtern());	  Preconditions.checkState(function.isConstructor()    ||    function.isExtern());    	non-compiled	[CE]  	169	None	replace
879	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  &&  function.isExtern());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  &&  function.isExtern());	  Preconditions.checkState(function.isConstructor()    ||    function.isExtern());    	non-compiled	[CE]  	169	None	replace
880	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isFunctionExtern());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isFunctionExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isFunctionExtern());	  Preconditions.checkState(function.isConstructor()    ||    function.isExtern());    	non-compiled	[CE]  	169	None	replace
881	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isFunctionExpression());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isFunctionExpression());	  Preconditions.checkState(function.isConstructor()    ||    function.isExtern());    	non-compiled	[CE]  	169	None	replace
882	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
883	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
884	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
885	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
886	[BUG]  [BUGGY]  Node  parent  =  scope.getOwnerFunction();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getOwnerFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getOwnerFunction();	  Node    parent    =    fnScope.getOwnerFunction();    	non-compiled	[CE]  	242	None	replace
887	[BUG]  [BUGGY]  Node  parent  =  function.getOwnerFunction();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getOwnerFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getOwnerFunction();	  Node    parent    =    fnScope.getOwnerFunction();    	non-compiled	[CE]  	242	None	replace
888	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getType()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	275	None	replace
889	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	275	None	replace
890	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isFunction(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	275	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isAll());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  function.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	4	None	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isAll());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||  function.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	4	None	replace
893	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.canHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	88	None	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	88	None	replace
895	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	88	None	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()),  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	88	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.shouldHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	88	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isType());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isType());	  Preconditions.checkState(function.isType()    ||    function.isConstructor());    	non-compiled	[CE]  	216	None	replace
899	[BUG]  [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isReferenced()  ||  function.isConstructor());	  Preconditions.checkState(function.isType()    ||    function.isConstructor());    	non-compiled	[CE]  	216	None	replace
900	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isInterface());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isInterface());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isInterface());	  Preconditions.checkState(function.isType()    ||    function.isConstructor());    	non-compiled	[CE]  	216	None	replace
901	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isGet()  ||  function.isAll());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isGet()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isGet()  ||  function.isAll());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
902	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isGet());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isGet());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isGet());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isFunction());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
905	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isGet()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isGet()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isGet()  ||  function.isAll());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
906	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  &&  function.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  &&  function.isAll());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
907	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isVar());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isVar());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
908	[BUG]  [BUGGY]  Preconditions.checkState(!function.isGet()  ||  function.isAll());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isGet()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isGet()  ||  function.isAll());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
909	[BUG]  [BUGGY]  Node  c  =  parentScope.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getNext();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getNext();	  Node    c    =    function.getNext();    	non-compiled	[CE]  	267	None	replace
910	[BUG]  [BUGGY]  Preconditions.checkState(function  >=  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  >=  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  >=  null  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function    ==    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	192	None	replace
911	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getNext()  ==  null);	  Preconditions.checkState(function.getNext()    ==    null);    	non-compiled	[CE]  	180	None	replace
912	[BUG]  [BUGGY]  Node  parentScope  =(function  ==  null)?  fnScope.getParent()  :  function;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(function  ==  null)?  fnScope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(function  ==  null)?  fnScope.getParent()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
913	[BUG]  [BUGGY]  Node  parentScope  =(function!=  null)?  fnScope.getParent()  :  function;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(function!=  null)?  fnScope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(function!=  null)?  fnScope.getParent()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
914	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  function;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
915	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getNext()  :  function;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getNext()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getNext()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
916	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  scope;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  scope;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  scope;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
917	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getNameNode()  :  function;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getNameNode()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getNameNode()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
918	[BUG]  [BUGGY]  Node  parentScope  =(parent  ==  null)?  fnScope.getParent()  :  function;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(parent  ==  null)?  fnScope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(parent  ==  null)?  fnScope.getParent()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
919	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	143	None	replace
920	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	143	None	replace
921	[BUG]  [BUGGY]  Preconditions.checkState(parent.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	143	None	replace
922	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isUnknown());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isUnknown());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnknown());    	non-compiled	[CE]  	273	None	replace
923	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	42	None	replace
924	[BUG]  [BUGGY]  Node  parentScope  =  function.getParentRootNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getParentRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getParentRootNode();	  Node    parentScope    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	260	None	replace
925	[BUG]  [BUGGY]  Node  parentScope  =  scope.getParentRootNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getParentRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getParentRootNode();	  Node    parentScope    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	260	None	replace
926	[BUG]  [BUGGY]  Node  parentScope  =(function  ==  null)?  fnScope.getParent()  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(function  ==  null)?  fnScope.getParent()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(function  ==  null)?  fnScope.getParent()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
927	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  function.getParent()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  function.getParent()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  function.getParent()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
928	[BUG]  [BUGGY]  Node  parentScope  =(function!=  null)?  fnScope.getParent()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(function!=  null)?  fnScope.getParent()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(function!=  null)?  fnScope.getParent()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
929	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  function.getParent()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  function.getParent()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  function.getParent()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
930	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
931	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getNext()  :  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getNext()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getNext()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
932	[BUG]  [BUGGY]  Node  parent  =  function.getParentOfThis();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  function.getParentOfThis();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getParentOfThis();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
933	[BUG]  [BUGGY]  Node  parent  =  scope.getParentOfThis();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  scope.getParentOfThis();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getParentOfThis();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
934	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  ||  function.isFunction());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
935	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  &&  function.isAll());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  &&  function.isAll());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
936	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isUnreferenced()  ||  function.isAll());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isUnreferenced()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isUnreferenced()  ||  function.isAll());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
937	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.isUnreferenced());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
938	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isVar()  ||  function.isAll());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isVar()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isVar()  ||  function.isAll());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
939	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isState()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isState()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isState()  ||  function.isAll());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
940	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION,  parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION,  parent);	  Preconditions.checkState(function    ==    null    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	44	None	replace
941	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  &&  function.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  &&  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  &&  function.isConstructor());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
942	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAssignment()  ||  function.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isAssignment()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isAssignment()  ||  function.isConstructor());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isPropertyAssignment());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isPropertyAssignment());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isPropertyAssignment());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isAssignment());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isAssignment());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isAssignment());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isExtern());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isExtern());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isDefined());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isDefined());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isAll());  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isAll());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(function.isVarArgs()  &&  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVarArgs()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVarArgs()  &&  function.isFunction());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isVarArgs());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isVarArgs());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isVarArgs());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  &&  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isVarArgs());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  &&  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
953	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(toReplaceWithZero);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(toReplaceWithZero);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(toReplaceWithZero);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
954	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(toReplaceWithZero);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(toReplaceWithZero);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(toReplaceWithZero);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
955	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  parent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  parent);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
956	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  function);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  function);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
957	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero  +  1);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero  +  1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero  +  1);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
958	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(toReplaceWithZero);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(toReplaceWithZero);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode(toReplaceWithZero);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
959	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  1);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  1);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
960	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionBody();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionBody();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionBody();	  Node    body    =    function.getLastChild();    	non-compiled	[CE]  	131	None	replace
961	[BUG]  [BUGGY]  Node  body  =  fnScope.getStringNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getStringNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getStringNode();	  Node    body    =    function.getLastChild();    	non-compiled	[CE]  	131	None	replace
962	[BUG]  [BUGGY]  Node  body  =  parentScope.getChildCount();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getChildCount();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getChildCount();	  Node    body    =    fnScope.getChildCount();    	non-compiled	[CE]  	170	None	replace
963	[BUG]  [BUGGY]  Node  body  =  function.getChildCount();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getChildCount();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getChildCount();	  Node    body    =    fnScope.getChildCount();    	non-compiled	[CE]  	170	None	replace
964	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
965	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
966	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
967	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
968	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
969	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getRootNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
970	[BUG]  [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isUnreferenced());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVarArgs()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isVarArgs());    	non-compiled	[CE]  	114	None	replace
971	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode(null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getNameNode(null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode(null);	  Node    nameNode    =    fnScope.getNameNode(null);    	non-compiled	[CE]  	59	None	replace
972	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(null);	  Node    nameNode    =    fnScope.getNameNode(null);    	non-compiled	[CE]  	59	None	replace
973	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(scope);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(scope);	  Node    nameNode    =    fnScope.getNameNode(null);    	non-compiled	[CE]  	59	None	replace
974	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(this);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(this);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(this);	  Node    nameNode    =    fnScope.getNameNode(null);    	non-compiled	[CE]  	59	None	replace
975	[BUG]  [BUGGY]  Node  parentScope  =  scope.getParentScope();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getParentScope();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getParentScope();	  Node    parentScope    =    fnScope.getParentScope();    	non-compiled	[CE]  	184	None	replace
976	[BUG]  [BUGGY]  Node  body  =  parentScope.getAncestor(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getAncestor(1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getAncestor(1);	  Node    body    =    fnScope.getAncestor(1);    	non-compiled	[CE]  	198	None	replace
977	[BUG]  [BUGGY]  Node  body  =  function.getAncestor(1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getAncestor(1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getAncestor(1);	  Node    body    =    fnScope.getAncestor(1);    	non-compiled	[CE]  	198	None	replace
978	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isAll());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced()  ||  function.isAll());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isAll());    	non-compiled	[CE]  	2	None	replace
979	[BUG]  [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isAll());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isReferenced()  ||  function.isAll());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isAll());    	non-compiled	[CE]  	2	None	replace
980	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isGet());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isGet());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isGet());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isAll());    	non-compiled	[CE]  	2	None	replace
981	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isUnreferenced());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isUnreferenced());	  Preconditions.checkArgument(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	249	None	replace
982	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isStatement());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isStatement());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isStatement());	  Preconditions.checkArgument(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	249	None	replace
983	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isDefine());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isDefine());    	non-compiled	[CE]  	209	None	replace
984	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParentNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParentNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParentNode()!=  null);	  Preconditions.checkState(function.getParentNode()    ==    null);    	non-compiled	[CE]  	97	None	replace
985	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParentNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParentNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getParentNode()  ==  null);	  Preconditions.checkState(function.getParentNode()    ==    null);    	non-compiled	[CE]  	97	None	replace
986	[BUG]  [BUGGY]  Node  body  =  parentScope.getHeaderSibling();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  parentScope.getHeaderSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getHeaderSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
987	[BUG]  [BUGGY]  Node  body  =  function.getHeaderSibling();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getHeaderSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getHeaderSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
988	[BUG]  [BUGGY]  Node  body  =  scope.getHeaderSibling();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  scope.getHeaderSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getHeaderSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
989	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionSibling();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
990	[BUG]  [BUGGY]  Node  body  =  fnScope.getRealSibling();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getRealSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getRealSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
991	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionSibling();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
992	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
993	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getType()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getType()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
994	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isName(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
995	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNameNode()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNameNode()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	120	None	replace
996	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	120	None	replace
997	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLocalName()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLocalName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLocalName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	120	None	replace
998	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isEmpty());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isEmpty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isEmpty());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExtern());    	non-compiled	[CE]  	34	None	replace
999	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	275	None	replace
1000	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGet(function.getString()));	  Preconditions.checkState(NodeUtil.isFunction(function.getString()));    	non-compiled	[CE]  	275	None	replace
1001	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()  +  1));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()  +  1));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));    	non-compiled	[CE]  	88	None	replace
1002	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDeclaration());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDeclaration());	  Preconditions.checkState(function!=    null    ||    function.isDefine());    	non-compiled	[CE]  	251	None	replace
1003	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  fnScope.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  fnScope.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  fnScope.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));    	non-compiled	[CE]  	87	None	replace
1004	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetAndSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetAndSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetAndSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	103	None	replace
1005	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
1006	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  function.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
1007	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getLocalNameNode();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getLocalNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getLocalNameNode();	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
1008	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(parent);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode(parent);	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
1009	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  node);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function,  node);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
1010	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isConstructor()  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isConstructor()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
1011	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
1012	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getNameNode()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getNameNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getNameNode()  ==  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
1013	[BUG]  [BUGGY]  Node  parent  =  fnScope.getImmediateParentNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getImmediateParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getImmediateParentNode();	  Node    parent    =    fnScope.getPrefixNode();    	non-compiled	[CE]  	14	None	replace
1014	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	146	None	replace
1015	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGet(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	146	None	replace
1016	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionDeclaration(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionDeclaration(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionDeclaration(function);	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
1017	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isFunctionExpression());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isFunctionExpression());	  Preconditions.checkState(function.isAll()    ||    function.isFunction());    	non-compiled	[CE]  	1	None	replace
1018	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
1019	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
1020	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getSourceName()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getSourceName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getSourceName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
1021	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnknownFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnknownFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnknownFunction());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
1022	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isDefined());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isDefined());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
1023	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  FunctionUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  FunctionUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  FunctionUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	196	None	replace
1024	[BUG]  [BUGGY]  Node  body  =  fnScope.getBody(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getBody(1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getBody(1);	  Node    body    =    fnScope.getAncestor(1);    	non-compiled	[CE]  	198	None	replace
1025	[BUG]  [BUGGY]  Node  body  =  function.getAncestor(2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.getAncestor(2);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getAncestor(2);	  Node    body    =    fnScope.getAncestor(1);    	non-compiled	[CE]  	198	None	replace
1026	[BUG]  [BUGGY]  Node  body  =  fnScope.getBodyNode(1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getBodyNode(1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getBodyNode(1);	  Node    body    =    fnScope.getAncestor(1);    	non-compiled	[CE]  	198	None	replace
1027	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isStatement());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isStatement());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isStatement());	  Preconditions.checkArgument(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	250	None	replace
1028	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
1029	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
1030	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getLastChild();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
1031	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  function.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  function.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  function.getLastChild();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
1032	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getFirstChild();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
1033	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getParentNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getParentNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
1034	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getRootNode();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getRootNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
1035	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
1036	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
1037	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isPropertyOp());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
1038	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderBody();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderBody();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderBody();	  Node    body    =    fnScope.getFirstChild();    	non-compiled	[CE]  	129	None	replace
1039	[BUG]  [BUGGY]  Node  parent  =(fnScope!=  null)?  scope.getParent()  :  fnScope.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =(fnScope!=  null)?  scope.getParent()  :  fnScope.getParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =(fnScope!=  null)?  scope.getParent()  :  fnScope.getParent();	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	10	None	replace
1040	[BUG]  [BUGGY]  Node  parent  =(fnScope!=  null)?  fnScope.getParent()  :  function;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =(fnScope!=  null)?  fnScope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =(fnScope!=  null)?  fnScope.getParent()  :  function;	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	10	None	replace
1041	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1042	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.CALL);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1043	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1044	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.hasChildren());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1045	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.CALL);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.CALL);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1046	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1047	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeepestNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeepestNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeepestNode();	  Node    body    =    fnScope.getBody();    	non-compiled	[CE]  	21	None	replace
1048	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isFunctionDeclaration());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isFunctionDeclaration());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
1049	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isAssignmentOp());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
1050	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
1051	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getType()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
1052	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
1053	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
1054	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
1055	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDefined()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
1056	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
1057	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isAll());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
1058	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionExpression(function);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionExpression(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionExpression(function);	  Node    body    =    fnScope.getFunctionExpression();    	non-compiled	[CE]  	133	None	replace
1059	[BUG]  [BUGGY]  Preconditions.checkState(function.isNamed()  ||  function.isAll());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isNamed()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isNamed()  ||  function.isAll());	  Preconditions.checkState(function.isVar()    ||    function.isAll());    	non-compiled	[CE]  	5	None	replace
1060	[BUG]  [BUGGY]  Node  c  =  fnScope.getOwnScope();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getOwnScope();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
1061	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferenceNameNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferenceNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferenceNameNode();	  Node    body    =    scope.getRootNode();    	non-compiled	[CE]  	18	None	replace
1062	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnNode();	  Node    body    =    scope.getRootNode();    	non-compiled	[CE]  	18	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||!function.isUnreferenced());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||!function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||!function.isUnreferenced());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1064	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&!function.isUnreferenced());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&!function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&!function.isUnreferenced());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1065	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||!function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||!function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||!function.isUnreferenced());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1066	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1067	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1068	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  &&  NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1069	[BUG]  [BUGGY]  Preconditions.checkState(function.isCall()  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isCall()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isCall()  ||  function.isFunction());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isFunction());    	non-compiled	[CE]  	27	None	replace
1070	[BUG]  [BUGGY]  Node  c  =  node.getCurrentNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  node.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  node.getCurrentNode();	  Node    c    =    parentScope.getCurrentNode();    	non-compiled	[CE]  	150	None	replace
1071	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentFunctionNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentFunctionNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	263	None	replace
1072	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnScopeRootNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnScopeRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnScopeRootNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	263	None	replace
1073	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isInterface());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isInterface());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isInterface());	  Preconditions.checkState(function.isDefined()    ||    function.isConstructor());    	non-compiled	[CE]  	161	None	replace
1074	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentNode(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentNode(function);	  Node    parent    =    fnScope.getParent(parent);    	non-compiled	[CE]  	211	None	replace
1075	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestor(2)  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAncestor(2)  +  1;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestor(2)  +  1;	  Node    body    =    fnScope.getAncestor(2);    	non-compiled	[CE]  	261	None	replace
1076	[BUG]  [BUGGY]  Node  nameNode  =  function.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getLastChild();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
1077	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    &&    function.isFunction());    	non-compiled	[CE]  	29	None	replace
1078	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
1079	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
1080	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderNode(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderNode(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderNode(parent);	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
1081	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  n.getLastChild();	  Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	128	None	replace
1082	[BUG]  [BUGGY]  Node  body  =  c.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  c.getLastChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  c.getLastChild();	  Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	128	None	replace
1083	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isDefined());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isDefined());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
1084	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getParentNode()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getParentNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getParentNode()  ==  null);	  Preconditions.checkState(function    ==    null    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	222	None	replace
1085	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfChild();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
1086	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfFirstChild();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
1087	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isExtern());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isExtern());	  Preconditions.checkState(function.isType()    ||    function.isExtern());    	non-compiled	[CE]  	176	None	replace
1088	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasOwnSideEffects());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasOwnSideEffects());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasOwnSideEffects());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
1089	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasElements());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasElements());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasElements());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.hasChildren());    	non-compiled	[CE]  	219	None	replace
1090	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnScope(parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnScope(parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnScope(parentScope);	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
1091	[BUG]  [BUGGY]  Node  body  =  fnScope.getAssignedFunction();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAssignedFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAssignedFunction();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
1092	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
1093	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
1094	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getNext()  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getNext()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  fnScope.getNext()  :  null;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
1095	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  scope;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  scope;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  fnScope.getParent()  :  scope;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    null;    	non-compiled	[CE]  	205	None	replace
1096	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerNameNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerNameNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	264	None	replace
1097	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerParentNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerParentNode();	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	264	None	replace
1098	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	121	None	replace
1099	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isStatement());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isStatement());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isStatement());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
1100	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isAll());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
1101	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isDefine());    	non-compiled	[CE]  	271	None	replace
1102	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null,  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null,  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null,  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	42	None	replace
1103	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getFunctionNode()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getFunctionNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getFunctionNode()  ==  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
1104	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isDefine());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isDefine());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
1105	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(function.getNext()    ==    null);    	non-compiled	[CE]  	180	None	replace
1106	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString()),  fnScope);	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
1107	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString())&&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isName(function.getString()));    	non-compiled	[CE]  	276	None	replace
1108	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnScope(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnScope(scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnScope(scope);	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	212	None	replace
1109	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnParent();	  Node    parent    =    fnScope.getOwnScope();    	non-compiled	[CE]  	212	None	replace
1110	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isSetKey(function.getString()));    	non-compiled	[CE]  	140	None	replace
1111	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isSetKey(function.getString()));    	non-compiled	[CE]  	140	None	replace
1112	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunction(function);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunction(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunction(function);	  Node    body    =    fnScope.getReferencedFunction();    	non-compiled	[CE]  	20	None	replace
1113	[BUG]  [BUGGY]  Node  parentScope  =  function.getNextScope();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getNextScope();  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getNextScope();	  Node    parentScope    =    fnScope.getParentScope();    	non-compiled	[CE]  	184	None	replace
1114	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getParentScope(parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getParentScope(parent);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getParentScope(parent);	  Node    parentScope    =    fnScope.getParentScope();    	non-compiled	[CE]  	184	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isType()  ||  function.isConstructor());	  Preconditions.checkState(function.isType()    ||    function.isConstructor());    	non-compiled	[CE]  	216	None	replace
1116	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.SCRIPT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.SCRIPT);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
1117	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
1118	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
1119	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()),  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	108	None	replace
1120	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	108	None	replace
1121	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
1122	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isGet());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isGet());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isGet());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
1123	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isExtern());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isExtern());	  Preconditions.checkState(function.isAll()    ||    function.isExtern());    	non-compiled	[CE]  	175	None	replace
1124	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isDefine()    ||    function.isUnreferenced());    	non-compiled	[CE]  	182	None	replace
1125	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isGet());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isGet());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isGet());	  Preconditions.checkState(function.isDefine()    ||    function.isUnreferenced());    	non-compiled	[CE]  	182	None	replace
1126	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isEmpty());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isEmpty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isEmpty());	  Preconditions.checkState(function.isDefine()    ||    function.isAll());    	non-compiled	[CE]  	173	None	replace
1127	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
1128	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getOwnerScope(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getOwnerScope(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getOwnerScope(function);	  Node    parentScope    =    fnScope.getOwnerScope();    	non-compiled	[CE]  	246	None	replace
1129	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isEmpty());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isEmpty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isEmpty());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
1130	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isGet()  ||  function.isAll());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isGet()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isGet()  ||  function.isAll());	  Preconditions.checkState(function.isGet()    ||    function.isAll());    	non-compiled	[CE]  	174	None	replace
1131	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  false);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  false);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function,  false);	  Node    nameNode    =    fnScope.getNameNode(null);    	non-compiled	[CE]  	59	None	replace
1132	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunctionExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunctionExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isFunctionExtern());	  Preconditions.checkState(function!=    null    ||    function.isExtern());    	non-compiled	[CE]  	39	None	replace
1133	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  function);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()),  function);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
1134	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    fnScope);    	non-compiled	[CE]  	229	None	replace
1135	[BUG]  [BUGGY]  Node  parentScope  =  scope.getNameNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  scope.getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getNameNode();	  Node    parentScope    =    fnScope.getNameNode();    	non-compiled	[CE]  	66	None	replace
1136	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getNext()));	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
1137	[BUG]  [BUGGY]  Node  parent  =  fnScope.getConstructorParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getConstructorParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getConstructorParent();	  Node    parent    =    fnScope.getConstructorNode();    	non-compiled	[CE]  	82	None	replace
1138	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isUnreferenced());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.isUnreferenced());	  Preconditions.checkState(fnScope.isUnreferenced());    	non-compiled	[CE]  	24	None	replace
1139	[BUG]  [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isVarArgs());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isEmpty()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isEmpty()  ||  function.isVarArgs());	  Preconditions.checkState(function.isAll()    ||    function.isVarArgs());    	non-compiled	[CE]  	117	None	replace
1140	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
1141	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()!=  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()!=    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	33	None	replace
1142	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()!=  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()!=    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	33	None	replace
1143	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnknownFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnknownFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnknownFunction());	  Preconditions.checkState(function.getType()!=    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	33	None	replace
1144	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGet(function)&&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	145	None	replace
1145	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
1146	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext())||  NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));    	non-compiled	[CE]  	119	None	replace
1147	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	120	None	replace
1148	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionNode(function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getReferencedFunctionNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionNode(function);	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
1149	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	52	None	replace
1150	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionReferences();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionReferences();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionReferences();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
1151	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeclarations();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeclarations();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeclarations();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
1152	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isVarArgs());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&  function.isVarArgs());	  Preconditions.checkState(function.isDefine()    ||    function.isVarArgs());    	non-compiled	[CE]  	172	None	replace
1153	[BUG]  [BUGGY]  Node  parent  =  fnScope.getCurrentNameNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getCurrentNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getCurrentNameNode();	  Node    parent    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	265	None	replace
1154	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),!isPropertyAssign);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),!isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),!isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),    isPropertyAssign);    	non-compiled	[CE]  	69	None	replace
1155	[BUG]  [BUGGY]  Node  parentScope  =  function.getOwnScope();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  function.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getOwnScope();	  Node    parentScope    =    function.getParentNode();    	non-compiled	[CE]  	62	None	replace
1156	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	200	None	replace
1157	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getParentScopeNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getParentScopeNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getParentScopeNode();	  Node    parentScope    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	260	None	replace
1158	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getNext()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
1159	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isFunction(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
1160	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
1161	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
1162	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnknown());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isUnknown());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
1163	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
1164	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function,  function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
1165	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext(),  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
1166	[BUG]  [BUGGY]  Preconditions.checkArgument(function  ==  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function  ==  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function  ==  null  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	232	None	replace
1167	[BUG]  [BUGGY]  Node  nameNode  =  function.getFnScope();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getFnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getFnScope();	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
1168	[BUG]  [BUGGY]  Node  nameNode  =  function.getFnScope().getNameNode();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getFnScope().getNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getFnScope().getNameNode();	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
1169	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isExpression());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isExpression());	  Preconditions.checkState(function!=    null    &&    function.isExtern());    	non-compiled	[CE]  	101	None	replace
1170	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAssignedOnce());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAssignedOnce());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isAssignedOnce());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
1171	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  function);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  function);	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
1172	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  parentScope);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function,  parentScope);	  Node    nameNode    =    fnScope.getNameNode(function);    	non-compiled	[CE]  	60	None	replace
1173	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getImmediateParentNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getImmediateParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getImmediateParentNode();	  Node    parentScope    =    fnScope.getLastChild();    	non-compiled	[CE]  	64	None	replace
1174	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getPreviousScope();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getPreviousScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getPreviousScope();	  Node    parentScope    =    fnScope.getLastChild();    	non-compiled	[CE]  	64	None	replace
1175	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeepestChild(function);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeepestChild(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeepestChild(function);	  Node    body    =    fnScope.getDeepestChild();    	non-compiled	[CE]  	257	None	replace
1176	[BUG]  [BUGGY]  Node  functionScope  =  fnScope.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  functionScope  =  fnScope.getParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  functionScope  =  fnScope.getParent();	  Node    parentScope    =    function.getParent();    	non-compiled	[CE]  	141	None	replace
1177	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
1178	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())&&  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
1179	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  parentScope.getCurrentToken();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  parentScope.getCurrentToken();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  parentScope.getCurrentToken();	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
1180	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  fnScope.getCurrentToken();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  fnScope.getCurrentToken();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  fnScope.getCurrentToken();	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
1181	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&  function.isVarArgs());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunction()  &&  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
1182	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNameNode()  :  nameNode;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNameNode()  :  nameNode;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNameNode()  :  nameNode;	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
1183	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNameNode()  :  nameNode;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNameNode()  :  nameNode;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNameNode()  :  nameNode;	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
1184	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNameNode()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNameNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNameNode()  :  null;	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
1185	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNameNode()  :  null;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNameNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNameNode()  :  null;	  Node    c    =    fnScope.getCurrentNameNode();    	non-compiled	[CE]  	225	None	replace
1186	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1187	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  &&  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1188	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1189	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	72	None	replace
1190	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));    	non-compiled	[CE]  	72	None	replace
1191	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getRootNode()  :  null;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getRootNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getRootNode()  :  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
1192	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getFunctionNode()  :  null;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getFunctionNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getFunctionNode()  :  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
1193	[BUG]  [BUGGY]  Node  c  =  function!=  null?  parentScope.getCurrentNode()  :  null;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  parentScope.getCurrentNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  parentScope.getCurrentNode()  :  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
1194	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  parentScope;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  parentScope;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentNode()  :  parentScope;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
1195	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	270	None	replace
1196	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getName()));	  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	270	None	replace
1197	[BUG]  [BUGGY]  Node  c  =  fnScope.getChildCount();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getChildCount();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getChildCount();	  Node    c    =    fnScope.getFirstChild();    	non-compiled	[CE]  	228	None	replace
1198	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isUnknown());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isUnknown());	  Preconditions.checkState(function.isName()    ||    function.isExtern());    	non-compiled	[CE]  	178	None	replace
1199	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isEmpty());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isEmpty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isEmpty());	  Preconditions.checkState(function.isName()    ||    function.isExtern());    	non-compiled	[CE]  	178	None	replace
1200	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isFunctionExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isFunctionExpression());	  Preconditions.checkState(function.isName()    ||    function.isExtern());    	non-compiled	[CE]  	178	None	replace
1201	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isAssignmentOp());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isName()    ||    function.isExtern());    	non-compiled	[CE]  	178	None	replace
1202	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
1203	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
1204	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION,  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION,  fnScope);	  Preconditions.checkState(function    ==    null    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	44	None	replace
1205	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
1206	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
1207	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
1208	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isDefine());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isDefine());    	non-compiled	[CE]  	209	None	replace
1209	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDeclaration());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDeclaration());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isDefine());    	non-compiled	[CE]  	209	None	replace
1210	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isProperty());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isProperty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isProperty());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isDefine());    	non-compiled	[CE]  	209	None	replace
1211	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getNext()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
1212	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
1213	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.hasChildren());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
1214	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.GETPROP);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.GETPROP);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
1215	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function)||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function)||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGet(function)||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	135	None	replace
1216	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	135	None	replace
1217	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  parentScope.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  parentScope.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  parentScope.isUnreferenced());	  Preconditions.checkState(parentScope.isUnreferenced());    	non-compiled	[CE]  	28	None	replace
1218	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  &&  function.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  &&  function.isFunction());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
1219	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGet(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
1220	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
1221	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSideEffects(function.getLastChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
1222	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGet(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
1223	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getParent()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getParent()  ==  null);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
1224	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    fnScope);    	non-compiled	[CE]  	106	None	replace
1225	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getNext()  :  function;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getNext()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  fnScope.getNext()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
1226	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  parentScope.getRootNode()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  parentScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  parentScope.getRootNode()  ==  null);	  Preconditions.checkState(parentScope.getRootNode()    ==    null);    	non-compiled	[CE]  	95	None	replace
1227	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  parentScope.getRootNode()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  parentScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  parentScope.getRootNode()  ==  null);	  Preconditions.checkState(parentScope.getRootNode()    ==    null);    	non-compiled	[CE]  	95	None	replace
1228	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent(scope);	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
1229	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(function);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent(function);	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
1230	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(0);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent(0);	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
1231	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isExpression());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
1232	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isExtern());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isExtern());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
1233	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunction(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunction(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunction(function);	  Node    parent    =    fnScope.getOwnerFunction();    	non-compiled	[CE]  	242	None	replace
1234	[BUG]  [BUGGY]  Node  c  =  getCurrentNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  getCurrentNode();	  Node    c    =    scope.getCurrentNode();    	non-compiled	[CE]  	151	None	replace
1235	[BUG]  [BUGGY]  Node  c  =  fnScope.getCurrentChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getCurrentChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getCurrentChild();	  Node    c    =    fnScope.getLastChild();    	non-compiled	[CE]  	155	None	replace
1236	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  >=  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  >=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(function!=    null    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	45	None	replace
1237	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfNameNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfNameNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
1238	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfElementNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfElementNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfElementNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
1239	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfElement();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfElement();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfElement();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
1240	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfLocalNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfLocalNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfLocalNode();	  Node    parent    =    fnScope.getParentOfRootNode();    	non-compiled	[CE]  	244	None	replace
1241	[BUG]  [BUGGY]  Node  body  =  function.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  function.removeFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.removeFirstChild();	  Node    body    =    function.getLastChild();    	non-compiled	[CE]  	131	None	replace
1242	[BUG]  [BUGGY]  Node  body  =  fnScope.getLeadingState();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getLeadingState();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getLeadingState();	  Node    body    =    function.getLastChild();    	non-compiled	[CE]  	131	None	replace
1243	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  referenced);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  referenced);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function,  referenced);	  Node    nameNode    =    fnScope.getNameNode(referenced);    	non-compiled	[CE]  	61	None	replace
1244	[BUG]  [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isVarArgs());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isReferenced()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isReferenced()  ||  function.isVarArgs());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isVarArgs());    	non-compiled	[CE]  	114	None	replace
1245	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isVarArgs());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isVarArgs());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isVarArgs());    	non-compiled	[CE]  	114	None	replace
1246	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()!=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    &&    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	53	None	replace
1247	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
1248	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
1249	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getNameNode()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getNameNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getNameNode()  ==  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
1250	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParentNode()  :  function;  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParentNode()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getParentNode()  :  function;	  Node    parentScope    =    scope.getParentNode();    	non-compiled	[CE]  	63	None	replace
1251	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  scope.getParentNode()  :  function;  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  scope.getParentNode()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  scope.getParentNode()  :  function;	  Node    parentScope    =    scope.getParentNode();    	non-compiled	[CE]  	63	None	replace
1252	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParentNode()  :  function;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  fnScope.getParentNode()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  fnScope.getParentNode()  :  function;	  Node    parentScope    =    scope.getParentNode();    	non-compiled	[CE]  	63	None	replace
1253	[BUG]  [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  scope.getParentNode()  :  function;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope  ==  null)?  scope.getParentNode()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope  ==  null)?  scope.getParentNode()  :  function;	  Node    parentScope    =    scope.getParentNode();    	non-compiled	[CE]  	63	None	replace
1254	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParentNode()  :  scope;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParentNode()  :  scope;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getParentNode()  :  scope;	  Node    parentScope    =    scope.getParentNode();    	non-compiled	[CE]  	63	None	replace
1255	[BUG]  [BUGGY]  Node  parent  =  fnScope.getReferenceParentNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getReferenceParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getReferenceParentNode();	  Node    parent    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	214	None	replace
1256	[BUG]  [BUGGY]  Node  c  =  fnScope.getFunctionNode(function,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getFunctionNode(function,  parentScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFunctionNode(function,  parentScope);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
1257	[BUG]  [BUGGY]  Node  c  =  parentScope.getFnNode(function);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  parentScope.getFnNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getFnNode(function);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
1258	[BUG]  [BUGGY]  Node  c  =  fnScope.getFunctionCall(function);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getFunctionCall(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFunctionCall(function);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
1259	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isEmpty());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isEmpty());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isEmpty());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
1260	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  toReplaceWithZero);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function,  toReplaceWithZero);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function,  toReplaceWithZero);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
1261	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  nameNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  nameNode);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero,  nameNode);	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero);    	non-compiled	[CE]  	248	None	replace
1262	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getName()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getName()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.getName()!=  null);	  Preconditions.checkState(function.getName()!=    null);    	non-compiled	[CE]  	210	None	replace
1263	[BUG]  [BUGGY]  Node  c  =  function.getOwnScope();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getOwnScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getOwnScope();	  Node    c    =    function.getNext();    	non-compiled	[CE]  	267	None	replace
1264	[BUG]  [BUGGY]  Node  c  =  function.getChildCount();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getChildCount();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getChildCount();	  Node    c    =    function.getNext();    	non-compiled	[CE]  	267	None	replace
1265	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
1266	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
1267	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
1268	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isExtern());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
1269	[BUG]  [BUGGY]  Preconditions.checkState(function.isNamed()  ||  function.isUnreferenced());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isNamed()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isNamed()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isVar()    ||    function.isUnreferenced());    	non-compiled	[CE]  	127	None	replace
1270	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isVar()  ||  function.isUnreferenced());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isVar()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isVar()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isVar()    ||    function.isUnreferenced());    	non-compiled	[CE]  	127	None	replace
1271	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  fnScope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  fnScope);	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
1272	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
1273	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
1274	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  &&  function.isExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  &&  function.isExtern());	  Preconditions.checkState(function.isFunction()    &&    function.isExtern());    	non-compiled	[CE]  	168	None	replace
1275	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isName(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
1276	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerSibling();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
1277	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderSibling(function);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderSibling(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderSibling(function);	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
1278	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  4)  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  4)  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  4)	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    1);    	non-compiled	[CE]  	237	None	replace
1279	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.isAll());    	non-compiled	[CE]  	234	None	replace
1280	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild())||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));    	non-compiled	[CE]  	144	None	replace
1281	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),!isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),!isPropertyAssign);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),!isPropertyAssign);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),    isPropertyAssign);    	non-compiled	[CE]  	104	None	replace
1282	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isExtern());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  &&  function.isExtern());	  Preconditions.checkState(function.isDefine()    ||    function.isExtern());    	non-compiled	[CE]  	259	None	replace
1283	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
1284	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isVarArgs());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isVarArgs());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
1285	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isNode());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isNode());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isNode());	  Preconditions.checkState(function!=    null    &&    function.isAll());    	non-compiled	[CE]  	254	None	replace
1286	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getNameNode()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getNameNode()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getNameNode()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));    	non-compiled	[CE]  	120	None	replace
1287	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getFunctionNode(function):  null;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getFunctionNode(function):  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getFunctionNode(function):  null;	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    null;    	non-compiled	[CE]  	154	None	replace
1288	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isExtern());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||  function.isExtern());	  Preconditions.checkState(function.isDefine()    ||    function.isExtern());    	non-compiled	[CE]  	259	None	replace
1289	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isExpression());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isExpression());	  Preconditions.checkState(function.isDefine()    ||    function.isExtern());    	non-compiled	[CE]  	259	None	replace
1290	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isExtern());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefine()  ||  function.isExtern());	  Preconditions.checkState(function.isDefine()    ||    function.isExtern());    	non-compiled	[CE]  	259	None	replace
1291	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    &&    function.isExtern());    	non-compiled	[CE]  	168	None	replace
1292	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isVar());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isVar());	  Preconditions.checkState(function!=    null    &&    function.isAll());    	non-compiled	[CE]  	254	None	replace
1293	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isType()  ||  function.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isType()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isType()  ||  function.isConstructor());	  Preconditions.checkState(function.isType()    ||    function.isConstructor());    	non-compiled	[CE]  	216	None	replace
1294	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isType());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isType());	  Preconditions.checkState(function.isType()    ||    function.isConstructor());    	non-compiled	[CE]  	216	None	replace
1295	[BUG]  [BUGGY]  Preconditions.checkState(function.isNamed()  ||  function.isExtern());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isNamed()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isNamed()  ||  function.isExtern());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isExtern());    	non-compiled	[CE]  	166	None	replace
1296	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThisNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfThisNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfThisNode();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
1297	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThis(parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfThis(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfThis(parent);	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
1298	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfChildren();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOfChildren();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfChildren();	  Node    parent    =    fnScope.getParentOfThis();    	non-compiled	[CE]  	245	None	replace
1299	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnknown()  ||  function.isFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnknown()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnknown()  ||  function.isFunction());	  Preconditions.checkState(function.isVarArgs()    ||    function.isFunction());    	non-compiled	[CE]  	113	None	replace
1300	[BUG]  [BUGGY]  Node  c  =  function.getScope();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getScope();	  Node    c    =    scope.getCurrentNode();    	non-compiled	[CE]  	151	None	replace
1301	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isName(function.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isName(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isName(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isSetKey(function.getString()));    	non-compiled	[CE]  	140	None	replace
1302	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(referenced);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode(referenced);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode(referenced);	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
1303	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getRootNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getRootNode();	  Node    nameNode    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	58	None	replace
1304	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isVarArgs());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefined()  ||  function.isVarArgs());	  Preconditions.checkState(function.isDefined()    ||    function.isVarArgs());    	non-compiled	[CE]  	116	None	replace
1305	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	85	None	replace
1306	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.isFunction());	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	90	None	replace
1307	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isAll()    ||    function.isUnreferenced());    	non-compiled	[CE]  	124	None	replace
1308	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isAll()    ||    function.isUnreferenced());    	non-compiled	[CE]  	124	None	replace
1309	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getLastChild()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getLastChild()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getLastChild()  ==  null);	  Preconditions.checkState(function!=    null    &&    function.getRootNode()    ==    null);    	non-compiled	[CE]  	221	None	replace
1310	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
1311	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
1312	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getNameNode()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getNameNode()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getNameNode()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	185	None	replace
1313	[BUG]  [BUGGY]  Node  c  =  fnScope.getFunctionDeclaration();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getFunctionDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFunctionDeclaration();	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
1314	[BUG]  [BUGGY]  Node  c  =  fnScope.getVarNode(function);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getVarNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getVarNode(function);	  Node    c    =    fnScope.getRootNode();    	non-compiled	[CE]  	226	None	replace
1315	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  fnScope.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	47	None	replace
1316	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getRootNode());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getRootNode());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(fnScope.getRootNode());	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
1317	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getFunctionNameNode());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getFunctionNameNode());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(fnScope.getFunctionNameNode());	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
1318	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getLastChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getLastChild());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(fnScope.getLastChild());	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
1319	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getReferenceNameNode());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getReferenceNameNode());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(fnScope.getReferenceNameNode());	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
1320	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getNameNode());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  parentScope.getNameNode(fnScope.getNameNode());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode(fnScope.getNameNode());	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
1321	[BUG]  [BUGGY]  Node  nameNode  =  function.removeFirstChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.removeFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.removeFirstChild();	  Node    nameNode    =    parentScope.getNameNode();    	non-compiled	[CE]  	55	None	replace
1322	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function)||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(fnScope.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	146	None	replace
1323	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	123	None	replace
1324	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll());	  Preconditions.checkState(function.isAll());    	non-compiled	[CE]  	234	None	replace
1325	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getQualifiedName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));    	non-compiled	[CE]  	122	None	replace
1326	[BUG]  [BUGGY]  Node  c  =  function.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.removeFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.removeFirstChild();	  Node    c    =    function.getFirstChild();    	non-compiled	[CE]  	153	None	replace
1327	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getName()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getName()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));    	non-compiled	[CE]  	108	None	replace
1328	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	78	None	replace
1329	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
1330	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getParent()    ==    null);    	non-compiled	[CE]  	79	None	replace
1331	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  fnScope.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefine()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isFunction());    	non-compiled	[CE]  	50	None	replace
1332	[BUG]  [BUGGY]  Node  nameNode  =  function.getAssignedNameNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function.getAssignedNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getAssignedNameNode();	  Node    nameNode    =    function.getNameNode();    	non-compiled	[CE]  	54	None	replace
1333	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	145	None	replace
1334	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	145	None	replace
1335	[BUG]  [BUGGY]  Node  c  =  function.getOwnerFunction();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getOwnerFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getOwnerFunction();	  Node    c    =    function.getNext();    	non-compiled	[CE]  	267	None	replace
1336	[BUG]  [BUGGY]  Node  c  =  function.getOwnerDocument();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getOwnerDocument();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getOwnerDocument();	  Node    c    =    function.getNext();    	non-compiled	[CE]  	267	None	replace
1337	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefine()  ||  function.isFunction());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
1338	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isVarArgs());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isVarArgs());	  Preconditions.checkArgument(function.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	255	None	replace
1339	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getParent());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getParent());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  function.getParent());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()    +    1));    	non-compiled	[CE]  	71	None	replace
1340	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isAssignmentOp());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isAssignmentOp());    	non-compiled	[CE]  	31	None	replace
1341	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isExpression());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
1342	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isExpression());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExpression());    	non-compiled	[CE]  	177	None	replace
1343	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());	  Preconditions.checkState(function!=    null    ||    function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	208	None	replace
1344	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getCurrentNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getCurrentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getCurrentNode();	  Node    parentScope    =    fnScope.getNextNode();    	non-compiled	[CE]  	190	None	replace
1345	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignmentOp()  ||  function.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAssignmentOp()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignmentOp()  ||  function.isConstructor());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
1346	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isAssignmentOp());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
1347	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAssignment()  ||  function.isConstructor());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAssignment()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAssignment()  ||  function.isConstructor());	  Preconditions.checkState(function.isAssignment()    ||    function.isConstructor());    	non-compiled	[CE]  	163	None	replace
1348	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
1349	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
1350	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionPrototype());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionPrototype());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionPrototype());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	51	None	replace
1351	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefine()  ||  function.isAll());	  Preconditions.checkState(function.isDefine()    ||    function.isAll());    	non-compiled	[CE]  	173	None	replace
1352	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isUnreferenced());	  Preconditions.checkState(parentScope.isUnreferenced());    	non-compiled	[CE]  	28	None	replace
1353	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isDefine());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isDefine());	  Preconditions.checkState(function!=    null    ||    function.isDefine());    	non-compiled	[CE]  	251	None	replace
1354	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  function.isDefine());	  Preconditions.checkState(function!=    null    ||    function.isDefine());    	non-compiled	[CE]  	251	None	replace
1355	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isConstructor());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  function.isConstructor());	  Preconditions.checkState(function!=    null    ||    function.isConstructor());    	non-compiled	[CE]  	38	None	replace
1356	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isConstructor());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isConstructor());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isConstructor());    	non-compiled	[CE]  	30	None	replace
1357	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
1358	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.BLOCK);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.BLOCK);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
1359	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	235	None	replace
1360	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerFunctionNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerFunctionNode();	  Node    body    =    fnScope.getReferencedFunctionNode();    	non-compiled	[CE]  	22	None	replace
1361	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getRootNode());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getRootNode());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME,  fnScope.getRootNode());	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1362	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1363	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.getChildCount()  ==  2);	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1364	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.hasChildren());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.NAME);    	non-compiled	[CE]  	179	None	replace
1365	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderNode(referenced);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderNode(referenced);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderNode(referenced);	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
1366	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerNode();	  Node    body    =    fnScope.getHeaderNode();    	non-compiled	[CE]  	16	None	replace
1367	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isUnknown());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isUnknown());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnknown());    	non-compiled	[CE]  	273	None	replace
1368	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isLocal());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isLocal());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isLocal());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnknown());    	non-compiled	[CE]  	273	None	replace
1369	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnknown());    	non-compiled	[CE]  	273	None	replace
1370	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
1371	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function!=    null    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	203	None	replace
1372	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  >=  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  >=  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  >=  2);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getChildCount()    ==    2);    	non-compiled	[CE]  	238	None	replace
1373	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	187	None	replace
1374	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isExtern());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  ||  function.isExtern());	  Preconditions.checkState(function.isAll()    ||    function.isExtern());    	non-compiled	[CE]  	175	None	replace
1375	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
1376	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
1377	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	48	None	replace
1378	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    &&    function.isFunction());    	non-compiled	[CE]  	29	None	replace
1379	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    &&    function.isFunction());    	non-compiled	[CE]  	29	None	replace
1380	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FOR  &&  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FOR  &&  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FOR  &&  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    &&    function.isFunction());    	non-compiled	[CE]  	29	None	replace
1381	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	200	None	replace
1382	[BUG]  [BUGGY]  Node  body  =  fnScope.getBody(2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getBody(2);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getBody(2);	  Node    body    =    fnScope.getAncestor(2);    	non-compiled	[CE]  	261	None	replace
1383	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
1384	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()!=  null);	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	84	None	replace
1385	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getNextNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getNextNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  function.getNextNode();	  Node    c    =    function!=    null?    fnScope.getCurrentNode()    :    parentScope.getCurrentNode();    	non-compiled	[CE]  	152	None	replace
1386	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
1387	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isExpressionNode(function.getString()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
1388	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	138	None	replace
1389	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerFunction();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerFunction();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerFunction();	  Node    body    =    fnScope.getReferencedFunction();    	non-compiled	[CE]  	20	None	replace
1390	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefined()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isDefined()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	194	None	replace
1391	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()!=  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkArgument(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	272	None	replace
1392	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	49	None	replace
1393	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	49	None	replace
1394	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.CALL);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1395	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL  ||  function.getType()  ==  Token.BLOCK);	  Preconditions.checkState(function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	252	None	replace
1396	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isAll());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  ||  function.isAll());	  Preconditions.checkState(function.isAll()    ||    function.isAll());    	non-compiled	[CE]  	7	None	replace
1397	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	136	None	replace
1398	[BUG]  [BUGGY]  Preconditions.checkState(!function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	136	None	replace
1399	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    &&!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	136	None	replace
1400	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isConstructor());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefined()  ||  function.isConstructor());	  Preconditions.checkState(function.isDefined()    ||    function.isConstructor());    	non-compiled	[CE]  	161	None	replace
1401	[BUG]  [BUGGY]  Node  nameNode  =  function!=  null?  fnScope.getFunctionNameNode()  :  null;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  function!=  null?  fnScope.getFunctionNameNode()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function!=  null?  fnScope.getFunctionNameNode()  :  null;	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
1402	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode(parent);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getFunctionNameNode(parent);	  Node    nameNode    =    fnScope.getFunctionNameNode();    	non-compiled	[CE]  	56	None	replace
1403	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnknown()  ||  function.isAll());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isUnknown()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnknown()  ||  function.isAll());	  Preconditions.checkState(function.isVar()    ||    function.isAll());    	non-compiled	[CE]  	5	None	replace
1404	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.BLOCK);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.BLOCK);	  Preconditions.checkState(function!=    null);    	non-compiled	[CE]  	223	None	replace
1405	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isVarArgs());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    &&    function.isVarArgs());    	non-compiled	[CE]  	115	None	replace
1406	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isConstructor());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefine()  ||  function.isConstructor());	  Preconditions.checkState(function.isDefine()    ||    function.isConstructor());    	non-compiled	[CE]  	215	None	replace
1407	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.getType()!=  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
1408	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction()    ||    function.getType()    ==    Token.VAR);    	non-compiled	[CE]  	233	None	replace
1409	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionBodyNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionBodyNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionBodyNode();	  Node    body    =    fnScope.getBodyNode();    	non-compiled	[CE]  	19	None	replace
1410	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderBodyNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getHeaderBodyNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderBodyNode();	  Node    body    =    fnScope.getBodyNode();    	non-compiled	[CE]  	19	None	replace
1411	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
1412	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getParent()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	74	None	replace
1413	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isUnknown());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isUnknown());	  Preconditions.checkState(function.isType()    ||    function.isExtern());    	non-compiled	[CE]  	176	None	replace
1414	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isType()  ||  function.isExtern());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isType()  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isType()  ||  function.isExtern());	  Preconditions.checkState(function.isType()    ||    function.isExtern());    	non-compiled	[CE]  	176	None	replace
1415	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isVarArgs());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  ||  function.isVarArgs());	  Preconditions.checkState(function.isAll()    ||    function.isVarArgs());    	non-compiled	[CE]  	117	None	replace
1416	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString(),  function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
1417	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getChildCount()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getChildCount()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getChildCount()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
1418	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getInitialValue()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getInitialValue()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getInitialValue()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),    function.getType()));    	non-compiled	[CE]  	109	None	replace
1419	[BUG]  [BUGGY]  Node  function  =  fnScope.getParentNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  function  =  fnScope.getParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  function  =  fnScope.getParentNode();	  Node    parentScope    =    function.getParentNode();    	non-compiled	[CE]  	62	None	replace
1420	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOwnerNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentOwnerNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOwnerNode();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	263	None	replace
1421	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentTree();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentTree();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	263	None	replace
1422	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentObj();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getParentObj();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentObj();	  Node    parent    =    fnScope.getParentRootNode();    	non-compiled	[CE]  	263	None	replace
1423	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerNode(function);  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerNode(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerNode(function);	  Node    parent    =    fnScope.getOwnerNode();    	non-compiled	[CE]  	264	None	replace
1424	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getParentScope(scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getParentScope(scope);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getParentScope(scope);	  Node    parentScope    =    fnScope.getParentScope();    	non-compiled	[CE]  	184	None	replace
1425	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeepNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeepNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeepNode();	  Node    body    =    parentScope.getRootNode();    	non-compiled	[CE]  	15	None	replace
1426	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestorBlock();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAncestorBlock();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestorBlock();	  Node    body    =    parentScope.getRootNode();    	non-compiled	[CE]  	15	None	replace
1427	[BUG]  [BUGGY]  Node  c  =  function.getImmediateParentNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getImmediateParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getImmediateParentNode();	  Node    c    =    function.getLastChild();    	non-compiled	[CE]  	269	None	replace
1428	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  node.getFirstChild();	  Node    c    =    function.getLastChild();    	non-compiled	[CE]  	269	None	replace
1429	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefine()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isDefine()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	202	None	replace
1430	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!function.isUnreferenced());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!function.isUnreferenced());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1431	[BUG]  [BUGGY]  Preconditions.checkState(!function.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isDefine());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1432	[BUG]  [BUGGY]  Preconditions.checkArgument(!function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(!function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(!function.isUnreferenced());	  Preconditions.checkState(!function.isUnreferenced());    	non-compiled	[CE]  	25	None	replace
1433	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isDefined());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  function.isDefined());	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
1434	[BUG]  [BUGGY]  Preconditions.checkArgument(function  ==  null  ||  function.isDefined());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function  ==  null  ||  function.isDefined());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function  ==  null  ||  function.isDefined());	  Preconditions.checkState(function!=    null    ||    function.isDefined());    	non-compiled	[CE]  	218	None	replace
1435	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isAll());	  Preconditions.checkArgument(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	262	None	replace
1436	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.getRootNode()  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.getRootNode()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
1437	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.getRootNode()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.getRootNode()  ==  null);	  Preconditions.checkState(function!=    null    ||    function.getRootNode()    ==    null);    	non-compiled	[CE]  	224	None	replace
1438	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerFunctionDeclarations();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerFunctionDeclarations();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerFunctionDeclarations();	  Node    body    =    fnScope.getFunctionDeclarations();    	non-compiled	[CE]  	199	None	replace
1439	[BUG]  [BUGGY]  Node  c  =  function.getNextNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getNextNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getNextNode();	  Node    c    =    parentScope.getCurrentNode();    	non-compiled	[CE]  	150	None	replace
1440	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isExtern());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isExtern());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExtern());    	non-compiled	[CE]  	34	None	replace
1441	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
1442	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	189	None	replace
1443	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isExtern());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isExtern());	  Preconditions.checkState(function!=    null    ||    function.isExtern());    	non-compiled	[CE]  	39	None	replace
1444	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isExtern());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isExtern());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isExtern());	  Preconditions.checkState(function!=    null    ||    function.isExtern());    	non-compiled	[CE]  	39	None	replace
1445	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFunction()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFunction()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));    	non-compiled	[CE]  	121	None	replace
1446	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
1447	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunction(function.getFirstChild()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	195	None	replace
1448	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
1449	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getOwnerFunction()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.mayHaveSecondarySideEffects(function.getParent()));    	non-compiled	[CE]  	188	None	replace
1450	[BUG]  [BUGGY]  Node  parent  =  this.parentScope.getParentNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  this.parentScope.getParentNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  this.parentScope.getParentNode();	  Node    parent    =    scope.getParentNode();    	non-compiled	[CE]  	81	None	replace
1451	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
1452	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getValue()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getValue()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getValue()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	105	None	replace
1453	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerFunctionDeclaration();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerFunctionDeclaration();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerFunctionDeclaration();	  Node    body    =    fnScope.getFunctionDeclaration();    	non-compiled	[CE]  	197	None	replace
1454	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isFunction(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));    	non-compiled	[CE]  	191	None	replace
1455	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isUnknown());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isUnknown());	  Preconditions.checkArgument(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	250	None	replace
1456	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||    NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	139	None	replace
1457	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionNameNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionNameNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionNameNode();	  Node    parent    =    fnScope.getReferenceNameNode();    	non-compiled	[CE]  	214	None	replace
1458	[BUG]  [BUGGY]  Node  c  =  fnScope.getVar(function);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getVar(function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getVar(function);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
1459	[BUG]  [BUGGY]  Node  c  =  fnScope.getFunctionNode(parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  fnScope.getFunctionNode(parent);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFunctionNode(parent);	  Node    c    =    fnScope.getFunctionNode(function);    	non-compiled	[CE]  	268	None	replace
1460	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.mayHaveSecondarySideEffects(function));    	non-compiled	[CE]  	220	None	replace
1461	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(this);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent(this);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent(this);	  Node    parent    =    fnScope.getOwnerFunctionParent();    	non-compiled	[CE]  	243	None	replace
1462	[BUG]  [BUGGY]  Node  parent  =  this.parentScope.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  this.parentScope.getParent();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  this.parentScope.getParent();	  Node    parent    =    scope.getParent();    	non-compiled	[CE]  	10	None	replace
1463	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isAll()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	4	None	replace
1464	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	147	None	replace
1465	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));    	non-compiled	[CE]  	134	None	replace
1466	[BUG]  [BUGGY]  Node  body  =  fnScope.getBodyRootNode();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getBodyRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getBodyRootNode();	  Node    body    =    fnScope.getBody();    	non-compiled	[CE]  	21	None	replace
1467	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isAssignmentOp());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isAssignmentOp());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isAssignmentOp());	  Preconditions.checkState(function!=    null    ||    function.isAssignmentOp());    	non-compiled	[CE]  	40	None	replace
1468	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isExpression());    	non-compiled	[CE]  	35	None	replace
1469	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isExpressionNode(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));    	non-compiled	[CE]  	266	None	replace
1470	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.isDefine()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isDefine()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isDefine());    	non-compiled	[CE]  	271	None	replace
1471	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExpectedFunctionExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExpectedFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExpectedFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunctionExpression());    	non-compiled	[CE]  	32	None	replace
1472	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isVarArgs());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isVarArgs());	  Preconditions.checkState(function!=    null    &&    function.isVarArgs());    	non-compiled	[CE]  	253	None	replace
1473	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isUnknown());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isUnknown());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isUnknown());	  Preconditions.checkState(function!=    null    &&    function.isVarArgs());    	non-compiled	[CE]  	253	None	replace
1474	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isDeclaration());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isDeclaration());	  Preconditions.checkState(function.isFunction()    ||    function.isAssignmentOp());    	non-compiled	[CE]  	118	None	replace
1475	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
1476	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()  ==  Token.CALL);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()  ==  Token.CALL);  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getFirstChild()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.getType()    ==    Token.CALL);    	non-compiled	[CE]  	239	None	replace
1477	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getOwnerScope(scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =  fnScope.getOwnerScope(scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getOwnerScope(scope);	  Node    parentScope    =    fnScope.getOwnerScope();    	non-compiled	[CE]  	246	None	replace
1478	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isUnreferenced());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isUnreferenced());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isUnreferenced());    	non-compiled	[CE]  	23	None	replace
1479	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefined()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
1480	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isExpression());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isExpression());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
1481	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isFunctionDeclaration());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isFunctionDeclaration());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isFunctionDeclaration());	  Preconditions.checkState(function.isDefined()    ||    function.isUnreferenced());    	non-compiled	[CE]  	125	None	replace
1482	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefine()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefine()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isDefine()    ||    function.isUnreferenced());    	non-compiled	[CE]  	182	None	replace
1483	[BUG]  [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentToken()  :  nameNode;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function  ==  null?  fnScope.getCurrentToken()  :  nameNode;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function  ==  null?  fnScope.getCurrentToken()  :  nameNode;	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
1484	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  null;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  null;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentToken()  :  null;	  Node    c    =    fnScope.getCurrentToken();    	non-compiled	[CE]  	227	None	replace
1485	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionRootNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getFunctionRootNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionRootNode();	  Node    body    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	130	None	replace
1486	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeepestScope();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeepestScope();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeepestScope();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
1487	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnScope(scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnScope(scope);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnScope(scope);	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
1488	[BUG]  [BUGGY]  Node  body  =  fnScope.getAssignedBy();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getAssignedBy();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAssignedBy();	  Node    body    =    fnScope.getOwnScope();    	non-compiled	[CE]  	132	None	replace
1489	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(referenced,  function);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(referenced,  function);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(referenced,  function);	  Node    nameNode    =    fnScope.getNameNode(referenced);    	non-compiled	[CE]  	61	None	replace
1490	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getName()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getName()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.getName()!=  null);	  Preconditions.checkState(function.getName()!=    null);    	non-compiled	[CE]  	210	None	replace
1491	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
1492	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()!=    null);    	non-compiled	[CE]  	230	None	replace
1493	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	159	None	replace
1494	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
1495	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getFirstChild(),  function.getLastChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getFirstChild(),  function.getLastChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),    function.getLastChild()));    	non-compiled	[CE]  	73	None	replace
1496	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isVarArgs());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isVarArgs());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isVarArgs());    	non-compiled	[CE]  	114	None	replace
1497	[BUG]  [BUGGY]  Preconditions.checkState(function.isNode()  ||  function.isVarArgs());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isNode()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isNode()  ||  function.isVarArgs());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isVarArgs());    	non-compiled	[CE]  	114	None	replace
1498	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getNode()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getNode()!=  null);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
1499	[BUG]  [BUGGY]  Preconditions.checkState(function.getChildCount()  ==  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getChildCount()  ==  1);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getChildCount()  ==  1);	  Preconditions.checkState(function.getNode()    ==    null);    	non-compiled	[CE]  	96	None	replace
1500	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	46	None	replace
1501	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnerSize();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getOwnerSize();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnerSize();	  Node    body    =    fnScope.getHeaderSize();    	non-compiled	[CE]  	171	None	replace
1502	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
1503	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isVar(function.getFirstChild()));	  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	89	None	replace
1504	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor()    ||    function.isFunction());    	non-compiled	[CE]  	256	None	replace
1505	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionNode();	  Node    parent    =    fnScope.getPrefixNode();    	non-compiled	[CE]  	14	None	replace
1506	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isDefine());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isDefine());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isDefine());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isDefine());    	non-compiled	[CE]  	209	None	replace
1507	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isDefined()  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isDefined()  ||  function.isAll());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
1508	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isVar());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isVar());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isVar());	  Preconditions.checkState(function.isDefined()    ||    function.isAll());    	non-compiled	[CE]  	6	None	replace
1509	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
1510	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunction(function.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunction(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunction(function.getString()));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	201	None	replace
1511	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isAll());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isAll());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
1512	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isAll());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isAll());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isAll());	  Preconditions.checkState(function!=    null    ||    function.isAll());    	non-compiled	[CE]  	217	None	replace
1513	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionNode()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(fnScope.getFunctionNode()!=  null);	  Preconditions.checkState(fnScope.getFunctionNode()    ==    null);    	non-compiled	[CE]  	247	None	replace
1514	[BUG]  [BUGGY]  Node  c  =  function.getPreviousNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  c  =  function.getPreviousNode();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getPreviousNode();	  Node    c    =    function.getCurrentNode();    	non-compiled	[CE]  	149	None	replace
1515	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
1516	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
1517	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	231	None	replace
1518	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.BLOCK);	  Preconditions.checkState(function.getParent()    ==    null);    	non-compiled	[CE]  	75	None	replace
1519	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(parent,  node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(parent,  node);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(parent,  node);	  Node    nameNode    =    fnScope.getNameNode(node);    	non-compiled	[CE]  	57	None	replace
1520	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isUnreferenced()  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isUnreferenced()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isUnreferenced()  ||  function.isFunction());	  Preconditions.checkState(function.isUnreferenced()    ||    function.isFunction());    	non-compiled	[CE]  	27	None	replace
1521	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeepestSibling();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  body  =  fnScope.getDeepestSibling();  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeepestSibling();	  Node    body    =    fnScope.getHeaderSibling();    	non-compiled	[CE]  	258	None	replace
1522	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function.toString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function.toString());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function.toString());	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
1523	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function.replaceWithZero());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function.replaceWithZero());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function.replaceWithZero());	  Node    nameNode    =    fnScope.getNameNode(toReplaceWithZero());    	non-compiled	[CE]  	207	None	replace
1524	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  function.getParent());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  function.getParent());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  function.getParent());	  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()    +    1));    	non-compiled	[CE]  	103	None	replace
1525	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  function.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  function.isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()),  function.isFunction());	  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	107	None	replace
1526	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isFunction());  [CE]  [FE]              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope!=  null  ||  function.isFunction());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
1527	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.scope.isFunction());  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function!=  null  ||  function.scope.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.scope.isFunction());	  Preconditions.checkState(function!=    null    ||    fnScope.isFunction());    	non-compiled	[CE]  	193	None	replace
1528	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isAll()  ||  function.isConstructor());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isAll()  ||  function.isConstructor());	  Preconditions.checkState(function.isAll()    ||    function.isConstructor());    	non-compiled	[CE]  	164	None	replace
1529	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isFunctionExpression());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
1530	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isFunctionExpression());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isFunctionExpression());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunctionExpression());    	non-compiled	[CE]  	41	None	replace
1531	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()!=    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	33	None	replace
1532	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isType()  ||  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isType()  ||  function.isUnreferenced());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isType()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
1533	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isVarArgs());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isVarArgs());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isVarArgs());	  Preconditions.checkState(function.isType()    ||    function.isUnreferenced());    	non-compiled	[CE]  	183	None	replace
1534	[BUG]  [BUGGY]  Node  parentScope  =(parent!=  null)?  fnScope.getParent()  :  function;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Node  parentScope  =(parent!=  null)?  fnScope.getParent()  :  function;  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(parent!=  null)?  fnScope.getParent()  :  function;	  Node    parentScope    =(fnScope!=    null)?    fnScope.getParent()    :    function;    	non-compiled	[CE]  	204	None	replace
1535	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetValue(function.getFirstChild()));	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
1536	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  function.isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  function.isFunction());  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()),  function.isFunction());	  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));    	non-compiled	[CE]  	240	None	replace
1537	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isExtern()  ||  function.isFunction());  [CE]  [FE]            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(function.isExtern()  ||  function.isFunction());  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isExtern()  ||  function.isFunction());	  Preconditions.checkState(function.isExtern()    ||    function.isFunction());    	non-compiled	[CE]  	165	None	replace
1538	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkState(!function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]      if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isUnreferenced()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	137	None	replace
1539	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	232	None	replace
1540	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]              Node  function  =  fnScope.getRootNode();      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkArgument(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	232	None	replace
