bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isAll());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isAll());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isAll());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isAll());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAll());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isAll());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  Node  parent  =  function.getParent();  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  function.getParent();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getParent();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
9	[BUG]  [BUGGY]  Node  parent  =  fnScope.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getLastChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getLastChild();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
10	[BUG]  [BUGGY]  Node  parent  =  scope.getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  scope.getParent();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getParent();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNameNode();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getNameNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
12	[BUG]  [BUGGY]  Node  parent  =  fnScope.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getNext();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getNext();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  Node  parent  =  fnScope.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getFirstChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getFirstChild();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  Node  parent  =  fnScope.getPrefixNode();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getPrefixNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getPrefixNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  Node  body  =  parentScope.getRootNode();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  parentScope.getRootNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getRootNode();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderNode();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getHeaderNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderNode();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionNode();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getFunctionNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionNode();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]  Node  body  =  scope.getRootNode();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  scope.getRootNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  scope.getRootNode();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
19	[BUG]  [BUGGY]  Node  body  =  fnScope.getBodyNode();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getBodyNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getBodyNode();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
20	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunction();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getReferencedFunction();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunction();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
21	[BUG]  [BUGGY]  Node  body  =  fnScope.getBody();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getBody();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getBody();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
22	[BUG]  [BUGGY]  Node  body  =  fnScope.getReferencedFunctionNode();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getReferencedFunctionNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getReferencedFunctionNode();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(!function.isUnreferenced());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(!function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnreferenced());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isFunction());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isUnreferenced());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(parentScope.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isUnreferenced());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  &&  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isConstructor());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isAssignmentOp());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isFunctionExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExtern());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExpression());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isExpression());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isFunction());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.isFunction());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.isFunction());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isConstructor());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isConstructor());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isExtern());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isExtern());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAssignmentOp());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAssignmentOp());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isAssignmentOp());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunctionExpression());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isFunctionExpression());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isFunctionExpression());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()!=  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()!=  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isFunction());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(parentScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.isFunction());	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
54	[BUG]  [BUGGY]  Node  nameNode  =  function.getNameNode();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  function.getNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  function.getNameNode();	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
55	[BUG]  [BUGGY]  Node  nameNode  =  parentScope.getNameNode();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  parentScope.getNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  parentScope.getNameNode();	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
56	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getFunctionNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getFunctionNameNode();	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
57	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(node);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(node);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(node);	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
58	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode();  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getReferenceNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getReferenceNameNode();	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
59	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(null);  [CE]  [FE]                                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(null);	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
60	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function);  [CE]  [FE]                                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(function);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(function);	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
61	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(referenced);  [CE]  [FE]                                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(referenced);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(referenced);	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
62	[BUG]  [BUGGY]  Node  parentScope  =  function.getParentNode();  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  function.getParentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getParentNode();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
63	[BUG]  [BUGGY]  Node  parentScope  =  scope.getParentNode();  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  scope.getParentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getParentNode();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
64	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getLastChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getLastChild();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
65	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getFirstChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getFirstChild();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
66	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getNameNode();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getNameNode();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
67	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getNext();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getNext();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  Node  parentScope  =  function.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  function.getNext();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getNext();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  isPropertyAssign);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()  +  1));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getType()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild(),  function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(function.getParent()  ==  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getParent()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getParent()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(function.getParent()!=  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getParent()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getParent()!=  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getParent()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getParent()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
80	[BUG]  [BUGGY]  Node  parent  =  function.getParentNode();  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  function.getParentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  function.getParentNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
81	[BUG]  [BUGGY]  Node  parent  =  scope.getParentNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  scope.getParentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  scope.getParentNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
82	[BUG]  [BUGGY]  Node  parent  =  fnScope.getConstructorNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getConstructorNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getConstructorNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.NAME);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(fnScope.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(function.getRootNode()  ==  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getRootNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getRootNode()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(function.getRootNode()!=  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getRootNode()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParentNode()  ==  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getParentNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getParentNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getRootNode()  ==  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(parentScope.getRootNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(function.getNode()  ==  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(function.getParentNode()  ==  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getParentNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getParentNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isUnreferenced());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isUnreferenced());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isConstructor());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isConstructor());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isAssignmentOp());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isAssignmentOp());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isAssignmentOp());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isExtern());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isExtern());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isDefined());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isDefined());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isDefined());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()  +  1));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  isPropertyAssign);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.isGetOrSetKey(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()),  fnScope);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(NodeUtil.isGetOrSetKey(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getName()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString(),  function.getType()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParent()!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(parentScope.getParent()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(parentScope.getParent()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	19	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNameNode()!=  null);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getNameNode()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getNameNode()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	19	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(function.getNext()!=  null);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getNext()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getNext()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	19	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isFunction());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isVarArgs()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVarArgs()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isVarArgs());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isVarArgs());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isVarArgs());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isVarArgs());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isVarArgs());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isVarArgs());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isVarArgs());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isVarArgs());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isAssignmentOp());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isAssignmentOp());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isAssignmentOp());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNext()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	28	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getNameNode()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	28	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFunction()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	28	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getQualifiedName()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	28	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isUnreferenced());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isUnreferenced());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isUnreferenced());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isUnreferenced());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isUnreferenced());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isVar()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isVar()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
128	[BUG]  [BUGGY]  Node  body  =  parentScope.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  parentScope.getLastChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  parentScope.getLastChild();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
129	[BUG]  [BUGGY]  Node  body  =  fnScope.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getFirstChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFirstChild();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
130	[BUG]  [BUGGY]  Node  body  =  fnScope.getCurrentNode();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getCurrentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getCurrentNode();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
131	[BUG]  [BUGGY]  Node  body  =  function.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  function.getLastChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getLastChild();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
132	[BUG]  [BUGGY]  Node  body  =  fnScope.getOwnScope();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getOwnScope();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getOwnScope();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
133	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionExpression();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getFunctionExpression();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionExpression();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isSetKey(function.getString()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
141	[BUG]  [BUGGY]  Node  parentScope  =  function.getParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  function.getParent();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  function.getParent();	      Node    parentScope    =    fnScope.getParent();    	non-compiled	[CE]  	15	None	replace
142	[BUG]  [BUGGY]  Node  parentScope  =  scope.getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  scope.getParent();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  scope.getParent();	      Node    parentScope    =    fnScope.getParent();    	non-compiled	[CE]  	15	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getLastChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||!NodeUtil.mayHaveSecondarySideEffects(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
149	[BUG]  [BUGGY]  Node  c  =  function.getCurrentNode();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function.getCurrentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getCurrentNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
150	[BUG]  [BUGGY]  Node  c  =  parentScope.getCurrentNode();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  parentScope.getCurrentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  parentScope.getCurrentNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
151	[BUG]  [BUGGY]  Node  c  =  scope.getCurrentNode();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  scope.getCurrentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  scope.getCurrentNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
152	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  parentScope.getCurrentNode();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  parentScope.getCurrentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  parentScope.getCurrentNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
153	[BUG]  [BUGGY]  Node  c  =  function.getFirstChild();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function.getFirstChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getFirstChild();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
154	[BUG]  [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  null;  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  null;  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function!=  null?  fnScope.getCurrentNode()  :  null;	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
155	[BUG]  [BUGGY]  Node  c  =  fnScope.getLastChild();  [CE]  [FE]                                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  fnScope.getLastChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getLastChild();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
156	[BUG]  [BUGGY]  Node  c  =  function.getNode();  [CE]  [FE]                                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function.getNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isConstructor());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isConstructor());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isConstructor());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isConstructor());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefined()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isConstructor());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isConstructor());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAssignment()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAssignment()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isConstructor());  [CE]  [FE]                                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isFunction());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isExtern()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isExtern()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isExtern());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isExtern());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isExtern());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  &&  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  &&  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isExtern());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isConstructor()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isConstructor()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
170	[BUG]  [BUGGY]  Node  body  =  fnScope.getChildCount();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getChildCount();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getChildCount();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
171	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderSize();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getHeaderSize();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderSize();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isVarArgs());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isVarArgs());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isVarArgs());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isAll());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isAll());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isGet()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isGet()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isExtern());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isExtern());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isExpression());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isExpression());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isExpression());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isExtern());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isName()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isName()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.NAME);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(function.getNext()  ==  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getNext()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getNext()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(function.getName()  ==  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getName()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getName()  ==  null);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isUnreferenced());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isUnreferenced());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isUnreferenced());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isUnreferenced());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
184	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getParentScope();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getParentScope();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getParentScope();	      	non-compiled	[CE]  	7	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isUnreferenced()  ||!NodeUtil.isGetOrSetKey(function.getParent()));	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isDefine());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isDefine());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isDefine());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||  NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString())||!NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
190	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getNextNode();  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getNextNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getNextNode();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getLastChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function  ==  null  &&  function.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  &&  function.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  fnScope.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	23	None	replace
197	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionDeclaration();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getFunctionDeclaration();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionDeclaration();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
198	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestor(1);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getAncestor(1);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestor(1);	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
199	[BUG]  [BUGGY]  Node  body  =  fnScope.getFunctionDeclarations();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getFunctionDeclarations();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getFunctionDeclarations();	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefined()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||!NodeUtil.isGetOrSetKey(function.getString()));	  Preconditions.checkState(function.isFunction()    ||!NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	22	None	replace
204	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  function;  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  function;  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  function;	      Node    parentScope    =    fnScope.getParent();    	non-compiled	[CE]  	15	None	replace
205	[BUG]  [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  null;  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  null;  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =(fnScope!=  null)?  fnScope.getParent()  :  null;	      Node    parentScope    =    fnScope.getParent();    	non-compiled	[CE]  	15	None	replace
206	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(parent);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(parent);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(parent);	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
207	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero());  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero());	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDefine());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDefine());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isDefine());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(function.getName()!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getName()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getName()!=  null);	      Preconditions.checkState(fnScope.getParent()!=    null);    	non-compiled	[CE]  	19	None	replace
211	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParent(parent);  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getParent(parent);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParent(parent);	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
212	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnScope();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getOwnScope();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnScope();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
213	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOperator();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getParentOperator();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOperator();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
214	[BUG]  [BUGGY]  Node  parent  =  fnScope.getReferenceNameNode();  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getReferenceNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getReferenceNameNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isConstructor());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isConstructor());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isType()  ||  function.isConstructor());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isType()  ||  function.isConstructor());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAll());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isAll());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefined());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDefined());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.hasChildren());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(function));	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getRootNode()  ==  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.getRootNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function  ==  null  ||  fnScope.getRootNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function  ==  null  ||  fnScope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getRootNode()  ==  null);  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.getRootNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
225	[BUG]  [BUGGY]  Node  c  =  fnScope.getCurrentNameNode();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  fnScope.getCurrentNameNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getCurrentNameNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
226	[BUG]  [BUGGY]  Node  c  =  fnScope.getRootNode();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  fnScope.getRootNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getRootNode();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
227	[BUG]  [BUGGY]  Node  c  =  fnScope.getCurrentToken();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  fnScope.getCurrentToken();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getCurrentToken();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
228	[BUG]  [BUGGY]  Node  c  =  fnScope.getFirstChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  fnScope.getFirstChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFirstChild();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()),  fnScope);	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()!=  null);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getRootNode()  ==  null);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	18	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.VAR);  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  function.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.isFunction());    	non-compiled	[CE]  	2	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(function.isAll());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isAll());	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR);  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.VAR);	  Preconditions.checkState(function.isUnreferenced());    	non-compiled	[CE]  	1	None	replace
236	[BUG]  [BUGGY]  Node  body  =  function.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  function.getFirstChild();  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  function.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  1);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getChildCount()  ==  2);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.getType()  ==  Token.CALL);	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isGetOrSetValue(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getLastChild()));    	non-compiled	[CE]  	26	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isFunction());  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isUnreferenced());    	non-compiled	[CE]  	5	None	replace
242	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunction();  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getOwnerFunction();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunction();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
243	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getOwnerFunctionParent();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerFunctionParent();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
244	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfRootNode();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getParentOfRootNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfRootNode();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
245	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentOfThis();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getParentOfThis();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentOfThis();	      Node    parent    =    fnScope.getParent();    	non-compiled	[CE]  	14	None	replace
246	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getOwnerScope();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getOwnerScope();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getOwnerScope();	      Node    parentScope    =    fnScope.getParent();    	non-compiled	[CE]  	15	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()  ==  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.getFunctionNode()  ==  null);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.getFunctionNode()  ==  null);	      Preconditions.checkState(fnScope.getRootNode()    ==    null);    	non-compiled	[CE]  	29	None	replace
248	[BUG]  [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  nameNode  =  fnScope.getNameNode(toReplaceWithZero);	      Node    nameNode    =    fnScope.getNameNode();    	non-compiled	[CE]  	21	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isFunction());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(function!=  null  &&  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  &&  function.isFunction());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isFunction());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(function!=  null  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function!=  null  ||  function.isFunction());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefine());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  ||  function.isDefine());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  ||  function.isDefine());	  Preconditions.checkState(function!=    null    ||    function.isFunction());    	non-compiled	[CE]  	8	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.CALL);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.CALL);	      Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	17	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isVarArgs());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isVarArgs());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isVarArgs());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isAll());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function!=  null  &&  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function!=  null  &&  function.isAll());	  Preconditions.checkState(function!=    null    &&    function.isFunction());    	non-compiled	[CE]  	9	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isFunction());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(function.isConstructor()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isFunction());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  function.isFunction());	  Preconditions.checkState(function.isFunction()    ||    function.isConstructor());    	non-compiled	[CE]  	6	None	replace
257	[BUG]  [BUGGY]  Node  body  =  fnScope.getDeepestChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getDeepestChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getDeepestChild();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
258	[BUG]  [BUGGY]  Node  body  =  fnScope.getHeaderSibling();  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getHeaderSibling();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getHeaderSibling();	      Node    body    =    fnScope.getLastChild();    	non-compiled	[CE]  	27	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isExtern());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isDefine()  ||  function.isExtern());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isDefine()  ||  function.isExtern());	  Preconditions.checkState(function.isFunction()    ||    function.isExtern());    	non-compiled	[CE]  	10	None	replace
260	[BUG]  [BUGGY]  Node  parentScope  =  fnScope.getParentRootNode();  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parentScope  =  fnScope.getParentRootNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parentScope  =  fnScope.getParentRootNode();	      Node    parentScope    =    fnScope.getParentNode();    	non-compiled	[CE]  	12	None	replace
261	[BUG]  [BUGGY]  Node  body  =  fnScope.getAncestor(2);  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  body  =  fnScope.getAncestor(2);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  body  =  fnScope.getAncestor(2);	      Node    body    =    fnScope.getRootNode();    	non-compiled	[CE]  	16	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isAll());  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(function.isFunction()  ||  function.isAll());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.isFunction()  ||  function.isAll());	  Preconditions.checkState(function.isFunction()    ||    function.isAll());    	non-compiled	[CE]  	11	None	replace
263	[BUG]  [BUGGY]  Node  parent  =  fnScope.getParentRootNode();  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getParentRootNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getParentRootNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
264	[BUG]  [BUGGY]  Node  parent  =  fnScope.getOwnerNode();  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getOwnerNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getOwnerNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
265	[BUG]  [BUGGY]  Node  parent  =  fnScope.getCurrentNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  parent  =  fnScope.getCurrentNode();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  parent  =  fnScope.getCurrentNode();	      Node    parent    =    fnScope.getParentNode();    	non-compiled	[CE]  	13	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getFirstChild()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getFirstChild()));    	non-compiled	[CE]  	24	None	replace
267	[BUG]  [BUGGY]  Node  c  =  function.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function.getNext();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getNext();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
268	[BUG]  [BUGGY]  Node  c  =  fnScope.getFunctionNode(function);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  fnScope.getFunctionNode(function);  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  fnScope.getFunctionNode(function);	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
269	[BUG]  [BUGGY]  Node  c  =  function.getLastChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Node  c  =  function.getLastChild();  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Node  c  =  function.getLastChild();	      Node    c    =    fnScope.getCurrentNode();    	non-compiled	[CE]  	20	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getParent()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getParent()));    	non-compiled	[CE]  	28	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isDefine());  [CE]  [FE]        AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.isFunction()  ||  function.isDefine());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.isFunction()  ||  function.isDefine());	  Preconditions.checkState(function.isFunction()    ||    function.isVarArgs());    	non-compiled	[CE]  	30	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkArgument(function.getType()  ==  Token.FUNCTION  ||  function.isFunction());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());  [BUGGY]    if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(function.getType()  ==  Token.FUNCTION  ||  function.isUnknown());	  Preconditions.checkState(function.getType()    ==    Token.FUNCTION    ||    function.isFunction());    	non-compiled	[CE]  	3	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.mayHaveSecondarySideEffects(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(function.getString()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isFunction(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]            Node  function  =  fnScope.getRootNode();    [BUGGY]  Preconditions.checkState(NodeUtil.isName(function.getString()));  [BUGGY]    Preconditions.checkState(function.isFunction());  if  (NodeUtil.isGetOrSetKey(function.getParent()))  {  return;  }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	382	382	5	replace	Preconditions.checkState(NodeUtil.isName(function.getString()));	      Preconditions.checkState(NodeUtil.isGetOrSetKey(function.getString()));    	non-compiled	[CE]  	25	None	replace
