bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  node);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  node);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  node);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    node);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  node);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  node);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  node);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    node);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  node);  Node  body  =  n.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  node);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  node);  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    node);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  node);  final  Node  n  =  n.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  node);  final  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  node);  final  Node  n  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    node);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
5	[BUG]  [BUGGY]  Node  body  =  scope.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  scope.getLastChild();	  Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  node.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  node.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  node.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  	61	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  node.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  node.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  node.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  	61	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    final    Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	53	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    final    Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	53	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  body  =  parentScope.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  body  =  parentScope.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  body  =  parentScope.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    final    Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	53	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getChildCount()  ==  0);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getChildCount()  ==  0);	  Preconditions.checkState(n.getChildCount()    ==    3);    	non-compiled	[CE]  	37	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getFirstChild();	  final    Node    body    =    parentScope.getFirstChild();    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  final  Node  body  =  n.getLastChild();	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  body  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  body  =  n.getFirstChild();	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  body  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  Node  body  =  n.getLastChild();	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
21	[BUG]  [BUGGY]  Node  body  =  parentScope.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  parentScope.cloneTree();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  parentScope.cloneTree();	  Node    body    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
22	[BUG]  [BUGGY]  Node  body  =  n.getJSDocInfo();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getJSDocInfo();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getJSDocInfo();	  Node    body    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
23	[BUG]  [BUGGY]  Node  body  =  parent.cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  parent.cloneTree();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  parent.cloneTree();	  Node    body    =    n.cloneTree();    	non-compiled	[CE]  	57	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n,  scope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  n,  scope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getFirstChild()  ==  n,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n,  parentScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  n,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()  ==  n,  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n,  parentScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  n,  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  scope,  parentScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  scope,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  scope,  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
29	[BUG]  [BUGGY]  final  Node  body  =  parentScope.removeLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  parentScope.removeLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  parentScope.removeLastChild();	  final    Node    body    =    n.removeLastChild();    	non-compiled	[CE]  	24	None	replace
30	[BUG]  [BUGGY]  final  Node  body  =  parentScope.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  parentScope.getNext();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  parentScope.getNext();	  final    Node    body    =    n.getNext();    	non-compiled	[CE]  	23	None	replace
31	[BUG]  [BUGGY]  final  Node  body  =  n.getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  n.getParent();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  n.getParent();	  final    Node    body    =    n.getNext();    	non-compiled	[CE]  	23	None	replace
32	[BUG]  [BUGGY]  final  Node  body  =  n.getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  n.getString();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  n.getString();	  final    Node    body    =    n.getNext();    	non-compiled	[CE]  	23	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getLastChild();	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	54	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getLastChild();	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	54	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getFirstChild();	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	54	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	54	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getChildCount()!=  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getChildCount()!=  2);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	38	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()  >=  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getChildCount()  >=  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getChildCount()  >=  2);	  Preconditions.checkState(n.getChildCount()    ==    2);    	non-compiled	[CE]  	38	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  body  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  body  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	48	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  body  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	48	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  body  =  n.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  body  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	30	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	30	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getNext();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  body  =  n.getNext();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	30	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  n  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  n  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	49	None	replace
45	[BUG]  [BUGGY]  final  Node  n  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  n  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	49	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  n  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  n  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	49	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(n.getChildCount()!=  3);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getChildCount()!=  3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getChildCount()!=  3);	  Preconditions.checkState(n.getChildCount()    ==    4);    	non-compiled	[CE]  	41	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  body  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  body  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  body  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getNext();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getNext();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()!=  n);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getFirstChild()    ==    n);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  body);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  body);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  body);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getFirstChild()    ==    n);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  n);  Node  body  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  n);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  n);  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getFirstChild()    ==    n);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	26	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  body  =  n.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  body  =  n.getNext();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  body  =  n.getNext();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	26	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  1);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  1);	  Preconditions.checkState(n.getFirstChild()    ==    4);    	non-compiled	[CE]  	14	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  2);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  2);	  Preconditions.checkState(n.getFirstChild()    ==    4);    	non-compiled	[CE]  	14	None	replace
60	[BUG]  [BUGGY]  final  Node  body  =  scope.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  scope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  scope.getFirstChild();	  final    Node    body    =    scope.getLastChild();    	non-compiled	[CE]  	36	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parent.getFirstChild()  ==  n);	  Preconditions.checkState(n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	59	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  node);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  node);	  Preconditions.checkState(n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	59	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  scope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  scope);	  Preconditions.checkState(n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	10	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getFirstChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getFirstChild()  ==  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getFirstChild()  ==  n);	  Preconditions.checkState(n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	10	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()  ==  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	10	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  body  =  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	32	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	32	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  null);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    null);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	20	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    null);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	20	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  final  Node  n  =  n.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  final  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null);  final  Node  n  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    null);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	20	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  body  =  n.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null);  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    null);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	20	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    n    =    n.getLastChild();    	non-compiled	[CE]  	34	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    n    =    n.getLastChild();    	non-compiled	[CE]  	34	None	replace
74	[BUG]  [BUGGY]  final  Node  n  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  n  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    n    =    n.getLastChild();    	non-compiled	[CE]  	34	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    n    =    n.getLastChild();    	non-compiled	[CE]  	34	None	replace
76	[BUG]  [BUGGY]  Node  body  =  n.removeLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.removeLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.removeLastChild();	  Node    body    =    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
77	[BUG]  [BUGGY]  Node  body  =  parentScope.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  parentScope.removeFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  parentScope.removeFirstChild();	  Node    body    =    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
78	[BUG]  [BUGGY]  Node  body  =  n.removeChild(parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.removeChild(parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.removeChild(parentScope);	  Node    body    =    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()!=  Token.NAME);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	8	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	8	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  Node  body  =  parentScope.getfirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  parentScope.getfirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  parentScope.getfirstChild();	  Node    body    =    n.getfirstChild();    	non-compiled	[CE]  	47	None	replace
90	[BUG]  [BUGGY]  Node  body  =  n.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getParent();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getParent();	  Node    body    =    n.getfirstChild();    	non-compiled	[CE]  	47	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  0);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()  ==  0);	  Preconditions.checkState(n.getFirstChild()    ==    0);    	non-compiled	[CE]  	9	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  0);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  0);	  Preconditions.checkState(n.getFirstChild()    ==    0);    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	52	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Node  body  =  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME);  Node  body  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  parentScope);	  Preconditions.checkState(n.getFirstChild()!=    n);    	non-compiled	[CE]  	60	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()!=  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()!=  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()!=  n);	  Preconditions.checkState(n.getFirstChild()!=    n);    	non-compiled	[CE]  	60	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  body);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  body);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  body);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	45	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  n,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	45	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()!=  n);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	45	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getLastChild()  ==  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getLastChild()  ==  n);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	45	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()!=  n,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()!=  n,  parentScope);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	45	None	replace
108	[BUG]  [BUGGY]  Node  body  =  n.getAncestor(2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getAncestor(2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getAncestor(2);	  Node    body    =    n.getAncestor(1);    	non-compiled	[CE]  	22	None	replace
109	[BUG]  [BUGGY]  Node  body  =  n.getAncestor(3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getAncestor(3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getAncestor(3);	  Node    body    =    n.getAncestor(1);    	non-compiled	[CE]  	22	None	replace
110	[BUG]  [BUGGY]  Node  body  =  parentScope.getAncestor(1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  parentScope.getAncestor(1);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  parentScope.getAncestor(1);	  Node    body    =    n.getAncestor(1);    	non-compiled	[CE]  	22	None	replace
111	[BUG]  [BUGGY]  Node  body  =  n.getAncestor(4);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getAncestor(4);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getAncestor(4);	  Node    body    =    n.getAncestor(1);    	non-compiled	[CE]  	22	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()  ==  3);	  Preconditions.checkState(n.getFirstChild()    ==    3);    	non-compiled	[CE]  	11	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  null);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()  ==  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getFirstChild()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getFirstChild()  ==  null);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getFirstChild()  ==  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getLastChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getLastChild().getString().equals( " "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getLastChild().getString().equals( " "));  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getLastChild().getString().equals( " "));	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  4);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getLastChild()  ==  4);	  Preconditions.checkState(n.getLastChild()    ==    n);    	non-compiled	[CE]  	12	None	replace
119	[BUG]  [BUGGY]  final  Node  body  =  parentScope.cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  parentScope.cloneTree();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  parentScope.cloneTree();	  final    Node    body    =    n.cloneTree();    	non-compiled	[CE]  	58	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	43	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  Node  body  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()!=  n);  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    n);    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  0);  Node  body  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  0);  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  0);  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getFirstChild()    ==    n);    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	18	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()!=  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
128	[BUG]  [BUGGY]  Node  body  =  scope.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  scope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  scope.getFirstChild();	  Node    body    =    parentScope.getFirstChild();    	non-compiled	[CE]  	2	None	replace
129	[BUG]  [BUGGY]  Node  body  =  parentScope.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  parentScope.getNext();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  parentScope.getNext();	  Node    body    =    n.getNext();    	non-compiled	[CE]  	3	None	replace
130	[BUG]  [BUGGY]  Node  body  =  n.getBlock();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getBlock();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getBlock();	  Node    body    =    n.getNext();    	non-compiled	[CE]  	3	None	replace
131	[BUG]  [BUGGY]  Node  body  =  n.getString();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getString();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getString();	  Node    body    =    n.getNext();    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	20	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  n  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.GETPROP);  final  Node  n  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
136	[BUG]  [BUGGY]  Node  body  =  n.getlastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getlastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getlastChild();	  Node    body    =    parent.getLastChild();    	non-compiled	[CE]  	4	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	54	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(body.getType()  ==  Token.FUNCTION);  final  Node  n  =  n.getFirstChild();	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	54	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  node  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  node  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  node  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  	61	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getChildCount()  ==  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getChildCount()  ==  2);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.NAME);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.NAME);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.NAME);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	48	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	48	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  parentScope.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	52	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	8	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getFirstChild()    ==    n);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  null);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  null);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  node  =  node.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  node  =  node.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  node  =  node.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    node.getLastChild();    	non-compiled	[CE]  	15	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  node.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  node.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION);  final  Node  body  =  node.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    node.getLastChild();    	non-compiled	[CE]  	15	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  parentScope,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  parentScope,  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  parentScope,  n);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null,  parentScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null,  parentScope);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null,  parentScope);	  Preconditions.checkState(n.getFirstChild()    ==    n,    parentScope);    	non-compiled	[CE]  	13	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	49	None	replace
155	[BUG]  [BUGGY]  final  Node  body  =  n.getChildCount();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  n.getChildCount();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  n.getChildCount();	  final    Node    body    =    n.getNext();    	non-compiled	[CE]  	23	None	replace
156	[BUG]  [BUGGY]  final  Node  body  =  parent.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  parent.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  parent.getFirstChild();	  final    Node    body    =    parent.getLastChild();    	non-compiled	[CE]  	51	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	33	None	replace
158	[BUG]  [BUGGY]  final  Node  body  =  n.getJSDocInfo();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  final  Node  body  =  n.getJSDocInfo();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	final  Node  body  =  n.getJSDocInfo();	  final    Node    body    =    n.cloneTree();    	non-compiled	[CE]  	58	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME,  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  &&  isPropertyAssign);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  &&  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(body.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.NAME);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.NAME);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(body.getType()  ==  Token.NAME);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.NAME);  final  Node  n  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(body.getType()  ==  Token.NAME);  final  Node  n  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(body.getType()  ==  Token.NAME);  final  Node  n  =  n.getFirstChild();	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.hasChildren());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.hasChildren());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.hasChildren());	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.NAME);  final  Node  body  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.NAME);  final  Node  body  =  n.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.NAME);  final  Node  body  =  n.getLastChild();	  Preconditions.checkState(body.getType()    ==    Token.NAME);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	35	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);  final  Node  body  =  parentScope.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    final    Node    body    =    parentScope.getLastChild();    	non-compiled	[CE]  	53	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	30	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  parentScope.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  parentScope.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  final  Node  body  =  parentScope.getFirstChild();	  final    Node    body    =    parentScope.getFirstChild();    	non-compiled	[CE]  	6	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getFirstChild()  ==  node);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getFirstChild()  ==  node);	  Preconditions.checkState(n.getFirstChild()    ==    node);    final    Node    body    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  final  Node  body  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	7	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    final    Node    n    =    n.getLastChild();    	non-compiled	[CE]  	34	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getLastChild().getString().equals( " "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getLastChild().getString().equals( " "));  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getLastChild().getString().equals( " "));	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getFirstChild()    ==    null);    	non-compiled	[CE]  	42	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  child);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  child);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getFirstChild()  ==  child);	  Preconditions.checkState(body.getFirstChild()    ==    n);    	non-compiled	[CE]  	45	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  body  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  body  =  n.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  body  =  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	26	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  scope.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  scope.getLastChild();	  final    Node    body    =    scope.getLastChild();    	non-compiled	[CE]  	36	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  body  =  scope.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  body  =  scope.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  final  Node  body  =  scope.getLastChild();	  final    Node    body    =    scope.getLastChild();    	non-compiled	[CE]  	36	None	replace
187	[BUG]  [BUGGY]  Node  body  =  n.getBlock(1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getBlock(1);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getBlock(1);	  Node    body    =    n.getAncestor(1);    	non-compiled	[CE]  	22	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	56	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    final    Node    body    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  parent.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  parent.getLastChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  parent.getLastChild();	  final    Node    body    =    parent.getLastChild();    	non-compiled	[CE]  	51	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getFirstChild()  ==  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  3);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME  ||  body.getChildCount()  ==  3);	  Preconditions.checkState(body.getType()    ==    Token.NAME);    	non-compiled	[CE]  	29	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  node.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  node.getFirstChild();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  final  Node  body  =  node.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    final    Node    body    =    node.getLastChild();    	non-compiled	[CE]  	15	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  3);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  3);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  3);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  4);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  4);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  4);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	39	None	replace
201	[BUG]  [BUGGY]  Node  body  =  n.getOwnerFunction();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  traverseFunction(Node  n,  Scope  parentScope)  {  Preconditions.checkState(n.getChildCount()  ==  3);  Preconditions.checkState(n.isFunction());      [BUGGY]  Node  body  =  n.getOwnerFunction();  [BUGGY]      Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);  collectMaybeUnreferencedVars(fnScope);  allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	338	338	5	replace	Node  body  =  n.getOwnerFunction();	  Node    body    =    n.getNext();    	non-compiled	[CE]  	3	None	replace
