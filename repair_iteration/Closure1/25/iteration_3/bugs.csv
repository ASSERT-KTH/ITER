bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(!isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(!isPropertyAssign);	  Preconditions.checkArgument(isPropertyAssign);    	non-compiled	[CE]  	105	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(isFunctionAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(isFunctionAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(isFunctionAssign);	  Preconditions.checkArgument(isPropertyAssign);    	non-compiled	[CE]  	105	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign  &&  isFunctionExpressionNames);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign  &&  isFunctionExpressionNames);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(isPropertyAssign  &&  isFunctionExpressionNames);	  Preconditions.checkArgument(isPropertyAssign);    	non-compiled	[CE]  	105	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign  ||  isFunctionExpressionNames);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign  ||  isFunctionExpressionNames);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(isPropertyAssign  ||  isFunctionExpressionNames);	  Preconditions.checkArgument(isPropertyAssign);    	non-compiled	[CE]  	105	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getParent()  ==  null);	  Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	69	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getParent()  ==  null);	  Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	69	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getParent()!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	69	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getNext()  ==  null);	  Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	69	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getNext()  ==  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getNext()  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getNext()  ==  null);	  Preconditions.checkState(fnScope.getParent()    ==    null);    	non-compiled	[CE]  	69	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isPropertyAssign);	  Preconditions.checkState(fnScope.isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isPropertyAssign);	  Preconditions.checkState(fnScope.isPropertyAssign);    	non-compiled	[CE]  	51	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  parent);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()  ==  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  parent);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  node);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  node);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	76	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	76	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	76	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    1);    	non-compiled	[CE]  	76	None	replace
35	[BUG]  [BUGGY]  traverse(n,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  parentScope);	  traverseNode(fnScope,    parentScope);    	non-compiled	[CE]  	62	None	replace
36	[BUG]  [BUGGY]  traverseNode(parentScope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parentScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parentScope,  fnScope);	  traverseNode(fnScope,    parentScope);    	non-compiled	[CE]  	62	None	replace
37	[BUG]  [BUGGY]  traverse(fnScope,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  n);	  traverseNode(fnScope,    parentScope);    	non-compiled	[CE]  	62	None	replace
38	[BUG]  [BUGGY]  traverseFunction(fnScope,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseFunction(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseFunction(fnScope,  parentScope);	  traverseNode(fnScope,    parentScope);    	non-compiled	[CE]  	62	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	99	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	99	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(fnScope));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(fnScope));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(fnScope));	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	99	None	replace
42	[BUG]  [BUGGY]  removeGlobals(fnScope,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(fnScope,  n);	  removeGlobals(fnScope,    scope);    	non-compiled	[CE]  	36	None	replace
43	[BUG]  [BUGGY]  removeGlobals(n,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(n,  scope);	  removeGlobals(fnScope,    scope);    	non-compiled	[CE]  	36	None	replace
44	[BUG]  [BUGGY]  removeGlobals(fnScope,  traverseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(fnScope,  traverseNode);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(fnScope,  traverseNode);	  removeGlobals(fnScope,    scope);    	non-compiled	[CE]  	36	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.isFunction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isAssignmentOp());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isAssignmentOp());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isAssignmentOp());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()!=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	21	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().equals( "function "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().equals( "function "));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().equals( "function "));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	80	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.hasChildren());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	80	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	80	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	80	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	80	None	replace
66	[BUG]  [BUGGY]  traverseNode(fnScope,  body);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  body);	  traverseNode(n,    body,    fnScope);    	non-compiled	[CE]  	53	None	replace
67	[BUG]  [BUGGY]  traverseNode(parentScope,  n,  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parentScope,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parentScope,  n,  fnScope);	  traverseNode(n,    body,    fnScope);    	non-compiled	[CE]  	53	None	replace
68	[BUG]  [BUGGY]  removeGlobals(n,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(n,  parentScope);	  removeGlobals(fnScope,    parentScope);    	non-compiled	[CE]  	37	None	replace
69	[BUG]  [BUGGY]  removeGlobals(scope,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(scope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(scope,  parentScope);	  removeGlobals(fnScope,    parentScope);    	non-compiled	[CE]  	37	None	replace
70	[BUG]  [BUGGY]  removeGlobals(parentScope,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(parentScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(parentScope,  fnScope);	  removeGlobals(fnScope,    parentScope);    	non-compiled	[CE]  	37	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  isPropertyAssign);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  this,  scope);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  allFunctionScopes);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  allFunctionScopes);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  this,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parentScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  this,  parentScope);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  node);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  node);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  this,  node);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
79	[BUG]  [BUGGY]  traverseNode(n,  fnScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  fnScope,  scope);	  traverseNode(n,    parentScope,    scope);    	non-compiled	[CE]  	65	None	replace
80	[BUG]  [BUGGY]  traverseNode(body,  parentScope,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  parentScope,  scope);	  traverseNode(n,    parentScope,    scope);    	non-compiled	[CE]  	65	None	replace
81	[BUG]  [BUGGY]  traverseNode(n,  parentScope,  scope,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  parentScope,  scope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  parentScope,  scope,  fnScope);	  traverseNode(n,    parentScope,    scope);    	non-compiled	[CE]  	65	None	replace
82	[BUG]  [BUGGY]  collectAllFunctionScopes(n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectAllFunctionScopes(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectAllFunctionScopes(n,  parentScope);	  collectAllFunctionScopes(fnScope,    parentScope);    	non-compiled	[CE]  	27	None	replace
83	[BUG]  [BUGGY]  traverseAllFunctionScopes(fnScope,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(fnScope,  parentScope);	  collectAllFunctionScopes(fnScope,    parentScope);    	non-compiled	[CE]  	27	None	replace
84	[BUG]  [BUGGY]  collectAllFunctionScopes(fnScope,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectAllFunctionScopes(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectAllFunctionScopes(fnScope,  n);	  collectAllFunctionScopes(fnScope,    parentScope);    	non-compiled	[CE]  	27	None	replace
85	[BUG]  [BUGGY]  collectFunctionScopes(fnScope,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectFunctionScopes(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectFunctionScopes(fnScope,  parentScope);	  collectAllFunctionScopes(fnScope,    parentScope);    	non-compiled	[CE]  	27	None	replace
86	[BUG]  [BUGGY]  traverseAllFunctionScopes(n,  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(n,  parentScope);	  collectAllFunctionScopes(fnScope,    parentScope);    	non-compiled	[CE]  	27	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isPropertyAssign());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.isPropertyAssign());	  Preconditions.checkState(fnScope.isPropertyAssign());    	non-compiled	[CE]  	48	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isPropertyAssign());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isPropertyAssign());	  Preconditions.checkState(fnScope.isPropertyAssign());    	non-compiled	[CE]  	48	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign());	  Preconditions.checkState(fnScope.isPropertyAssign());    	non-compiled	[CE]  	48	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(scope.isPropertyAssign());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.isPropertyAssign());	  Preconditions.checkState(fnScope.isPropertyAssign());    	non-compiled	[CE]  	48	None	replace
91	[BUG]  [BUGGY]  traverseUnreferencedVars(fnScope,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(fnScope,  scope);	  collectUnreferencedVars(fnScope,    scope);    	non-compiled	[CE]  	33	None	replace
92	[BUG]  [BUGGY]  collectUnreferencedVars(n,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectUnreferencedVars(n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectUnreferencedVars(n,  scope);	  collectUnreferencedVars(fnScope,    scope);    	non-compiled	[CE]  	33	None	replace
93	[BUG]  [BUGGY]  collectUnreferencedVars(fnScope,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectUnreferencedVars(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectUnreferencedVars(fnScope,  parentScope);	  collectUnreferencedVars(fnScope,    scope);    	non-compiled	[CE]  	33	None	replace
94	[BUG]  [BUGGY]  gatherUnreferencedVars(fnScope,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  gatherUnreferencedVars(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	gatherUnreferencedVars(fnScope,  n);	  collectUnreferencedVars(fnScope,    scope);    	non-compiled	[CE]  	33	None	replace
95	[BUG]  [BUGGY]  traverseUnreferencedVars(n,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(n,  scope);	  collectUnreferencedVars(fnScope,    scope);    	non-compiled	[CE]  	33	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isConstructor());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(scope.isFunction()  ||  fnScope.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.isFunction()  ||  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.isFunction()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(scope.isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.isPropertyAssign);	  Preconditions.checkState(parentScope.isPropertyAssign);    	non-compiled	[CE]  	52	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()!=  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	1	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	1	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()!=  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()!=  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	1	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(parentScope  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope  ==  null);	  Preconditions.checkState(fnScope    ==    null);    	non-compiled	[CE]  	44	None	replace
108	[BUG]  [BUGGY]  traverseNode(n,  parent,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  parent,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  parent,  fnScope);	  traverseNode(n,    n,    fnScope);    	non-compiled	[CE]  	55	None	replace
109	[BUG]  [BUGGY]  traverseNode(fnScope,  n,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  n,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  n,  n);	  traverseNode(n,    n,    fnScope);    	non-compiled	[CE]  	55	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  2);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	90	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	90	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  2);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()!=  2);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	90	None	replace
113	[BUG]  [BUGGY]  collectUnreferencedVars(n,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectUnreferencedVars(n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectUnreferencedVars(n,  fnScope);	  collectUnreferencedVars(fnScope,    n);    	non-compiled	[CE]  	35	None	replace
114	[BUG]  [BUGGY]  collectUnreferencedVars(fnScope,  n,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectUnreferencedVars(fnScope,  n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectUnreferencedVars(fnScope,  n,  scope);	  collectUnreferencedVars(fnScope,    n);    	non-compiled	[CE]  	35	None	replace
115	[BUG]  [BUGGY]  traverseUnreferencedVars(n,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(n,  fnScope);	  collectUnreferencedVars(fnScope,    n);    	non-compiled	[CE]  	35	None	replace
116	[BUG]  [BUGGY]  collectUnreferencedVars(fnScope,  n,  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectUnreferencedVars(fnScope,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectUnreferencedVars(fnScope,  n,  parentScope);	  collectUnreferencedVars(fnScope,    n);    	non-compiled	[CE]  	35	None	replace
117	[BUG]  [BUGGY]  gatherUnreferencedVars(n,  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  gatherUnreferencedVars(n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	gatherUnreferencedVars(n,  fnScope);	  collectUnreferencedVars(fnScope,    n);    	non-compiled	[CE]  	35	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunction());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  node.hasChildren());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  node.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  node.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  parentScope,  scope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
125	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Traversal.traverse(compiler,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Traversal.traverse(compiler,  n,  parentScope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
126	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Context.traverse(compiler,  n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Context.traverse(compiler,  n,  scope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
133	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayList(fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayList(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayList(fnScope);	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
134	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayList(fnScope.size());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayList(fnScope.size());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayList(fnScope.size());	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
135	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayList(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayList(0);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayList(0);	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
136	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayList(scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayList(scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayList(scope);	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
137	[BUG]  [BUGGY]  traverseNode(body,  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  fnScope);	  traverseNode(n,    fnScope);    	non-compiled	[CE]  	60	None	replace
138	[BUG]  [BUGGY]  traverseNode(n,  fnScope,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  fnScope,  parentScope);	  traverseNode(n,    fnScope);    	non-compiled	[CE]  	60	None	replace
139	[BUG]  [BUGGY]  allFunctionScopes.add(n,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(n,  scope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	42	None	replace
140	[BUG]  [BUGGY]  allFunctionScopes.add(scope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(scope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(scope,  fnScope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	42	None	replace
141	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(fnScope,  n);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	42	None	replace
142	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(fnScope,  parentScope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	42	None	replace
143	[BUG]  [BUGGY]  traverse(body,  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(body,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(body,  fnScope);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
144	[BUG]  [BUGGY]  traverse(n,  fnScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  fnScope,  scope);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
145	[BUG]  [BUGGY]  traverse(n,  fnScope,  allFunctionScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  fnScope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  fnScope,  allFunctionScopes);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
146	[BUG]  [BUGGY]  traverse(n,  fnScope,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  fnScope,  parentScope);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n  ==  null);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  	46	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	29	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(scope.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	29	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  parentScope.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  parentScope.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	29	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  +  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  -  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  -  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  0);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  0);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  0);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  Token.NAME,  n.getType());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  Token.NAME,  n.getType());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes.size()  ==  Token.NAME,  n.getType());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes.size()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  allFunctionScopes.size());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  allFunctionScopes.size());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  allFunctionScopes.size());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
162	[BUG]  [BUGGY]  traverse(fnScope,  n,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  n,  parentScope);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
163	[BUG]  [BUGGY]  traverse(fnScope,  n,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  n,  parent);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  n,  parent);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
164	[BUG]  [BUGGY]  traverse(parentScope,  n,  body);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(parentScope,  n,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(parentScope,  n,  body);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
165	[BUG]  [BUGGY]  traverse(body,  n,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(body,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(body,  n,  fnScope);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
166	[BUG]  [BUGGY]  traverse(fnScope,  parentScope,  body);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  parentScope,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  parentScope,  body);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
167	[BUG]  [BUGGY]  traverse(fnScope,  n,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  n,  scope);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
168	[BUG]  [BUGGY]  allFunctionScopes.add(parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(parentScope);	  allFunctionScopes.add(scope);    	non-compiled	[CE]  	40	None	replace
169	[BUG]  [BUGGY]  traverseNode(fnScope,  n,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  n,  parentScope);	  traverseNode(fnScope,    n);    	non-compiled	[CE]  	59	None	replace
170	[BUG]  [BUGGY]  traverseScope(n,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(n,  fnScope);	  traverseNode(fnScope,    n);    	non-compiled	[CE]  	59	None	replace
171	[BUG]  [BUGGY]  traverseNode(parentScope,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parentScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parentScope,  n);	  traverseNode(fnScope,    n);    	non-compiled	[CE]  	59	None	replace
172	[BUG]  [BUGGY]  traverseNode(fnScope,  n,  scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  n,  scope);	  traverseNode(fnScope,    n);    	non-compiled	[CE]  	59	None	replace
173	[BUG]  [BUGGY]  traverseNode(fnScope,  n,  parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  n,  parent);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  n,  parent);	  traverseNode(fnScope,    n);    	non-compiled	[CE]  	59	None	replace
174	[BUG]  [BUGGY]  traverseNode(body,  parentScope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  parentScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  parentScope,  fnScope);	  traverseNode(n,    parentScope,    fnScope);    	non-compiled	[CE]  	63	None	replace
175	[BUG]  [BUGGY]  traverseNode(n,  parentScope,  fnScope,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  parentScope,  fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  parentScope,  fnScope,  scope);	  traverseNode(n,    parentScope,    fnScope);    	non-compiled	[CE]  	63	None	replace
176	[BUG]  [BUGGY]  removeGlobals(scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(scope);	  removeGlobals(parentScope);    	non-compiled	[CE]  	38	None	replace
177	[BUG]  [BUGGY]  fnScope.removeChild(body);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  fnScope.removeChild(body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	fnScope.removeChild(body);	  removeGlobals(parentScope);    	non-compiled	[CE]  	38	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignment());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isAssignment());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isAssignment());	  Preconditions.checkState(n.isPropertyAssign());    	non-compiled	[CE]  	49	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssign());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isPropertyAssign());	  Preconditions.checkState(n.isPropertyAssign());    	non-compiled	[CE]  	49	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.isConstructor());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isConstructor());	  Preconditions.checkState(n.isPropertyAssign());    	non-compiled	[CE]  	49	None	replace
181	[BUG]  [BUGGY]  allFunctionScopes.add(n,  fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(n,  fnScope);	  allFunctionScopes.add(n);    	non-compiled	[CE]  	39	None	replace
182	[BUG]  [BUGGY]  allFunctionScopes.add(n,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(n,  parentScope);	  allFunctionScopes.add(n);    	non-compiled	[CE]  	39	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()!=  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()!=  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()!=    n);    	non-compiled	[CE]  	93	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()!=  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()!=  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()!=    n);    	non-compiled	[CE]  	93	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parentScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()!=    n);    	non-compiled	[CE]  	93	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parent);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parent);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  parent);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()!=    n);    	non-compiled	[CE]  	93	None	replace
187	[BUG]  [BUGGY]  traverseScope(n,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(n,  scope);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
188	[BUG]  [BUGGY]  traverseScope(fnScope,  parentScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(fnScope,  parentScope);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
189	[BUG]  [BUGGY]  traverseScope(body,  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(body,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(body,  parentScope);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
190	[BUG]  [BUGGY]  traverseScope(n,  parentScope,  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(n,  parentScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(n,  parentScope,  fnScope);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
191	[BUG]  [BUGGY]  traverseScope(n,  parentScope,  scope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(n,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(n,  parentScope,  scope);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope!=  null);	  Preconditions.checkState(parentScope!=    null);    	non-compiled	[CE]  	43	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.NAME);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSecondarySideEffects(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSecondarySideEffects(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSecondarySideEffects(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(mayHaveSecondarySideEffects,  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(mayHaveSecondarySideEffects,  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(mayHaveSecondarySideEffects,  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  allFunctionScopes);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  allFunctionScopes);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects,  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects,  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  mustHaveSecondarySideEffects);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign,  mustHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign,  mustHaveSecondarySideEffects);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  fnScope);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  preserveGlobals);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  preserveGlobals);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  preserveGlobals);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope!=  null  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(fnScope  ==  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope  ==  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope  ==  null  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getLastChild()  ==  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getLastChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
221	[BUG]  [BUGGY]  allFunctionScopes  =  new  LinkedList();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  LinkedList();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  LinkedList();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
222	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList  <  Node>();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList  <  Node>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList  <  Node>();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
223	[BUG]  [BUGGY]  AllFunctionScopes  =  new  ArrayList();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  new  ArrayList();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  new  ArrayList();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
224	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList  <  Scope>();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList  <  Scope>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList  <  Scope>();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
225	[BUG]  [BUGGY]  traverseNode(n,  body,  fnScope,  scope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  body,  fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  body,  fnScope,  scope);	  traverseNode(body,    n,    fnScope,    scope);    	non-compiled	[CE]  	71	None	replace
226	[BUG]  [BUGGY]  traverseNode(body,  n,  parentScope,  scope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  n,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  n,  parentScope,  scope);	  traverseNode(body,    n,    fnScope,    scope);    	non-compiled	[CE]  	71	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isProperty());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isProperty());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isProperty());	  Preconditions.checkState(n.isProperty());    	non-compiled	[CE]  	86	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isProperty());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.isProperty());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.isProperty());	  Preconditions.checkState(n.isProperty());    	non-compiled	[CE]  	86	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  isPropertyAssign());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isFunction()  ||  isPropertyAssign());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  	28	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  2);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	101	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	101	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	101	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	101	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  2);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()!=  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	101	None	replace
235	[BUG]  [BUGGY]  allFunctionScopes  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  allFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	14	None	replace
236	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.EMPTY_LIST;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.EMPTY_LIST;  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.EMPTY_LIST;	  allFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	14	None	replace
237	[BUG]  [BUGGY]  traverseNode(body,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  scope);	  traverseNode(n,    scope);    	non-compiled	[CE]  	64	None	replace
238	[BUG]  [BUGGY]  traverseNode(fnScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  scope);	  traverseNode(n,    scope);    	non-compiled	[CE]  	64	None	replace
239	[BUG]  [BUGGY]  traverseFunction(n,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseFunction(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseFunction(n,  parentScope);	  traverseNode(n,    scope);    	non-compiled	[CE]  	64	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	23	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	23	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	23	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	23	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	23	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.GETPROP  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	23	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.isFunction());	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	95	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkArgument(parentScope.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(parentScope.isFunction());	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	95	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	95	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(isFunction()  ||  isPropertyAssign());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isFunction()  ||  isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isFunction()  ||  isPropertyAssign());	  Preconditions.checkState(isFunction());    	non-compiled	[CE]  	106	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(!isFunction());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isFunction());	  Preconditions.checkState(isFunction());    	non-compiled	[CE]  	106	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope!=  null  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  fnScope.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope!=  null  &&  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  fnScope.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope!=  null  &&  fnScope.isConstructor());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  parentScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope!=  null  &&  parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope!=  null  &&  parentScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null  &&  fnScope.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope!=  null  &&  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope!=  null  &&  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  fnScope.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n!=  null  &&  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n!=  null  &&  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isAll());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isAll()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isAll());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isFunction()  &&  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(scope.isFunction()  ||  fnScope.isAll());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.isFunction()  ||  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.isFunction()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
263	[BUG]  [BUGGY]  traverseNode(n,  a,  fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  a,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  a,  fnScope);	  traverseNode(a,    n,    fnScope);    	non-compiled	[CE]  	107	None	replace
264	[BUG]  [BUGGY]  traverseNode(a,  n,  parentScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(a,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(a,  n,  parentScope);	  traverseNode(a,    n,    fnScope);    	non-compiled	[CE]  	107	None	replace
265	[BUG]  [BUGGY]  traverseNode(fnScope,  n,  a);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  n,  a);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  n,  a);	  traverseNode(a,    n,    fnScope);    	non-compiled	[CE]  	107	None	replace
266	[BUG]  [BUGGY]  traverseNode(a,  n,  fnScope,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(a,  n,  fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(a,  n,  fnScope,  scope);	  traverseNode(a,    n,    fnScope);    	non-compiled	[CE]  	107	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign  &&  mayHaveSecondarySideEffects);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(mayHaveSecondarySideEffects  ||  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(mayHaveSecondarySideEffects  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(mayHaveSecondarySideEffects  ||  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  allFunctionScopes);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  allFunctionScopes);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  fnScope);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  n);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects  ||  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects  ||  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	32	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isConstructor());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	32	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isConstructor());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isConstructor());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	32	None	replace
276	[BUG]  [BUGGY]  traverse(n,  parentScope,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  parentScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  parentScope,  fnScope);	  traverse(n,    body,    fnScope);    	non-compiled	[CE]  	109	None	replace
277	[BUG]  [BUGGY]  traverse(fnScope,  body);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  body);	  traverse(n,    body,    fnScope);    	non-compiled	[CE]  	109	None	replace
278	[BUG]  [BUGGY]  traverse(n,  fnScope,  body);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  fnScope,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  fnScope,  body);	  traverse(n,    body,    fnScope);    	non-compiled	[CE]  	109	None	replace
279	[BUG]  [BUGGY]  traverse(body,  nScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(body,  nScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(body,  nScope);	  traverse(n,    body,    fnScope);    	non-compiled	[CE]  	109	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  this);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  this);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  parentScope,  this);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  fnScope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  scope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  fnScope,  this,  scope);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  allFunctionScopes);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  fnScope,  this,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  scope);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  &&  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
296	[BUG]  [BUGGY]  traverseNode(body,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  n);	  traverseNode(body,    parentScope);    	non-compiled	[CE]  	61	None	replace
297	[BUG]  [BUGGY]  traverseNode(body,  nScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  nScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  nScope);	  traverseNode(body,    parentScope);    	non-compiled	[CE]  	61	None	replace
298	[BUG]  [BUGGY]  traverseNode(parentScope,  n,  body);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parentScope,  n,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parentScope,  n,  body);	  traverseNode(fnScope,    n,    body);    	non-compiled	[CE]  	54	None	replace
299	[BUG]  [BUGGY]  AllFunctionScopes.remove(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.remove(n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.remove(n);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  	12	None	replace
300	[BUG]  [BUGGY]  AllFunctionScopes.remove(parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.remove(parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.remove(parentScope);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  	12	None	replace
301	[BUG]  [BUGGY]  allFunctionScopes.add(n,  traverseNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(n,  traverseNode);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(n,  traverseNode);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	88	None	replace
302	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  traverseNode,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(fnScope,  traverseNode,  n);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	88	None	replace
303	[BUG]  [BUGGY]  traverseUnreferencedVars(fnScope,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(fnScope,  n);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
304	[BUG]  [BUGGY]  traverseUnreferencedVars(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(n);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
305	[BUG]  [BUGGY]  traverseUnreferencedVars(fnScope,  allFunctionScopes);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(fnScope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(fnScope,  allFunctionScopes);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
306	[BUG]  [BUGGY]  traverseUnreferencedVars(fnScope,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(fnScope,  parentScope);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	4	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(fnScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	4	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	4	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects,  mayHaveSecondarySideEffects);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects,  mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects,  mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects  ||  this.mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects  ||  this.mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects  ||  this.mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(!this.mayHaveSecondarySideEffects);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!this.mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!this.mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  this.mayHaveSecondarySideEffects);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  &&  this.mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign  &&  this.mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  scope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  scope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION,  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION,  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  fnScope!=  null);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  scope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  scope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  fnScope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parentScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  node,  parentScope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  scope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	92	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  parentScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	92	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  parentScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	92	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.getFirstChild()  ==  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	92	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	92	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  parentScope);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parentScope);    	non-compiled	[CE]  	92	None	replace
336	[BUG]  [BUGGY]  traverseScope(n,  parent,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(n,  parent,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(n,  parent,  fnScope);	  traverseNode(parent,    n,    fnScope);    	non-compiled	[CE]  	58	None	replace
337	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.newArrayList(fnScope);	  AllFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	18	None	replace
338	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(fnScope.size());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(fnScope.size());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.newArrayList(fnScope.size());	  AllFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	18	None	replace
339	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(0);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(0);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.newArrayList(0);	  AllFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	18	None	replace
340	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(scope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.newArrayList(scope);	  AllFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	18	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.GETPROP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(!isFunctionAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isFunctionAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isFunctionAssign);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  isFunctionExpressionNames);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  isFunctionExpressionNames);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign  &&  isFunctionExpressionNames);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign,  fnScope);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  isFunctionExpression);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&  isFunctionExpression);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign  &&  isFunctionExpression);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  ||  isFunctionExpressionNames);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign  ||  isFunctionExpressionNames);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign  ||  isFunctionExpressionNames);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
352	[BUG]  [BUGGY]  traverseAllFunctionScopes(fnScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(fnScope,  scope);	  collectAllFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	25	None	replace
353	[BUG]  [BUGGY]  collectAllFunctionScopes(n,  scope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectAllFunctionScopes(n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectAllFunctionScopes(n,  scope);	  collectAllFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	25	None	replace
354	[BUG]  [BUGGY]  collectFunctionScopes(fnScope,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectFunctionScopes(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectFunctionScopes(fnScope,  scope);	  collectAllFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	25	None	replace
355	[BUG]  [BUGGY]  traverse(fnScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  scope);	  traverse(fnScope,    parentScope);    	non-compiled	[CE]  	111	None	replace
356	[BUG]  [BUGGY]  traverse(scope,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(scope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(scope,  parentScope);	  traverse(fnScope,    parentScope);    	non-compiled	[CE]  	111	None	replace
357	[BUG]  [BUGGY]  traverse(parentScope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(parentScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(parentScope,  fnScope);	  traverse(fnScope,    parentScope);    	non-compiled	[CE]  	111	None	replace
358	[BUG]  [BUGGY]  traverseNode(n,  body,  parentScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  body,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  body,  parentScope);	  traverseNode(body,    n,    parentScope);    	non-compiled	[CE]  	56	None	replace
359	[BUG]  [BUGGY]  traverseNode(n,  n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  n,  parentScope);	  traverseNode(body,    n,    parentScope);    	non-compiled	[CE]  	56	None	replace
360	[BUG]  [BUGGY]  traverseScope(n,  body,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(n,  body,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(n,  body,  parentScope);	  traverseNode(body,    n,    parentScope);    	non-compiled	[CE]  	56	None	replace
361	[BUG]  [BUGGY]  traverseNode(body,  n,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  n,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  n,  scope);	  traverseNode(body,    n,    parentScope);    	non-compiled	[CE]  	56	None	replace
362	[BUG]  [BUGGY]  AllFunctionScopes  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  AllFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	17	None	replace
363	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.EMPTY_LIST;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.EMPTY_LIST;  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.EMPTY_LIST;	  AllFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	17	None	replace
364	[BUG]  [BUGGY]  AllFunctionScopes  =  new  LinkedList  <  Node>();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  new  LinkedList  <  Node>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  new  LinkedList  <  Node>();	  AllFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	17	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes  ==  null);	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.size()  >  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.size()  >  0);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.size()  >  0);	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.contains(fnScope));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.contains(fnScope));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.contains(fnScope));	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  ||  allFunctionScopes.size()  ==  0);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  ||  allFunctionScopes.size()  ==  0);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes!=  null  ||  allFunctionScopes.size()  ==  0);	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.isEmpty());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.isEmpty());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.isEmpty());	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  &&  isPropertyAssign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  &&  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isFunction()  &&  isPropertyAssign);	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	31	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||  isPropertyAssign);	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	31	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(!parentScope.isFunction());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!parentScope.isFunction());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	31	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isInitializingFunction());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isInitializingFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isInitializingFunction());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	31	None	replace
374	[BUG]  [BUGGY]  traverseScope(body,  n,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(body,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(body,  n,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
375	[BUG]  [BUGGY]  traverseScope(fnScope,  body);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(fnScope,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(fnScope,  body);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
376	[BUG]  [BUGGY]  traverseScope(parentScope,  n,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(parentScope,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(parentScope,  n,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
377	[BUG]  [BUGGY]  traverseScope(str,  n,  fnScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(str,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(str,  n,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
378	[BUG]  [BUGGY]  traverseScope(scope,  n,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(scope,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(scope,  n,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.VAR);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
382	[BUG]  [BUGGY]  traverseAllScopes(fnScope,  allFunctionScopes);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope,  allFunctionScopes);	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
383	[BUG]  [BUGGY]  traverseAllScopes(fnScope,  scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope,  scope);	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
384	[BUG]  [BUGGY]  traverseAllScopes(fnScope,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope,  n);	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
385	[BUG]  [BUGGY]  traverseAllScopes(fnScope,  parentScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope,  parentScope);	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
386	[BUG]  [BUGGY]  traverseAllScopes(parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(parentScope);	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
387	[BUG]  [BUGGY]  traverseAllScopes(fnScope.getParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope.getParent());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope.getParent());	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(n.getFunctionType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getFunctionType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getFunctionType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getFunctionType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getFunctionType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getFunctionType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()!=  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()!=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getFunctionType()!=  Token.FUNCTION);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(scope.getFunctionType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getFunctionType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getFunctionType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  fnScope.getFunctionType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  fnScope.getFunctionType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  fnScope.getFunctionType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
393	[BUG]  [BUGGY]  traverseAllFunctionScopes(fnScope,  allFunctionScopes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(fnScope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(fnScope,  allFunctionScopes);	  traverseAllFunctionScopes(fnScope);    	non-compiled	[CE]  	24	None	replace
394	[BUG]  [BUGGY]  traverseAllFunctionScopes(fnScope,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(fnScope,  n);	  traverseAllFunctionScopes(fnScope);    	non-compiled	[CE]  	24	None	replace
395	[BUG]  [BUGGY]  traverseAllFunctionScopes(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(n);	  traverseAllFunctionScopes(fnScope);    	non-compiled	[CE]  	24	None	replace
396	[BUG]  [BUGGY]  traverseAllFunctionScopes(parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(parentScope);	  traverseAllFunctionScopes(fnScope);    	non-compiled	[CE]  	24	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(nameNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	89	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	89	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  parentScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	89	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope!=  null  ||  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(parentScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(childScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(childScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(childScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
412	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  traverseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.add(fnScope,  traverseNode);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.add(fnScope,  traverseNode);	  AllFunctionScopes.add(fnScope);    	non-compiled	[CE]  	41	None	replace
413	[BUG]  [BUGGY]  AllFunctionScopes.add(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.add(n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.add(n);	  AllFunctionScopes.add(fnScope);    	non-compiled	[CE]  	41	None	replace
414	[BUG]  [BUGGY]  traverse(parentScope,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(parentScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(parentScope,  n);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
415	[BUG]  [BUGGY]  traverse(parent,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(parent,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(parent,  n);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  this);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  body,  this);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  body,  this);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  parentScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  this,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  fnScope,  this,  parentScope);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  parentScope);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  fnScope,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  fnScope,  parentScope);	  NodeTraversal.traverse(compiler,    fnScope,    this);    	non-compiled	[CE]  	79	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(fnScope  ==  null  &&  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope  ==  null  &&  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope  ==  null  &&  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(fnScope  ==  null  ||  fnScope.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope  ==  null  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope  ==  null  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  fnScope.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope!=  null  &&  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope!=  null  &&  fnScope.isAll());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign  ||  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(MayHaveSecondarySideEffects  ||  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(MayHaveSecondarySideEffects  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(MayHaveSecondarySideEffects  ||  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects  ||  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(canHaveSecondarySideEffects  ||  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign    ||    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	85	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETELEM);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFirstChild());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasOneChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasOneChild());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.hasChildren());	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.NAME);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  0);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes.size()  ==  0);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  fnScopes.size());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  fnScopes.size());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  fnScopes.size());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null  &&  parentScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getParent()  ==  null  &&  parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getParent()  ==  null  &&  parentScope.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	29	None	replace
436	[BUG]  [BUGGY]  removeGlobals(fnScope,  codingConvention);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  removeGlobals(fnScope,  codingConvention);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	removeGlobals(fnScope,  codingConvention);	  removeGlobals(fnScope,    scope);    	non-compiled	[CE]  	36	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  fnScope);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
439	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayListWithCapacity(fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayListWithCapacity(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayListWithCapacity(fnScope);	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(MayHaveSecondarySideEffects,  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(MayHaveSecondarySideEffects,  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(MayHaveSecondarySideEffects,  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects,  isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(canHaveSecondarySideEffects,  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(canHaveSecondarySideEffects,  isPropertyAssign);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign,  mayHaveSecondarySideEffects,  preserveFunctionExpressionNames);	  Preconditions.checkState(isPropertyAssign,    mayHaveSecondarySideEffects);    	non-compiled	[CE]  	87	None	replace
443	[BUG]  [BUGGY]  traverseFunction(fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseFunction(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseFunction(fnScope);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
444	[BUG]  [BUGGY]  traverseUnreferencedVars(fnScope,  nameNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseUnreferencedVars(fnScope,  nameNode);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseUnreferencedVars(fnScope,  nameNode);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
445	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.add(fnScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.add(fnScope,  scope);	  AllFunctionScopes.add(fnScope);    	non-compiled	[CE]  	41	None	replace
446	[BUG]  [BUGGY]  traverseNode(n,  fnScope,  body);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  fnScope,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  fnScope,  body);	  traverseNode(body,    n,    fnScope,    scope);    	non-compiled	[CE]  	71	None	replace
447	[BUG]  [BUGGY]  allFunctionScopes.clear();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.clear();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.clear();	  allFunctionScopes.remove(scope);    	non-compiled	[CE]  	11	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  nameNode.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  nameNode.getFirstChild());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  nameNode.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(fnScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope  ==  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	1	None	replace
453	[BUG]  [BUGGY]  traverseNode(parent,  n,  body);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parent,  n,  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parent,  n,  body);	  traverseNode(fnScope,    n,    body);    	non-compiled	[CE]  	54	None	replace
454	[BUG]  [BUGGY]  traverseFunction(body,  n,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseFunction(body,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseFunction(body,  n,  fnScope);	  traverse(n,    body,    fnScope);    	non-compiled	[CE]  	109	None	replace
455	[BUG]  [BUGGY]  traverseScope(nameNode,  parentScope);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(nameNode,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(nameNode,  parentScope);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
456	[BUG]  [BUGGY]  allFunctionScopes  =  Collections.EMPTY_LIST  +  traverseNode(n,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Collections.EMPTY_LIST  +  traverseNode(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Collections.EMPTY_LIST  +  traverseNode(n,  parentScope);	  allFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	14	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  	46	None	replace
458	[BUG]  [BUGGY]  traverseNode(parent,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parent,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parent,  n);	  traverseNode(n,    fnScope);    	non-compiled	[CE]  	60	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	89	None	replace
460	[BUG]  [BUGGY]  if(scope!=  null)  {  collectAllFunctionScopes(fnScope,  scope);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  if(scope!=  null)  {  collectAllFunctionScopes(fnScope,  scope);  }  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	if(scope!=  null)  {  collectAllFunctionScopes(fnScope,  scope);  }	  collectAllFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	25	None	replace
461	[BUG]  [BUGGY]  collectAllFunctionScopes(fnScope,  codingConvention);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectAllFunctionScopes(fnScope,  codingConvention);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectAllFunctionScopes(fnScope,  codingConvention);	  collectAllFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	25	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(n.isInitializingFunction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isInitializingFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isInitializingFunction());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  	28	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	100	None	replace
465	[BUG]  [BUGGY]  traverse(fnScope,  parentScope,  scope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  parentScope,  scope);	  traverse(fnScope,    parentScope);    	non-compiled	[CE]  	111	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(parentScope!=  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope!=  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope!=  fnScope);	  removeGlobals(fnScope,    parentScope);    	non-compiled	[CE]  	37	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(!mayHaveSecondarySideEffects);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!mayHaveSecondarySideEffects);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign,  mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign,  mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign,  mayHaveSecondarySideEffects);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&!mayHaveSecondarySideEffects);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign  &&!mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign  &&!mayHaveSecondarySideEffects);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
471	[BUG]  [BUGGY]  traverseScope(body,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(body,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(body,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
472	[BUG]  [BUGGY]  traverseScope(nameNode,  n,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(nameNode,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(nameNode,  n,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
473	[BUG]  [BUGGY]  traverseScope(parent,  n,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(parent,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(parent,  n,  fnScope);	  traverseScope(n,    body,    fnScope);    	non-compiled	[CE]  	57	None	replace
474	[BUG]  [BUGGY]  collectUnreferencedVars(fnScope,  codingConvention);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectUnreferencedVars(fnScope,  codingConvention);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectUnreferencedVars(fnScope,  codingConvention);	  collectUnreferencedVars(fnScope,    scope);    	non-compiled	[CE]  	33	None	replace
475	[BUG]  [BUGGY]  traverseNode(nameNode,  parentScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(nameNode,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(nameNode,  parentScope,  scope);	  traverseNode(n,    parentScope,    scope);    	non-compiled	[CE]  	65	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionExpression());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionExpression());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  fnScope.isFunctionExpression());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.isFunction());    	non-compiled	[CE]  	30	None	replace
477	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.newArrayListWithCapacity(fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.newArrayListWithCapacity(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.newArrayListWithCapacity(fnScope);	  AllFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	18	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isFunction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isAll()  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isAll()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isUnknown()  ||  fnScope.isAll());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isUnknown()  ||  fnScope.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isUnknown()  ||  fnScope.isAll());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
480	[BUG]  [BUGGY]  traverseNode(nameNode,  n,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(nameNode,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(nameNode,  n,  fnScope);	  traverseNode(n,    n,    fnScope);    	non-compiled	[CE]  	55	None	replace
481	[BUG]  [BUGGY]  traverseNode(entry,  n,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(entry,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(entry,  n,  fnScope);	  traverseNode(n,    n,    fnScope);    	non-compiled	[CE]  	55	None	replace
482	[BUG]  [BUGGY]  traverseAllScopes(fnScope.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope.cloneTree());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope.cloneTree());	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
483	[BUG]  [BUGGY]  traverseAllScopes(fnScope,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllScopes(fnScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllScopes(fnScope,  fnScope);	  traverseAllScopes(fnScope);    	non-compiled	[CE]  	26	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	99	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSecondarySideEffects(n));	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	99	None	replace
486	[BUG]  [BUGGY]  traverseNode(n,  parentScope,  fnScope.cloneTree());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(n,  parentScope,  fnScope.cloneTree());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(n,  parentScope,  fnScope.cloneTree());	  traverseNode(n,    parentScope,    fnScope);    	non-compiled	[CE]  	63	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.hasChildren());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	4	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME,  scope);	  Preconditions.checkState(fnScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	4	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(n.isReference());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isReference());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isReference());	  Preconditions.checkState(n.isProperty());    	non-compiled	[CE]  	86	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isInterface());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isInterface());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isInterface());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isConstructor());    	non-compiled	[CE]  	94	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isInterface());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isInterface());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isConstructor()  ||  fnScope.isInterface());	  Preconditions.checkState(fnScope.isConstructor());    	non-compiled	[CE]  	32	None	replace
492	[BUG]  [BUGGY]  AllFunctionScopes  =  Collections.EMPTY_LIST  +  traverseNode(n,  parentScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Collections.EMPTY_LIST  +  traverseNode(n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Collections.EMPTY_LIST  +  traverseNode(n,  parentScope);	  AllFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	17	None	replace
493	[BUG]  [BUGGY]  AllFunctionScopes  =  new  ArrayList  <  Node>();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  new  ArrayList  <  Node>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  new  ArrayList  <  Node>();	  AllFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	17	None	replace
494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parentScope,  this);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  parentScope,  this);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
495	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  rootScope);	  NodeTraversal.traverse(compiler,    n,    parentScope);    	non-compiled	[CE]  	7	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign());	  Preconditions.checkState(isFunction());    	non-compiled	[CE]  	106	None	replace
497	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.addAll(fnScope);	  allFunctionScopes.add(scope);    	non-compiled	[CE]  	40	None	replace
498	[BUG]  [BUGGY]  allFunctionScopes.addAll(fnScopes);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.addAll(fnScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.addAll(fnScopes);	  allFunctionScopes.add(scope);    	non-compiled	[CE]  	40	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.isFunction());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.isFunction());	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.mayHaveSecondarySideEffects);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(n.mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body!=  null  &&  body.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION,  fnScope);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION,  fnScope);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.VAR);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.VAR);    	non-compiled	[CE]  	98	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.CALL);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.CALL);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.NAME  ||  parentScope.getType()  ==  Token.CALL);	  Preconditions.checkState(parentScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
507	[BUG]  [BUGGY]  traverseNode(parent,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parent,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parent,  fnScope);	  traverseNode(fnScope,    parentScope);    	non-compiled	[CE]  	62	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  isPropertyAssign);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(n.isPropertyAssign()  ||  isPropertyAssign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isPropertyAssign()  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isPropertyAssign()  ||  isPropertyAssign);	  Preconditions.checkState(n.isPropertyAssign());    	non-compiled	[CE]  	49	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  parentScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  parentScope,  n);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  body,  scope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  body,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  body,  scope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.contains(fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.contains(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes!=  null  &&  allFunctionScopes.contains(fnScope);	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  ||  allFunctionScopes.contains(fnScope));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes!=  null  ||  allFunctionScopes.contains(fnScope));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes!=  null  ||  allFunctionScopes.contains(fnScope));	  Preconditions.checkState(allFunctionScopes!=    null);    	non-compiled	[CE]  	45	None	replace
514	[BUG]  [BUGGY]  traverse(fnScope,  body,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  body,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  body,  n);	  traverse(fnScope,    n,    body);    	non-compiled	[CE]  	108	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETELEM);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
516	[BUG]  [BUGGY]  traverseNode(parent,  n,  bodyScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(parent,  n,  bodyScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(parent,  n,  bodyScope);	  traverseNode(body,    n,    parentScope);    	non-compiled	[CE]  	56	None	replace
517	[BUG]  [BUGGY]  traverseScope(body,  n,  parentScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(body,  n,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(body,  n,  parentScope);	  traverseNode(body,    n,    parentScope);    	non-compiled	[CE]  	56	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkArgument(isPropertyAssign  ||  mayHaveSecondarySideEffects);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(isPropertyAssign  ||  mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(isPropertyAssign  ||  mayHaveSecondarySideEffects);	  Preconditions.checkArgument(isPropertyAssign);    	non-compiled	[CE]  	105	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(fnScope  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope  ==  null  ||  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.mayHaveSideEffects(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
522	[BUG]  [BUGGY]  traverseNode(root,  n,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(root,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(root,  n,  fnScope);	  traverseNode(parent,    n,    fnScope);    	non-compiled	[CE]  	58	None	replace
523	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList  <  String>();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList  <  String>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList  <  String>();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
524	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList  <  FunctionScope>();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList  <  FunctionScope>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList  <  FunctionScope>();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
525	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList(5);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList(5);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList(5);	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
526	[BUG]  [BUGGY]  allFunctionScopes  =  Collections.EMPTY_LIST,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Collections.EMPTY_LIST,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Collections.EMPTY_LIST,  fnScope);	  allFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	14	None	replace
527	[BUG]  [BUGGY]  traverseNode(fnScope,  n,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  n,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  n,  fnScope);	  traverseNode(fnScope,    n);    	non-compiled	[CE]  	59	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	99	None	replace
529	[BUG]  [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(referenced);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Lists.newArrayList(referenced);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Lists.newArrayList(referenced);	  AllFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	18	None	replace
530	[BUG]  [BUGGY]  traverseAllFunctionScopes(fnScope,  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(fnScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(fnScope,  fnScope);	  traverseAllFunctionScopes(fnScope);    	non-compiled	[CE]  	24	None	replace
531	[BUG]  [BUGGY]  traverseAllFunctionScopes(fnScope.getParent());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseAllFunctionScopes(fnScope.getParent());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseAllFunctionScopes(fnScope.getParent());	  traverseAllFunctionScopes(fnScope);    	non-compiled	[CE]  	24	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	73	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getJSType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getJSType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getJSType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	102	None	replace
534	[BUG]  [BUGGY]  collectAllFunctionScopes(fnScope,  fnScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectAllFunctionScopes(fnScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectAllFunctionScopes(fnScope,  fnScope);	  collectAllFunctionScopes(fnScope,    scope);    	non-compiled	[CE]  	25	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkArgument(isFunctionExpressionName);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(isFunctionExpressionName);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(isFunctionExpressionName);	  Preconditions.checkArgument(isPropertyAssign);    	non-compiled	[CE]  	105	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  allFunctionScopes);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  allFunctionScopes);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  scope,  allFunctionScopes);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
537	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  root);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parseFunctionScope(n,  parentScope));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parseFunctionScope(n,  parentScope));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  parseFunctionScope(n,  parentScope));	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  	97	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkArgument(parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(parentScope!=  null  &&  parentScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	83	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()!=  Token.FUNCTION  ||  fnScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	22	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parentScope.isFunction());	  Preconditions.checkState(parentScope.isFunction());    	non-compiled	[CE]  	29	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(n.isAssignmentOp());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isAssignmentOp());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isAssignmentOp());	  Preconditions.checkState(n.isPropertyAssign());    	non-compiled	[CE]  	49	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(n.isReferenced());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isReferenced());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isReferenced());	  Preconditions.checkState(n.isPropertyAssign());    	non-compiled	[CE]  	49	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  &&  parentScope!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isFunction()  &&  parentScope!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isFunction()  &&  parentScope!=  null);	  Preconditions.checkState(parentScope!=    null);    	non-compiled	[CE]  	43	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.getFunctionType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(fnScope.getFunctionType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getFunctionType()  ==  Token.FUNCTION  ||  fnScope.getParent()!=  null);	  Preconditions.checkState(fnScope.getFunctionType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	70	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects,  fnScope);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(this.mayHaveSecondarySideEffects,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(this.mayHaveSecondarySideEffects,  fnScope);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(isPropertyAssign,  this.mayHaveSecondarySideEffects);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isPropertyAssign,  this.mayHaveSecondarySideEffects);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isPropertyAssign,  this.mayHaveSecondarySideEffects);	  Preconditions.checkState(this.mayHaveSecondarySideEffects);    	non-compiled	[CE]  	84	None	replace
549	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
550	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  fnScope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    fnScope);    	non-compiled	[CE]  	74	None	replace
551	[BUG]  [BUGGY]  AllFunctionScopes.remove(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.remove(scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.remove(scope);	  AllFunctionScopes.remove(fnScope);    	non-compiled	[CE]  	12	None	replace
552	[BUG]  [BUGGY]  traverse(nameNode,  parentScope);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(nameNode,  parentScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(nameNode,  parentScope);	  traverse(fnScope,    parentScope);    	non-compiled	[CE]  	111	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isPropertyAssign());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.isPropertyAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.isPropertyAssign());	  Preconditions.checkState(parentScope.isPropertyAssign);    	non-compiled	[CE]  	52	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getJSType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getJSType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getJSType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	6	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope.isConstructor());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(fnScope.isConstructor());	  Preconditions.checkArgument(fnScope.isFunction());    	non-compiled	[CE]  	95	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(!isPropertyAssign,  isPropertyAssign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!isPropertyAssign,  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!isPropertyAssign,  isPropertyAssign);	  Preconditions.checkState(!isPropertyAssign);    	non-compiled	[CE]  	47	None	replace
558	[BUG]  [BUGGY]  traverseScope(scope,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseScope(scope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseScope(scope,  n);	  traverseScope(n,    parentScope);    	non-compiled	[CE]  	66	None	replace
559	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.CALL);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.NAME  ||  fnScope.getType()  ==  Token.CALL);	  Preconditions.checkState(fnScope.getType()    ==    Token.NAME);    	non-compiled	[CE]  	4	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  	46	None	replace
561	[BUG]  [BUGGY]  AllFunctionScopes.add(fnScope,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes.add(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes.add(fnScope,  n);	  allFunctionScopes.add(fnScope,    traverseNode);    	non-compiled	[CE]  	88	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild();	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  	103	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.VAR);	  removeGlobals(fnScope,    parentScope);    	non-compiled	[CE]  	37	None	replace
564	[BUG]  [BUGGY]  allFunctionScopes.add(fnScope,  fnScope);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes.add(fnScope,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes.add(fnScope,  fnScope);	  allFunctionScopes.add(fnScope,    scope);    	non-compiled	[CE]  	42	None	replace
565	[BUG]  [BUGGY]  traverse(fnScope,  n,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope,  n,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope,  n,  n);	  traverseNode(n,    n,    fnScope);    	non-compiled	[CE]  	55	None	replace
566	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  fnScope!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  fnScope!=  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  fnScope!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    fnScope);    	non-compiled	[CE]  	2	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
569	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getJSType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getJSType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getJSType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	68	None	replace
570	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.GETPROP);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  fnScope);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  fnScope);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	104	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
576	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  	72	None	replace
577	[BUG]  [BUGGY]  traverse(n,  parent,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(n,  parent,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(n,  parent,  fnScope);	  traverseNode(parent,    n,    fnScope);    	non-compiled	[CE]  	58	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isVarArgs());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isVarArgs());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isVarArgs());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isEmpty());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isEmpty());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isFunction()  ||  fnScope.isEmpty());	  Preconditions.checkState(fnScope.isFunction()    ||    fnScope.isAll());    	non-compiled	[CE]  	96	None	replace
580	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  	1	None	replace
581	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
582	[BUG]  [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(parentScope.getType()  ==  Token.FUNCTION  ||  parentScope.getType()  ==  Token.CALL);	  Preconditions.checkState(parentScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	19	None	replace
583	[BUG]  [BUGGY]  traverseNode(body,  n,  fnScope,  codingConvention);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(body,  n,  fnScope,  codingConvention);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(body,  n,  fnScope,  codingConvention);	  traverseNode(body,    n,    fnScope,    scope);    	non-compiled	[CE]  	71	None	replace
584	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	8	None	replace
585	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList  <  FUNctionScope>();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList  <  FUNctionScope>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList  <  FUNctionScope>();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
586	[BUG]  [BUGGY]  allFunctionScopes  =  new  ArrayList  <  FnScope>();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  new  ArrayList  <  FnScope>();  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  new  ArrayList  <  FnScope>();	  allFunctionScopes    =    new    ArrayList();    	non-compiled	[CE]  	16	None	replace
587	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.size()  >  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.isEmpty());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.isEmpty());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.isEmpty());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.contains(fnScope));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.contains(fnScope));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  allFunctionScopes.contains(fnScope));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
590	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes.size()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes.size()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    allFunctionScopes.size());    	non-compiled	[CE]  	5	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getFirstChild()  ==  n);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
592	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  1);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  1);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(body.getType()  ==  Token.FUNCTION  ||  body.getChildCount()  ==  2);	  Preconditions.checkState(body.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	77	None	replace
594	[BUG]  [BUGGY]  collectFunctionScopes(fnScope,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  collectFunctionScopes(fnScope,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	collectFunctionScopes(fnScope,  n);	  collectUnreferencedVars(fnScope,    n);    	non-compiled	[CE]  	35	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  	67	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  	75	None	replace
597	[BUG]  [BUGGY]  traverse(body,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(body,  n);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(body,  n);	  traverse(n,    fnScope);    	non-compiled	[CE]  	110	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(isFunction()  ||  isPropertyAssign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(isFunction()  ||  isPropertyAssign);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(isFunction()  ||  isPropertyAssign);	  Preconditions.checkState(isFunction());    	non-compiled	[CE]  	106	None	replace
599	[BUG]  [BUGGY]  traverseNode(fnScope,  parentScope,  scope);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverseNode(fnScope,  parentScope,  scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverseNode(fnScope,  parentScope,  scope);	  traverseNode(n,    parentScope,    scope);    	non-compiled	[CE]  	65	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  nameNode);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  nameNode);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  body);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  body);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  body);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    parent);    	non-compiled	[CE]  	91	None	replace
602	[BUG]  [BUGGY]  traverse(fnScope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  traverse(fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	traverse(fnScope);	  traverseUnreferencedVars(fnScope);    	non-compiled	[CE]  	34	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(n.isAll());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isAll());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isAll());	  Preconditions.checkState(n.isFunction());    	non-compiled	[CE]  	28	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.isFunctionAssign());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.isFunctionAssign());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.isFunctionAssign());	  Preconditions.checkState(fnScope.isPropertyAssign());    	non-compiled	[CE]  	48	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(fnScope.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Preconditions.checkState(fnScope.getType()    ==    Token.FUNCTION    ||    fnScope.hasChildren());    	non-compiled	[CE]  	80	None	replace
606	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  fnScope);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  this,  fnScope);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
607	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	78	None	replace
608	[BUG]  [BUGGY]  AllFunctionScopes  =  Collections.EMPTY_LIST,  fnScope);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  AllFunctionScopes  =  Collections.EMPTY_LIST,  fnScope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	AllFunctionScopes  =  Collections.EMPTY_LIST,  fnScope);	  AllFunctionScopes    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  	17	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkArgument(fnScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(fnScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(fnScope!=  null  &&  fnScope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(fnScope!=    null    &&    fnScope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	81	None	replace
610	[BUG]  [BUGGY]  Preconditions.checkState(allFunctionScopes.contains(fnScope));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(allFunctionScopes.contains(fnScope));  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(allFunctionScopes.contains(fnScope));	  Preconditions.checkState(fnScope    ==    null);    	non-compiled	[CE]  	44	None	replace
611	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayList(referenced);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayList(referenced);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayList(referenced);	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
612	[BUG]  [BUGGY]  allFunctionScopes  =  Lists.newArrayListWithCapacity(scope);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  allFunctionScopes  =  Lists.newArrayListWithCapacity(scope);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	allFunctionScopes  =  Lists.newArrayListWithCapacity(scope);	  allFunctionScopes    =    Lists.newArrayList();    	non-compiled	[CE]  	15	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.VAR);  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.getType()  ==  Token.VAR);	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.isConstructor());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION  ||  scope.isConstructor());	  Preconditions.checkState(scope.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	20	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(n.isFunction()  ||  fnScope.isFunction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(n.isFunction()  ||  fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(n.isFunction()  ||  fnScope.isFunction());	  Preconditions.checkState(fnScope!=    null    &&    fnScope.isFunction());    	non-compiled	[CE]  	82	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkArgument(!fnScope.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkArgument(!fnScope.isFunction());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkArgument(!fnScope.isFunction());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	31	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||!fnScope.isConstructor());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isFunction());  final  Node  body  =  n.getLastChild();  Preconditions.checkState(body.getNext()  ==  null  &&  body.isBlock());  Scope  fnScope  =  new  SyntacticScopeCreator(compiler).createScope(n,  parentScope);  traverseNode(body,  n,  fnScope);      [BUGGY]  Preconditions.checkState(!fnScope.isFunction()  ||!fnScope.isConstructor());  [BUGGY]      allFunctionScopes.add(fnScope);  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  traverseFunction  [RETURN_TYPE]  void  Node  n  Scope  parentScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  Node  a  assignNode  body  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.291111254869791	346	346	5	replace	Preconditions.checkState(!fnScope.isFunction()  ||!fnScope.isConstructor());	  Preconditions.checkState(!fnScope.isFunction());    	non-compiled	[CE]  	31	None	replace
